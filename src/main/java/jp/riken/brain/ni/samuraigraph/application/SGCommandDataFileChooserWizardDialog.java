package jp.riken.brain.ni.samuraigraph.application;

import java.io.File;

import javax.swing.JButton;
import javax.swing.text.JTextComponent;

import jp.riken.brain.ni.samuraigraph.data.SGDataTypeConstants;

/**
 * A dialog to choose data file for command script.
 */
public class SGCommandDataFileChooserWizardDialog extends SGSingleFileChooserWizardDialog
		implements SGNetCDFDataFileChooserPanel.AcceptListener {

	private static final long serialVersionUID = 1736001684089308782L;
	
    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Select the Data File";
	
	/** Creates new form SGCommandSingleFileChooserWizardDialog */
    public SGCommandDataFileChooserWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mNetCDFDataFileChooserPanel = new jp.riken.brain.ni.samuraigraph.application.SGNetCDFDataFileChooserPanel();
        mButtonPanel = new javax.swing.JPanel();
        mPreviousButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mDataInfoPanel = new javax.swing.JPanel();
        mDataFileNameTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mDataNameLabel = new javax.swing.JLabel();
        mFigureIdLabel = new javax.swing.JLabel();
        mFigureIdTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mDataTypeLabel = new javax.swing.JLabel();
        mDataTypeTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(mNetCDFDataFileChooserPanel, gridBagConstraints);

        mPreviousButton.setText("<Prev");
        mPreviousButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mPreviousButton);

        mNextButton.setText("Next>");
        mNextButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mNextButton);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mDataInfoPanel.setLayout(new java.awt.GridBagLayout());

        mDataFileNameTextField.setEditable(false);
        mDataFileNameTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        mDataFileNameTextField.setMinimumSize(new java.awt.Dimension(250, 22));
        mDataFileNameTextField.setPreferredSize(new java.awt.Dimension(300, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mDataInfoPanel.add(mDataFileNameTextField, gridBagConstraints);

        mDataNameLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mDataNameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        mDataInfoPanel.add(mDataNameLabel, gridBagConstraints);

        mFigureIdLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mFigureIdLabel.setText("Figure");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        mDataInfoPanel.add(mFigureIdLabel, gridBagConstraints);

        mFigureIdTextField.setEditable(false);
        mFigureIdTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        mFigureIdTextField.setMinimumSize(new java.awt.Dimension(250, 22));
        mFigureIdTextField.setPreferredSize(new java.awt.Dimension(40, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        mDataInfoPanel.add(mFigureIdTextField, gridBagConstraints);

        mDataTypeLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mDataTypeLabel.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        mDataInfoPanel.add(mDataTypeLabel, gridBagConstraints);

        mDataTypeTextField.setEditable(false);
        mDataTypeTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        mDataTypeTextField.setMinimumSize(new java.awt.Dimension(250, 22));
        mDataTypeTextField.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        mDataInfoPanel.add(mDataTypeTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        getContentPane().add(mDataInfoPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mDataFileNameTextField;
    private javax.swing.JPanel mDataInfoPanel;
    private javax.swing.JLabel mDataNameLabel;
    private javax.swing.JLabel mDataTypeLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mDataTypeTextField;
    private javax.swing.JLabel mFigureIdLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mFigureIdTextField;
    private jp.riken.brain.ni.samuraigraph.application.SGNetCDFDataFileChooserPanel mNetCDFDataFileChooserPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviousButton;
    // End of variables declaration//GEN-END:variables
    
    private void initProperty() {
    	this.setTitle(TITLE);
    	this.getNextButton().setVisible(false);
    	this.getPreviousButton().setVisible(false);
    	this.pack();
    }
    
    protected JButton getPreviousButton() {
        return this.mPreviousButton;
    }

    protected JButton getNextButton() {
        return this.mNextButton;
    }

    protected JButton getOKButton() {
        return this.mOKButton;
    }

    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    protected JTextComponent getFileNameTextComponent() {
        return this.mNetCDFDataFileChooserPanel.getLocalFileNameTextComponent();
    }
    
    protected JButton getFileChooserButton() {
        return this.mNetCDFDataFileChooserPanel.getLocalFileChooserButton();
    }
    
    @Override
    protected String getFileName() {
        return this.mNetCDFDataFileChooserPanel.getFileName();
    }
    
    @Override
    protected void setFileName(final String path) {
        this.mNetCDFDataFileChooserPanel.setFileName(path);
    }
    
    /**
     * Returns whether data file is local or not.
     * 
     * @return true if data file is local.
     */
    public boolean isLocalFileSelected() {
        return this.mNetCDFDataFileChooserPanel.isLocalFileSelected();
    }
    
    /**
     * 
     * @return true if fileName is a name of local file and it exists, 
     *          or if NetCDF URL is selected and the URL is set.
     */
    @Override
    protected boolean isAcceptable(String fileName) {
        if (this.mNetCDFDataFileChooserPanel.isLocalFileSelected()) {
            File f = new File(fileName);
            return super.isAcceptable(f);
        } else {
            return this.mNetCDFDataFileChooserPanel.isNetCDFUrlAcceptable();
        }
    }
    
    @Override
    public void checkLocalFileTextField() {
        this.onEdited(null);
    }
    
    @Override
    public void checkNetCDFURLTextField() {
        this.onNext();
    }
    
    @Override
    public void acceptNetCDFUrl(final boolean accpet) {
        super.acceptFile(accpet);
    }
    
    public void setVisibleUrlOfNetCDF(final boolean visible) {
        this.mNetCDFDataFileChooserPanel.setEnabledUrlOfNetCDFPanel(visible);
    }
    
    public void setFigureId(final String id) {
    	this.mFigureIdTextField.setText(id);
    }
    
    public void setDataName(final String name) {
    	this.mDataFileNameTextField.setText(name);
    }

    private String mDataType = null;
    
    public void setDataType(String dataType) {
    	String text = SGDataTypeConstants.getLongDataTypeConstant(dataType);
    	this.mDataTypeTextField.setText(text);
    	this.mDataType = dataType;
    }
    
    public String getDataType() {
    	return this.mDataType;
    }
}
