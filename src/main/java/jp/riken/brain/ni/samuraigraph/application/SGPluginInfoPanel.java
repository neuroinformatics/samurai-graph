package jp.riken.brain.ni.samuraigraph.application;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;

import jp.riken.brain.ni.samuraigraph.base.SGTableSelectionPanel;

public class SGPluginInfoPanel extends SGTableSelectionPanel {

	private static final long serialVersionUID = 1221907585358452576L;

	/**
	 * The default constructor.
	 */
	public SGPluginInfoPanel() {
		super();
		initComponents();
		this.initProperty();
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mTextComponentScrollPane = new javax.swing.JScrollPane();
        mTextComponent = new javax.swing.JTextPane();
        mTableScrollPane = new javax.swing.JScrollPane();
        mTable = new jp.riken.brain.ni.samuraigraph.base.SGTable();
        mSplitPane = new javax.swing.JSplitPane();

        mTextComponentScrollPane.setViewportView(mTextComponent);

        mTableScrollPane.setPreferredSize(new java.awt.Dimension(452, 120));

        mTable.setFont(new java.awt.Font("Dialog", 0, 11));
        mTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        mTableScrollPane.setViewportView(mTable);

        setLayout(new java.awt.BorderLayout());

        mSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        add(mSplitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane mSplitPane;
    protected jp.riken.brain.ni.samuraigraph.base.SGTable mTable;
    private javax.swing.JScrollPane mTableScrollPane;
    private javax.swing.JTextPane mTextComponent;
    private javax.swing.JScrollPane mTextComponentScrollPane;
    // End of variables declaration//GEN-END:variables
	
    /**
     * Name of the column for the sequential number.
     */
    public static final String COLUMN_NAME_NUMBER = "No.";

    /**
     * Name of the column for the name of a plug-in.
     */
    public static final String COLUMN_NAME_NAME = "Name";

    /**
     * Name of the column for the version of a plug-in.
     */
    public static final String COLUMN_NAME_VERSION = "Version";

    /**
     * Name of the column for the developer of a plug-in.
     */
    public static final String COLUMN_NAME_DEVELOPER = "Developer";

    /**
     * Name of the column for the file path of a plug-in.
     */
    public static final String COLUMN_NAME_FILE_PATH = "Path";

	/**
	 * The array of column names.
	 */
	public static final String[] COLUMN_NAME_ARRAY = { COLUMN_NAME_NUMBER,
			COLUMN_NAME_NAME, COLUMN_NAME_VERSION, COLUMN_NAME_DEVELOPER, 
			COLUMN_NAME_FILE_PATH };

	// The array of column width.
	private static final int[] PREFERRED_COLUMN_WIDTH_ARRAY_SXY = { 20, 30, 30, 30, 30 };

	private void initProperty() {
    	this.mTable.addMouseListener(this);
		
        // initialize the table model
        this.initTableModel();
        
        // update the table
        this.updateTable();
        
        this.mTextComponent.setContentType("text/html");
        
        this.mSplitPane.setLeftComponent(this.mTableScrollPane);
        this.mSplitPane.setRightComponent(this.mTextComponentScrollPane);
	}
	
	void setDividerLocation(final double proportionalLocation) {
		this.mSplitPane.setDividerLocation(proportionalLocation);
	}
	
	@Override
	protected String[] getColumnNameArray() {
		return COLUMN_NAME_ARRAY;
	}

	@Override
	protected int[] getPreferredColumnWidthArray() {
		return PREFERRED_COLUMN_WIDTH_ARRAY_SXY;
	}

	@Override
	protected SelectionTableModel createTableModelInstance() {
		return new PluginTableModel();
	}

	@Override
	protected void updateTextArea() {
	    // get the values at pressed row and set them to the text area

		PluginTableModel model = (PluginTableModel) this.mTableModel;
        final int row = this.mTable.getSelectedRow();
		String name = model.getValueAt(row, 
				model.findColumn(COLUMN_NAME_NAME)).toString();
		String version = model.getValueAt(row,
				model.findColumn(COLUMN_NAME_VERSION)).toString();
		String developer = model.getValueAt(row,
				model.findColumn(COLUMN_NAME_DEVELOPER)).toString();
		String desc = model.getDesc(row);
		String fileName = model.getValueAt(row, 
				model.findColumn(COLUMN_NAME_FILE_PATH)).toString();
		
		// creates a text
        StringBuffer sb = new StringBuffer();
        sb.append("<html>");
        sb.append("<head>");
        sb.append("<title>Plug-in Information</title>");
        sb.append("</head>");
        sb.append("<body>");
        this.addValue(sb, COLUMN_NAME_NAME, name);
        this.addValue(sb, COLUMN_NAME_VERSION, version);
        this.addValue(sb, COLUMN_NAME_DEVELOPER, developer);
        this.addValue(sb, COLUMN_NAME_FILE_PATH, fileName);
        this.addValue(sb, "Description", desc);
        sb.append("</body>");
        sb.append("</html>");
        this.mTextComponent.setText(sb.toString());
        
        // set the caret position
        SwingUtilities.invokeLater(new Runnable(){
            public void run() {
            	mTextComponent.setCaretPosition(0);
            }
        });
	}
	
	private void addValue(StringBuffer sb, String key, String value) {
        sb.append("<p>");
        sb.append("<b>");
        sb.append(key);
        sb.append("</b>");
        sb.append("<br>");
        sb.append(value);
        sb.append("</p>");
	}

	public void setPlugins(List<SGPluginFile> pluginList) {
		this.initTableModel();
		PluginTableModel model = (PluginTableModel) this.mTableModel;
		for (int ii = 0; ii < pluginList.size(); ii++) {
			SGPluginFile pFile = pluginList.get(ii);
			model.addRow(ii, pFile);
		}
		this.updateTable();
		
        if (pluginList.size() == 0) {
        	this.mTextComponent.setText("");
        } else {
            SwingUtilities.invokeLater(new Runnable() {
            	public void run() {
                    // selects the first row
                    mTable.setRowSelectionInterval(0, 0);
                    
                    // updates the text area
                	updateTextArea();
            	}
            });
        }
	}

    protected class PluginTableModel extends SelectionTableModel {
        
        private static final long serialVersionUID = 2213043296565029421L;

        public PluginTableModel() {
            super();
        }
        
        private Map<Integer, String> mDescMap = new HashMap<Integer, String>();

        protected void addRow(final int index, SGPluginFile pFile) {
        	String name = pFile.getName();
        	String version = pFile.getVersion();
        	String developer = pFile.getDeveloper();
        	String path = pFile.getPath();
            Object[] array = { index + 1, name, version, developer, path };
            super.addRow(array);
            String desc = pFile.getDesc();
            this.mDescMap.put(index, desc);
        }
        
        public String getDesc(final int index) {
        	return this.mDescMap.get(index);
        }
    }

	@Override
    protected JTable getTable() {
    	return this.mTable;
    }
    
	@Override
    protected JTextComponent getTextComponent() {
		return this.mTextComponent;
	}

}
