
package jp.riken.brain.ni.samuraigraph.base;

import java.util.Comparator;
import java.util.Iterator;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeSet;

import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import org.joda.time.DateTime;

/**
 * A dialog to input date.
 * 
 */
public class SGDateInputDialog extends SGAbstractDateInputDialog {

	private static final long serialVersionUID = -4940194114779687268L;
	
	public static final String TITLE = "Input Date";
	
    public SGDateInputDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.init();
    }

    public SGDateInputDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mMainPanel = new javax.swing.JPanel();
        mTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mDatePanel = new javax.swing.JPanel();
        mYearLabel = new javax.swing.JLabel();
        mMonthLabel = new javax.swing.JLabel();
        mDayLabel = new javax.swing.JLabel();
        mMonthComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mDayComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mYearSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mTimePanel = new javax.swing.JPanel();
        mSecondComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mMinuteLabel = new javax.swing.JLabel();
        mMillisecondSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mHourComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mMinuteComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mMillisecondLabel = new javax.swing.JLabel();
        mHourLabel = new javax.swing.JLabel();
        mSecondLabel = new javax.swing.JLabel();
        mTimeZoneLabel = new javax.swing.JLabel();
        mTimeZoneComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mMainPanel.setLayout(new java.awt.GridBagLayout());

        mTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mMainPanel.add(mTextField, gridBagConstraints);

        mDatePanel.setLayout(new java.awt.GridBagLayout());

        mYearLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYearLabel.setText("Year");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mDatePanel.add(mYearLabel, gridBagConstraints);

        mMonthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMonthLabel.setText("Month");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mDatePanel.add(mMonthLabel, gridBagConstraints);

        mDayLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mDayLabel.setText("Day");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mDatePanel.add(mDayLabel, gridBagConstraints);

        mMonthComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMonthComboBox.setPreferredSize(new java.awt.Dimension(50, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mDatePanel.add(mMonthComboBox, gridBagConstraints);

        mDayComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mDayComboBox.setPreferredSize(new java.awt.Dimension(50, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mDatePanel.add(mDayComboBox, gridBagConstraints);

        mYearSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYearSpinner.setPreferredSize(new java.awt.Dimension(80, 24));
        mYearSpinner.setValue(new Integer(0));
        mYearSpinner.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mDatePanel.add(mYearSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mMainPanel.add(mDatePanel, gridBagConstraints);

        mTimePanel.setLayout(new java.awt.GridBagLayout());

        mSecondComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSecondComboBox.setPreferredSize(new java.awt.Dimension(50, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mSecondComboBox, gridBagConstraints);

        mMinuteLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMinuteLabel.setText("Minute");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mMinuteLabel, gridBagConstraints);

        mMillisecondSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMillisecondSpinner.setPreferredSize(new java.awt.Dimension(80, 24));
        mMillisecondSpinner.setValue(new Integer(0));
        mMillisecondSpinner.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mMillisecondSpinner, gridBagConstraints);

        mHourComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mHourComboBox.setPreferredSize(new java.awt.Dimension(50, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mTimePanel.add(mHourComboBox, gridBagConstraints);

        mMinuteComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMinuteComboBox.setPreferredSize(new java.awt.Dimension(50, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mMinuteComboBox, gridBagConstraints);

        mMillisecondLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMillisecondLabel.setText("Millisecond");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mMillisecondLabel, gridBagConstraints);

        mHourLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mHourLabel.setText("Hour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mTimePanel.add(mHourLabel, gridBagConstraints);

        mSecondLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSecondLabel.setText("Second");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mSecondLabel, gridBagConstraints);

        mTimeZoneLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTimeZoneLabel.setText("Time Zone");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mTimeZoneLabel, gridBagConstraints);

        mTimeZoneComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTimeZoneComboBox.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mTimeZoneComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mMainPanel.add(mTimePanel, gridBagConstraints);

        getContentPane().add(mMainPanel, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JPanel mDatePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mDayComboBox;
    private javax.swing.JLabel mDayLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mHourComboBox;
    private javax.swing.JLabel mHourLabel;
    private javax.swing.JPanel mMainPanel;
    private javax.swing.JLabel mMillisecondLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mMillisecondSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mMinuteComboBox;
    private javax.swing.JLabel mMinuteLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mMonthComboBox;
    private javax.swing.JLabel mMonthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mSecondComboBox;
    private javax.swing.JLabel mSecondLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mTextField;
    private javax.swing.JPanel mTimePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mTimeZoneComboBox;
    private javax.swing.JLabel mTimeZoneLabel;
    private javax.swing.JLabel mYearLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mYearSpinner;
    // End of variables declaration//GEN-END:variables
    
    static final int YEAR_MIN = -9999;

    static final int YEAR_MAX = 9999;

    private void init() {
    	
    	this.setTitle(TITLE);
    	
    	// sets up the components
		this.mYearSpinner.initProperties(
				new SpinnerNumberModel(0.0, YEAR_MIN, YEAR_MAX, 1),
				null, 0, 0);
    	for (int ii = 1; ii <= 12; ii++) {
    		this.mMonthComboBox.addItem(ii);
    	}
    	for (int ii = 0; ii < 24; ii++) {
    		this.mHourComboBox.addItem(ii);
    	}
    	for (int ii = 1; ii <= 31; ii++) {
    		this.mDayComboBox.addItem(ii);
    	}
    	for (int ii = 0; ii < 60; ii++) {
    		this.mMinuteComboBox.addItem(ii);
    	}
    	for (int ii = 0; ii < 60; ii++) {
    		this.mSecondComboBox.addItem(ii);
    	}
		this.mMillisecondSpinner.initProperties(
				new SpinnerNumberModel(0.0, 0, 999, 1),
				null, 0, 0);
		
		Set<String> minusTimeZoneSet = new TreeSet<String>(new Comparator<String>() {
			@Override
			public int compare(String o1, String o2) {
				return - o1.compareTo(o2);
			}
		});
		for (int ii = 1; ii <= 12; ii++) {
			StringBuffer sb = new StringBuffer();
			sb.append('-');
			sb.append(String.format("%02d", ii));
			sb.append(":00");
			minusTimeZoneSet.add(sb.toString());
		}
		minusTimeZoneSet.add("-03:30");
		minusTimeZoneSet.add("-04:30");
		minusTimeZoneSet.add("-09:30");
		Iterator<String> minusTimeZoneItr = minusTimeZoneSet.iterator();
		while (minusTimeZoneItr.hasNext()) {
			String str = minusTimeZoneItr.next();
			this.mTimeZoneComboBox.addItem(str);
		}
		
		this.mTimeZoneComboBox.addItem("+00:00");

		Set<String> plusTimeZoneSet = new TreeSet<String>();
		for (int ii = 1; ii <= 14; ii++) {
			StringBuffer sb = new StringBuffer();
			sb.append('+');
			sb.append(String.format("%02d", ii));
			sb.append(":00");
			plusTimeZoneSet.add(sb.toString());
		}
		plusTimeZoneSet.add("+12:45");
		plusTimeZoneSet.add("+11:30");
		plusTimeZoneSet.add("+10:30");
		plusTimeZoneSet.add("+09:30");
		plusTimeZoneSet.add("+08:45");
		plusTimeZoneSet.add("+06:30");
		plusTimeZoneSet.add("+05:45");
		plusTimeZoneSet.add("+05:30");
		plusTimeZoneSet.add("+04:30");
		plusTimeZoneSet.add("+03:30");
		Iterator<String> plusTimeZoneItr = plusTimeZoneSet.iterator();
		while (plusTimeZoneItr.hasNext()) {
			String str = plusTimeZoneItr.next();
			this.mTimeZoneComboBox.addItem(str);
		}
		
		// adds event listeners
		this.mYearSpinner.addChangeListener(this);
		this.mYearSpinner.getFormattedTextField().getDocument().addDocumentListener(this);
		this.mMonthComboBox.addItemListener(this);
		this.mDayComboBox.addItemListener(this);
		this.mHourComboBox.addItemListener(this);
		this.mMinuteComboBox.addItemListener(this);
		this.mSecondComboBox.addItemListener(this);
		this.mMillisecondSpinner.addChangeListener(this);
		this.mMillisecondSpinner.getFormattedTextField().getDocument().addDocumentListener(this);
		this.mTimeZoneComboBox.addItemListener(this);
		this.mTextField.getDocument().addDocumentListener(this);
		
		this.mYearSpinner.getFormattedTextField().addFocusListener(this);
		this.mMonthComboBox.addFocusListener(this);
		this.mDayComboBox.addFocusListener(this);
		this.mHourComboBox.addFocusListener(this);
		this.mMinuteComboBox.addFocusListener(this);
		this.mSecondComboBox.addFocusListener(this);
		this.mMillisecondSpinner.getFormattedTextField().addFocusListener(this);
		this.mTimeZoneComboBox.addFocusListener(this);
		this.mTextField.addFocusListener(this);
		
		this.mOKButton.addActionListener(this);
		this.mCancelButton.addActionListener(this);
		
		this.mTextField.requestFocus();
		this.mTextFieldFocused = true;
    }

    @Override
	protected SGTextField getTextField() {
		return this.mTextField;
	}

	@Override
	protected SGButton getOKButton() {
		return this.mOKButton;
	}

	@Override
	protected SGButton getCancelButton() {
		return this.mCancelButton;
	}

	@Override
	protected void onTextUpdated(DocumentEvent e) {
		Document doc = e.getDocument();
		String text = null;
		try {
			text = doc.getText(0, doc.getLength());
		} catch (BadLocationException e1) {
			return;
		}
		SGDate date = SGUtilityText.getDate(text);
		if (date != null) {
			TimeZone timeZone = date.getTimeZone();
			DateTime dateTime = date.getDateTime(timeZone);
			this.mYearSpinner.setValue(dateTime.getYear());
			this.mMonthComboBox.setSelectedItem(dateTime.getMonthOfYear());
			this.mDayComboBox.setSelectedItem(dateTime.getDayOfMonth());
			this.mHourComboBox.setSelectedItem(dateTime.getHourOfDay());
			this.mMinuteComboBox.setSelectedItem(dateTime.getMinuteOfHour());
			this.mSecondComboBox.setSelectedItem(dateTime.getSecondOfMinute());
			this.mMillisecondSpinner.setValue(dateTime.getMillisOfSecond());
			String timeZoneId = timeZone.getID();
			String timeZoneItem = "";
			if ("UTC".equals(timeZoneId)) {
				timeZoneItem = "+00:00";
			} else {
				final int plusIndex = timeZoneId.indexOf('+');
				if (plusIndex != -1) {
					timeZoneItem = timeZoneId.substring(plusIndex);
				} else {
					final int minusIndex = timeZoneId.indexOf('-');
					if (minusIndex != -1) {
						timeZoneItem = timeZoneId.substring(minusIndex);
					}
				}
			}
			this.mTimeZoneComboBox.setSelectedItem(timeZoneItem);
		}
		this.getOKButton().setEnabled(date != null);
	}

	@Override
	protected String createString() {
		StringBuffer sb = new StringBuffer();
		
		// year
		String year = this.mYearSpinner.getText();
		if (year == null || "".equals(year)) {
			return "";
		}
		Integer nYear = SGUtilityText.getInteger(year.toString());
		if (nYear == null) {
			return "";
		}
		if (nYear < YEAR_MIN || YEAR_MAX < nYear) {
			return "";
		}
		String sYear = String.format("%04d", nYear);
		sb.append(sYear);

		sb.append('-');

		// month
		String sMonth = String.format("%02d", 
				this.mMonthComboBox.getSelectedItem());
		sb.append(sMonth);

		sb.append('-');

		// day
		String sDay = String.format("%02d", 
				this.mDayComboBox.getSelectedItem());
		sb.append(sDay);

		sb.append('T');

		// hour
		String sHour = String.format("%02d", 
				this.mHourComboBox.getSelectedItem());
		sb.append(sHour);

		sb.append(':');

		// minute
		String sMinute = String.format("%02d", 
				this.mMinuteComboBox.getSelectedItem());
		sb.append(sMinute);

		sb.append(':');

		// second
		String sSecond = String.format("%02d", 
				this.mSecondComboBox.getSelectedItem());
		sb.append(sSecond);

		sb.append('.');

		// millisecond
		String millis = this.mMillisecondSpinner.getText();
		if (millis == null || "".equals(millis)) {
			return "";
		}
		Integer nMillis = SGUtilityText.getInteger(millis.toString());
		if (nMillis == null) {
			return "";
		}
		if (nMillis < 0 || 999 < nMillis) {
			return "";
		}
		String sMillis = String.format("%03d", nMillis);
		sb.append(sMillis);
		
		// time zone
		Object timeZoneItem = this.mTimeZoneComboBox.getSelectedItem();
		String timeZoneStr = timeZoneItem.toString();
		if ("+00:00".equals(timeZoneStr)) {
			sb.append('Z');
		} else {
			sb.append(timeZoneStr);
		}
		
		return sb.toString();
	}

	public void setDate(final double value) {
		String str = SGDateUtility.toStringByDateValue(value, 
				SGDateUtility.getUTCTimeZoneInstance());
		SGTextField tf = getTextField();
		tf.requestFocus();
		tf.setText(str);
	}
	
	public SGDate getDate() {
		String text = this.getTextField().getText();
		SGDate date = SGUtilityText.getDate(text);
		return date;
	}

	@Override
	protected void updateTextSub(String str) {
		SGDate date = SGUtilityText.getDate(str);
		this.getOKButton().setEnabled(date != null);
	}

}
