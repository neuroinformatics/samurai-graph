package jp.riken.brain.ni.samuraigraph.figure.java2d;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.SpinnerNumberModel;

import jp.riken.brain.ni.samuraigraph.base.SGAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGITwoAxesDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyDialog;
import jp.riken.brain.ni.samuraigraph.base.SGTwoAxesSelectionPanel;
import jp.riken.brain.ni.samuraigraph.figure.SGIAxisBreakConstants;

/**
 * A dialog to set the properties of axis break symbols.
 */
public class SGAxisBreakDialog extends SGPropertyDialog implements
        SGIAxisBreakConstants, SGITwoAxesDialog {

    // serialVersionUID
    private static final long serialVersionUID = 8343507997626906363L;

    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Axis Break Symbol Properties";

    /** Creates new form SGAxisBreakDialog */
    public SGAxisBreakDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.initialize();
    	this.pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPanel = new javax.swing.JPanel();
        mSizeSeparator = new javax.swing.JSeparator();
        mFormSeparator = new javax.swing.JSeparator();
        mColorSeparator = new javax.swing.JSeparator();
        mDistortionLabel = new javax.swing.JLabel();
        mAngleLabel = new javax.swing.JLabel();
        mDistortionSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mAngleSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mSizeLabel = new javax.swing.JLabel();
        mFormLabel = new javax.swing.JLabel();
        mLengthLabel = new javax.swing.JLabel();
        mLengthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mIntervalLabel = new javax.swing.JLabel();
        mIntervalSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mLineWidthLabel = new javax.swing.JLabel();
        mLineWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mColorLabel = new javax.swing.JLabel();
        mInnerColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mLeftSpaceLabel = new javax.swing.JLabel();
        mRightSpaceLabel = new javax.swing.JLabel();
        mLineColorLabel = new javax.swing.JLabel();
        mLineColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mInnerColorLabel = new javax.swing.JLabel();
        mHorizontalRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mVerticalRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mLocationLabel = new javax.swing.JLabel();
        mLocationSeparator = new javax.swing.JSeparator();
        mXValueLabel = new javax.swing.JLabel();
        mYValueLabel = new javax.swing.JLabel();
        mLocationAnchoredCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mXPanel = new javax.swing.JPanel();
        mXValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mXDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mYPanel = new javax.swing.JPanel();
        mYValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mHeadPanel = new javax.swing.JPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 35, 0, 0);
        mPanel.add(mSizeSeparator, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 45, 0, 0);
        mPanel.add(mFormSeparator, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 45, 0, 0);
        mPanel.add(mColorSeparator, gridBagConstraints);

        mDistortionLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mDistortionLabel.setText("Distortion");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mDistortionLabel, gridBagConstraints);

        mAngleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mAngleLabel.setText("Angle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        mPanel.add(mAngleLabel, gridBagConstraints);

        mDistortionSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mDistortionSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mDistortionSpinner, gridBagConstraints);

        mAngleSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mAngleSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mAngleSpinner, gridBagConstraints);

        mSizeLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mSizeLabel.setText("Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mSizeLabel, gridBagConstraints);

        mFormLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mFormLabel.setText("Form");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mFormLabel, gridBagConstraints);

        mLengthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLengthLabel.setText("Length");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mLengthLabel, gridBagConstraints);

        mLengthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLengthSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mLengthSpinner, gridBagConstraints);

        mIntervalLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mIntervalLabel.setText("Interval");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        mPanel.add(mIntervalLabel, gridBagConstraints);

        mIntervalSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mIntervalSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mIntervalSpinner, gridBagConstraints);

        mLineWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineWidthLabel.setText("Line Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mLineWidthLabel, gridBagConstraints);

        mLineWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineWidthSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mLineWidthSpinner, gridBagConstraints);

        mColorLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mColorLabel, gridBagConstraints);

        mInnerColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        mPanel.add(mInnerColorButton, gridBagConstraints);

        mLeftSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        mPanel.add(mLeftSpaceLabel, gridBagConstraints);

        mRightSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        mPanel.add(mRightSpaceLabel, gridBagConstraints);

        mLineColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineColorLabel.setText("Line");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 10, 5);
        mPanel.add(mLineColorLabel, gridBagConstraints);

        mLineColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mPanel.add(mLineColorButton, gridBagConstraints);

        mInnerColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mInnerColorLabel.setText("Inner");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 10, 5);
        mPanel.add(mInnerColorLabel, gridBagConstraints);

        mHorizontalRadioButton.setText("Horizontal");
        mHorizontalRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mHorizontalRadioButton, gridBagConstraints);

        mVerticalRadioButton.setText("Vertical");
        mVerticalRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mVerticalRadioButton, gridBagConstraints);

        mLocationLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mLocationLabel.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mLocationLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 60, 0, 0);
        mPanel.add(mLocationSeparator, gridBagConstraints);

        mXValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mXValueLabel.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mXValueLabel, gridBagConstraints);

        mYValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYValueLabel.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mYValueLabel, gridBagConstraints);

        mLocationAnchoredCheckBox.setText("Anchored");
        mLocationAnchoredCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        mPanel.add(mLocationAnchoredCheckBox, gridBagConstraints);

        mXPanel.setLayout(new java.awt.GridBagLayout());

        mXValueTextField.setColumns(6);
        mXValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXPanel.add(mXValueTextField, gridBagConstraints);

        mXDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXPanel.add(mXDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mXPanel, gridBagConstraints);

        mYPanel.setLayout(new java.awt.GridBagLayout());

        mYValueTextField.setColumns(6);
        mYValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYPanel.add(mYValueTextField, gridBagConstraints);

        mYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYPanel.add(mYDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mYPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(mPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(mHeadPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel mAngleLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mAngleSpinner;
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JLabel mColorLabel;
    private javax.swing.JSeparator mColorSeparator;
    private javax.swing.JLabel mDistortionLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mDistortionSpinner;
    private javax.swing.JLabel mFormLabel;
    private javax.swing.JSeparator mFormSeparator;
    private javax.swing.JPanel mHeadPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mHorizontalRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mInnerColorButton;
    private javax.swing.JLabel mInnerColorLabel;
    private javax.swing.JLabel mIntervalLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mIntervalSpinner;
    private javax.swing.JLabel mLeftSpaceLabel;
    private javax.swing.JLabel mLengthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mLengthSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mLineColorButton;
    private javax.swing.JLabel mLineColorLabel;
    private javax.swing.JLabel mLineWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mLineWidthSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mLocationAnchoredCheckBox;
    private javax.swing.JLabel mLocationLabel;
    private javax.swing.JSeparator mLocationSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JPanel mPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    private javax.swing.JLabel mRightSpaceLabel;
    private javax.swing.JLabel mSizeLabel;
    private javax.swing.JSeparator mSizeSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mVerticalRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mXDateButton;
    private javax.swing.JPanel mXPanel;
    private javax.swing.JLabel mXValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mXValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mYDateButton;
    private javax.swing.JPanel mYPanel;
    private javax.swing.JLabel mYValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mYValueTextField;
    // End of variables declaration//GEN-END:variables

    private SGTwoAxesSelectionPanel mAxisPanel = new SGTwoAxesSelectionPanel();

    // a radio button to display "intermediate" selected state
    private JRadioButton mAdditionalDirectionRadioButton = new JRadioButton();

    protected SGComponentGroup mDateXComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateYComponentGroup = new SGComponentGroup();

    private boolean initProperty() {
    	
    	this.mHeadPanel.add(this.mAxisPanel);
    	this.mAxisPanel.addAxisSelectionListener(this);

        // set the title
        this.setTitle(SGAxisBreakDialog.TITLE);

        //
        // set the spinner model
        //

        // length
        this.mLengthSpinner.initProperties(new SpinnerNumberModel(0.50,
                AXIS_BREAK_LENGTH_MIN, AXIS_BREAK_LENGTH_MAX,
                AXIS_BREAK_LENGTH_STEP), AXIS_BREAK_LENGTH_UNIT,
                AXIS_BREAK_LENGTH_FRAC_DIFIT_MIN, AXIS_BREAK_LENGTH_FRAC_DIFIT_MAX);

        // interval
        this.mIntervalSpinner.initProperties(new SpinnerNumberModel(0.50,
                AXIS_BREAK_INTERVAL_MIN, AXIS_BREAK_INTERVAL_MAX,
                AXIS_BREAK_INTERVAL_STEP), AXIS_BREAK_INTERVAL_UNIT,
                AXIS_BREAK_INTERVAL_FRAC_DIFIT_MIN, AXIS_BREAK_INTERVAL_FRAC_DIFIT_MAX);

        // distortion
        this.mDistortionSpinner.initProperties(new SpinnerNumberModel(0.0,
                AXIS_BREAK_DISTORTION_MIN, AXIS_BREAK_DISTORTION_MAX,
                AXIS_BREAK_DISTORTION_STEP), null,
                AXIS_BREAK_DISTORTION_FRAC_DIFIT_MIN, AXIS_BREAK_DISTORTION_FRAC_DIFIT_MAX);

        // angle
        this.mAngleSpinner.initProperties(new SpinnerNumberModel(0.0,
                AXIS_BREAK_ANGLE_MIN, AXIS_BREAK_ANGLE_MAX,
                AXIS_BREAK_ANGLE_STEP), degree,
                AXIS_BREAK_ANGLE_FRAC_DIFIT_MIN, AXIS_BREAK_ANGLE_FRAC_DIFIT_MAX);

        // line width
        this.mLineWidthSpinner.initProperties(getLineWidthSpinnerNumberModel(),
                LINE_WIDTH_UNIT, LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);

        //
        // create a radio-button-group
        //
        {
            final ButtonGroup group = new ButtonGroup();
            group.add(this.mHorizontalRadioButton);
            group.add(this.mVerticalRadioButton);
            group.add(this.mAdditionalDirectionRadioButton);
        }

        // set the name
        this.mXValueTextField.setDescription("Location-> X");
        this.mYValueTextField.setDescription("Location-> Y");
        this.mLengthSpinner.setDescription("Size-> Length");
        this.mIntervalSpinner.setDescription("Size-> Interval");
        this.mDistortionSpinner.setDescription("Form-> Distortion");
        this.mAngleSpinner.setDescription("Form-> Angle");
        this.mLineWidthSpinner.setDescription("Form-> Line Width");

        // add an action event listener
        this.mHorizontalRadioButton.addActionListener(this);
        this.mVerticalRadioButton.addActionListener(this);
        this.mAxisPanel.addActionListener(this);
        this.mXDateButton.addActionListener(this);
        this.mYDateButton.addActionListener(this);

        SGComponentGroupElement[] dateXComponents = {
                new SGComponentGroupElement(this.mXDateButton) };
        SGComponentGroupElement[] dateYComponents = {
                new SGComponentGroupElement(this.mYDateButton) };
        this.mDateXComponentGroup.addElement(dateXComponents);
        this.mDateYComponentGroup.addElement(dateYComponents);

        // sets the calendar icon
        this.setCalendarIcon(this.mXDateButton);
        this.setCalendarIcon(this.mYDateButton);
        
        return true;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
    	super.actionPerformed(e);
    	Object source = e.getSource();
    	if (source.equals(this.mXDateButton)) {
    		this.onDateButtonPressed(this.mXValueTextField);
    	} else if (source.equals(this.mYDateButton)) {
    		this.onDateButtonPressed(this.mYValueTextField);
    	}
    }

    /**
     * 
     * @return
     */
    public Number getXValue() {
        return this.getNumber(this.mXValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getYValue() {
        return this.getNumber(this.mYValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getLength() {
        return this.mLengthSpinner.getNumber();
    }

    /**
     * 
     * @return
     */
    public Number getInterval() {
        return this.mIntervalSpinner.getNumber();
    }

    /**
     * 
     * @return
     */
    public Number getDistortion() {
        return this.mDistortionSpinner.getNumber();
    }

    /**
     * 
     * @return
     */
    public Number getAngle() {
        return this.mAngleSpinner.getNumber();
    }

    /**
     * 
     * @return
     */
    public Number getLineWidth() {
        return this.mLineWidthSpinner.getNumber();
    }

    /**
     * 
     * @return
     */
    public Boolean isHorizontal() {
        if (this.mAdditionalDirectionRadioButton.isSelected()) {
            return null;
        }
        return Boolean.valueOf(this.mHorizontalRadioButton.isSelected());
    }

    /**
     * 
     * @return
     */
    public Color getLineColor() {
        return this.mLineColorButton.getColor();
    }

    /**
     * 
     * @return
     */
    public Color getInnerColor() {
        return this.mInnerColorButton.getColor();
    }
    
    /**
     * 
     * @return
     */
    public Boolean getLocationAnchored() {
        return this.mLocationAnchoredCheckBox.getSelected();
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setXValue(final Object obj) {
        return this.setValue(this.mXValueTextField, obj);
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setYValue(final Object obj) {
        return this.setValue(this.mYValueTextField, obj);
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setLength(final Object obj) {
        return this.setValue(this.mLengthSpinner, obj);
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setInterval(final Object obj) {
        return this.setValue(this.mIntervalSpinner, obj);
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setDistortion(final Object obj) {
        return this.setValue(this.mDistortionSpinner, obj);
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setAngle(final Object obj) {
        return this.setValue(this.mAngleSpinner, obj);
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setLineWidth(final Object obj) {
        return this.setValue(this.mLineWidthSpinner, obj);
    }

    /**
     * 
     * @param flag
     * @return
     */
    public boolean setHorizontal(final boolean flag) {
        this.mHorizontalRadioButton.setSelected(flag);
        this.mVerticalRadioButton.setSelected(!flag);

        return true;
    }

    /**
     * 
     * @param c
     * @return
     */
    public boolean setLineColor(final Color c) {
        this.mLineColorButton.setColor(c);
        return true;
    }

    /**
     * 
     * @param c
     * @return
     */
    public boolean setInnerColor(final Color c) {
        this.mInnerColorButton.setColor(c);
        return true;
    }
    
    /**
     * 
     * @param b
     * @return
     */
    public boolean setAnchored(final Boolean b) {
        this.mLocationAnchoredCheckBox.setSelected(b);
        return true;
    }

    /**
     * 
     */
    public List getTextFieldComponentsList() {
        final List list = this.getFormattedTextFieldsListFromSpinners();
        list.addAll(this.getAxisNumberTextFieldList());
        return list;
    }

    /**
     * Returns a list of text fields to set number.
     * 
     * @return
     */
    public List getAxisNumberTextFieldList() {
        ArrayList list = new ArrayList();
        list.add(this.mXValueTextField);
        list.add(this.mYValueTextField);
        return list;
    }

    /**
     * 
     */
    public List getColorSelectionButtonsList() {
        ArrayList list = new ArrayList();
        list.add(this.mLineColorButton);
        list.add(this.mInnerColorButton);
        return list;
    }

    /**
     * 
     */
    public List getSpinnerList() {
        ArrayList list = new ArrayList();
        list.add(this.mLengthSpinner);
        list.add(this.mIntervalSpinner);
        list.add(this.mDistortionSpinner);
        list.add(this.mAngleSpinner);
        list.add(this.mLineWidthSpinner);
        return list;
    }

    /**
     * 
     * @return
     */
    public boolean setDialogProperty() {
        List<SGIPropertyDialogObserver> list = this.mPropertyDialogObserverList;
        
        // select axis panel
        selectAxisPanel(this, this.mAxisPanel, list);

        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, list);

        SGIAxisBreakDialogObserver abs0 = (SGIAxisBreakDialogObserver) list
                .get(0);

        final double xValue0 = abs0.getXValue();
        final double yValue0 = abs0.getYValue();
        final float length0 = abs0.getLength(cm);
        final float interval0 = abs0.getInterval(cm);
        final float distortion0 = abs0.getDistortion();
        final float angle0 = abs0.getAngle();
        final float lineWidth0 = abs0.getLineWidth(pt);
        final boolean horizontal0 = abs0.isForHorizontalAxis();
        final Color lineColor0 = abs0.getLineColor();
        final Color innerColor0 = abs0.getInnerColor();
        final boolean anchored0 = abs0.isAnchored();

        Double xValue = Double.valueOf(xValue0);
        Double yValue = Double.valueOf(yValue0);
        Float length = Float.valueOf(length0);
        Float interval = Float.valueOf(interval0);
        Float distortion = Float.valueOf(distortion0);
        Float angle = Float.valueOf(angle0);
        Float lineWidth = Float.valueOf(lineWidth0);
        Boolean horizontal = Boolean.valueOf(horizontal0);
        Color lineColor = lineColor0;
        Color innerColor = innerColor0;
        Boolean anchored = Boolean.valueOf(anchored0);

        if (list.size() > 1) {
            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final double xValue1 = abs1.getXValue();
                if (xValue0 != xValue1) {
                    xValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final double yValue1 = abs1.getYValue();
                if (yValue0 != yValue1) {
                    yValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final float length1 = abs1.getLength(cm);
                if (length0 != length1) {
                    length = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final float interval1 = abs1.getInterval(cm);
                if (interval0 != interval1) {
                    interval = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final float distortion1 = abs1.getDistortion();
                if (distortion0 != distortion1) {
                    distortion = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final float angle1 = abs1.getAngle();
                if (angle0 != angle1) {
                    angle = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final float lineWidth1 = abs1.getLineWidth(pt);
                if (lineWidth0 != lineWidth1) {
                    lineWidth = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final boolean horizontal1 = abs1.isForHorizontalAxis();
                if (horizontal0 != horizontal1) {
                    horizontal = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final Color lineColor1 = abs1.getLineColor();
                if (lineColor0.equals(lineColor1) == false) {
                    lineColor = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final Color innerColor1 = abs1.getInnerColor();
                if (innerColor0.equals(innerColor1) == false) {
                    innerColor = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIAxisBreakDialogObserver abs1 = (SGIAxisBreakDialogObserver) list
                        .get(ii);

                final boolean anchored1 = abs1.isAnchored();
                if (anchored0 != anchored1) {
                    anchored = null;
                    break;
                }
            }

        }

        //
        this.setXValue(xValue);
        this.setYValue(yValue);

        // if( length!=null )
        // {
        // length = Float.valueOf( length.floatValue()*CM_POINT_RATIO );
        // }
        this.setLength(length);

        // if( interval!=null )
        // {
        // interval = Float.valueOf( interval.floatValue()*CM_POINT_RATIO );
        // }
        this.setInterval(interval);

        this.setDistortion(distortion);

        if (angle != null) {
            angle = Float.valueOf(angle.floatValue());
        }
        this.setAngle(angle);

        this.setLineWidth(lineWidth);

        if (horizontal != null) {
            this.setHorizontal(horizontal.booleanValue());
        } else {
            this.mAdditionalDirectionRadioButton.setSelected(true);
        }

        this.setLineColor(lineColor);

        this.setInnerColor(innerColor);

        this.setAnchored(anchored);
//        this.setColorButtonBorder(true);

        return true;
    }

    /**
     * 
     */
    public boolean setPropertiesToObserver(SGIPropertyDialogObserver l) {

        SGIAxisBreakDialogObserver abs = (SGIAxisBreakDialogObserver) l;

        // get values
        final int xLocation = this.mAxisPanel.getXAxisLocation();
        final int yLocation = this.mAxisPanel.getYAxisLocation();
        final Number xValue = this.getXValue();
        final Number yValue = this.getYValue();
        final Number len = this.getLength();
        final Number interval = this.getInterval();
        final Number distortion = this.getDistortion();
        final Number angle = this.getAngle();
        final Number lineWidth = this.getLineWidth();
        final Boolean horizontal = this.isHorizontal();
        final Color lc = this.getLineColor();
        final Color ic = this.getInnerColor();
        final Boolean anchored = this.getLocationAnchored();

        // check values
        ArrayList<String> list = new ArrayList<String>();
        if (abs.hasValidXValue(xLocation, xValue) == false) {
            list.add("X");
        }
        if (abs.hasValidYValue(yLocation, yValue) == false) {
            list.add("Y");
        }
        if (list.size() != 0) {
        	StringBuffer sb = new StringBuffer();
        	sb.append(ERRMSG_AXIS_VALUE_INVALID);
        	sb.append(":\n");
            for (int ii = 0; ii < list.size(); ii++) {
                String str = (String) list.get(ii);
                sb.append("- ");
                sb.append(str);
                sb.append('\n');
            }
            this.setInputErrorMessage(sb.toString());
            return false;
        }

        // set the related axes
        if (xLocation != -1) {
            abs.setXAxisLocation(xLocation);
        }

        if (yLocation != -1) {
            abs.setYAxisLocation(yLocation);
        }

        // x value
        if (xValue != null) {
            abs.setXValue(xValue.doubleValue());
        }

        // y value
        if (yValue != null) {
            abs.setYValue(yValue.doubleValue());
        }

        // length
        if (len != null) {
            //			abs.setLength( len.floatValue()/SGIConstants.CM_POINT_RATIO );
            abs.setLength(len.floatValue(), cm);
        }

        // interval
        if (interval != null) {
            //			abs.setInterval( interval.floatValue()/SGIConstants.CM_POINT_RATIO );
            abs.setInterval(interval.floatValue(), cm);
        }

        // distortion
        if (distortion != null) {
            abs.setDistortion(distortion.floatValue());
        }

        // angle
        if (angle != null) {
            abs.setAngle(angle.floatValue());
        }

        // line width
        if (lineWidth != null) {
            //			abs.setLineWidth( lineWidth.floatValue() );
            abs.setLineWidth(lineWidth.floatValue(), pt);
        }

        // horizontal
        if (horizontal != null) {
            abs.setForHorizontalAxisFlag(horizontal.booleanValue());
        }

        // line color
        if (lc != null) {
            abs.setLineColor(lc);
        }

        // inner color
        if (ic != null) {
            abs.setInnerColor(ic);
        }

        // anchored
        if (anchored != null) {
            abs.setAnchored(anchored.booleanValue());
        }
        
        return true;
    }

    /**
     * Returns the OK button.
     * @return
     *        the OK button
     */
    protected JButton getOKButton() {
        return this.mOKButton;
    }
    
    /**
     * Returns the cancel button.
     * @return
     *        the cancel button
     */
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    /**
     * Returns the preview button.
     * @return
     *        the preview button
     */
    protected JButton getPreviewButton() {
        return this.mPreviewButton;
    }
    
    /**
     * Overrode this method to check the input values.
     * 
     * @return true if all input values are valid
     */
    protected boolean hasValidInputValues() {
        boolean valid = true;
        if (super.hasValidInputValues() == false) {
            valid = false;
        }
        if (this.hasValidNumber(this.mXValueTextField) == false) {
        	valid = false;
        }
        if (this.hasValidNumber(this.mYValueTextField) == false) {
        	valid = false;
        }
    	return valid;
    }

	@Override
	public void onXAxisDateSelected(boolean selected) {
		this.mDateXComponentGroup.setEnabled(selected);
	}

	@Override
	public void onYAxisDateSelected(boolean selected) {
		this.mDateYComponentGroup.setEnabled(selected);
	}

	@Override
	public void onAxisSelectionStateChanged(SGAxisSelectionPanel axisPanel) {
        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, 
        		this.mPropertyDialogObserverList);
	}
}
