package jp.riken.brain.ni.samuraigraph.application;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

import jp.riken.brain.ni.samuraigraph.application.SGIApplicationConstants.FILE_TYPE;
import jp.riken.brain.ni.samuraigraph.base.SGIConstants;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;
import jp.riken.brain.ni.samuraigraph.data.SGDataTypeConstants;

/**
 * A wizard dialog to select the data type.
 *
 */
public class SGDataTypeWizardDialog extends SGWizardDialog implements SGIApplicationTextConstants {

	private static final long serialVersionUID = 816214461842908836L;
	
    public static final String TITLE = "Select The Data Type";

	/** Creates new form SGDataTypeWizardDialog */
    public SGDataTypeWizardDialog(java.awt.Frame parent, final boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mPreviousButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPanel = new javax.swing.JPanel();
        mSXYPanel = new javax.swing.JPanel();
        mSXYButtonPanel = new javax.swing.JPanel();
        mMultipleLabel = new javax.swing.JLabel();
        mSingleLabel = new javax.swing.JLabel();
        mSingleButton = new javax.swing.JToggleButton();
        mMultipleButton = new javax.swing.JToggleButton();
        mSamplingPanel = new javax.swing.JPanel();
        mSamplingRateCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mSamplingRateField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mSamplingUnitLabel = new javax.swing.JLabel();
        mVXYPanel = new javax.swing.JPanel();
        mVXYButtonPanel = new javax.swing.JPanel();
        mOrthogonalLabel = new javax.swing.JLabel();
        mPolarLabel = new javax.swing.JLabel();
        mOrthogonalButton = new javax.swing.JToggleButton();
        mPolarButton = new javax.swing.JToggleButton();
        mSXYZPanel = new javax.swing.JPanel();
        mSXYZButtonPanel = new javax.swing.JPanel();
        mPseudocolorMapLabel = new javax.swing.JLabel();
        mPseudocolorMapButton = new javax.swing.JToggleButton();
        mDataNamePanel = new javax.swing.JPanel();
        mDataNameLabel = new javax.swing.JLabel();
        mDataNameTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPreviousButton.setText("<Prev");
        mPreviousButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mPreviousButton);

        mNextButton.setText("Next>");
        mNextButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mNextButton);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mPanel.setLayout(new java.awt.GridBagLayout());

        mSXYPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scalar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mSXYPanel.setFont(new java.awt.Font("Dialog", 0, 12));
        mSXYPanel.setLayout(new java.awt.GridBagLayout());

        mSXYButtonPanel.setLayout(new java.awt.GridBagLayout());

        mMultipleLabel.setText("Multiple");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        mSXYButtonPanel.add(mMultipleLabel, gridBagConstraints);

        mSingleLabel.setText("Single");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        mSXYButtonPanel.add(mSingleLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mSXYButtonPanel.add(mSingleButton, gridBagConstraints);
        mSXYButtonPanel.add(mMultipleButton, new java.awt.GridBagConstraints());

        mSXYPanel.add(mSXYButtonPanel, new java.awt.GridBagConstraints());

        mSamplingPanel.setLayout(new java.awt.GridBagLayout());

        mSamplingRateCheckBox.setText("Use Sampling Rate");
        mSamplingRateCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 10);
        mSamplingPanel.add(mSamplingRateCheckBox, gridBagConstraints);

        mSamplingRateField.setColumns(3);
        mSamplingRateField.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        mSamplingPanel.add(mSamplingRateField, gridBagConstraints);

        mSamplingUnitLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mSamplingUnitLabel.setText("Hz");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        mSamplingPanel.add(mSamplingUnitLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        mSXYPanel.add(mSamplingPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mPanel.add(mSXYPanel, gridBagConstraints);

        mVXYPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vector", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mVXYPanel.setLayout(new java.awt.GridBagLayout());

        mVXYButtonPanel.setLayout(new java.awt.GridBagLayout());

        mOrthogonalLabel.setText("Orthogonal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        mVXYButtonPanel.add(mOrthogonalLabel, gridBagConstraints);

        mPolarLabel.setText("Polar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        mVXYButtonPanel.add(mPolarLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mVXYButtonPanel.add(mOrthogonalButton, gridBagConstraints);
        mVXYButtonPanel.add(mPolarButton, new java.awt.GridBagConstraints());

        mVXYPanel.add(mVXYButtonPanel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mPanel.add(mVXYPanel, gridBagConstraints);

        mSXYZPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mSXYZPanel.setLayout(new java.awt.GridBagLayout());

        mSXYZButtonPanel.setLayout(new java.awt.GridBagLayout());

        mPseudocolorMapLabel.setText("Pseudocolor Map");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mSXYZButtonPanel.add(mPseudocolorMapLabel, gridBagConstraints);
        mSXYZButtonPanel.add(mPseudocolorMapButton, new java.awt.GridBagConstraints());

        mSXYZPanel.add(mSXYZButtonPanel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mPanel.add(mSXYZPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(mPanel, gridBagConstraints);

        mDataNamePanel.setLayout(new java.awt.GridBagLayout());

        mDataNameLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mDataNameLabel.setText("Data Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameLabel, gridBagConstraints);

        mDataNameTextField.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(mDataNamePanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    protected jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JLabel mDataNameLabel;
    private javax.swing.JPanel mDataNamePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mDataNameTextField;
    private javax.swing.JToggleButton mMultipleButton;
    private javax.swing.JLabel mMultipleLabel;
    protected jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    protected jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JToggleButton mOrthogonalButton;
    private javax.swing.JLabel mOrthogonalLabel;
    private javax.swing.JPanel mPanel;
    private javax.swing.JToggleButton mPolarButton;
    private javax.swing.JLabel mPolarLabel;
    protected jp.riken.brain.ni.samuraigraph.base.SGButton mPreviousButton;
    private javax.swing.JToggleButton mPseudocolorMapButton;
    private javax.swing.JLabel mPseudocolorMapLabel;
    private javax.swing.JPanel mSXYButtonPanel;
    private javax.swing.JPanel mSXYPanel;
    private javax.swing.JPanel mSXYZButtonPanel;
    private javax.swing.JPanel mSXYZPanel;
    private javax.swing.JPanel mSamplingPanel;
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mSamplingRateCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mSamplingRateField;
    private javax.swing.JLabel mSamplingUnitLabel;
    private javax.swing.JToggleButton mSingleButton;
    private javax.swing.JLabel mSingleLabel;
    private javax.swing.JPanel mVXYButtonPanel;
    private javax.swing.JPanel mVXYPanel;
    // End of variables declaration//GEN-END:variables
    
	private static final String[] TXT_DATA_TYPE_ARRAY = {
		SGDataTypeConstants.SXY_DATA,
		SGDataTypeConstants.SXY_DATA,
		SGDataTypeConstants.VXY_DATA,
		SGDataTypeConstants.VXY_DATA,
		SGDataTypeConstants.SXYZ_DATA };
	
	private static final String[] NETCDF_DATA_TYPE_ARRAY = {
		SGDataTypeConstants.SXY_NETCDF_DATA,
		SGDataTypeConstants.SXY_NETCDF_DATA,
		SGDataTypeConstants.VXY_NETCDF_DATA,
		SGDataTypeConstants.VXY_NETCDF_DATA,
		SGDataTypeConstants.SXYZ_NETCDF_DATA };
	
	private static final String[] HDF5_DATA_TYPE_ARRAY = { 
		SGDataTypeConstants.SXY_HDF5_DATA,
		SGDataTypeConstants.SXY_HDF5_DATA,
		SGDataTypeConstants.VXY_HDF5_DATA,
		SGDataTypeConstants.VXY_HDF5_DATA,
		SGDataTypeConstants.SXYZ_HDF5_DATA };
	
	private static final String[] MATLAB_DATA_TYPE_ARRAY = {
		SGDataTypeConstants.SXY_MATLAB_DATA,
		SGDataTypeConstants.SXY_MATLAB_DATA,
		SGDataTypeConstants.VXY_MATLAB_DATA,
		SGDataTypeConstants.VXY_MATLAB_DATA,
		SGDataTypeConstants.SXYZ_MATLAB_DATA };
	
	private static final String[] VIRTUAL_DATA_TYPE_ARRAY = {
		SGDataTypeConstants.SXY_VIRTUAL_MDARRAY_DATA,
		SGDataTypeConstants.SXY_VIRTUAL_MDARRAY_DATA,
		SGDataTypeConstants.VXY_VIRTUAL_MDARRAY_DATA,
		SGDataTypeConstants.VXY_VIRTUAL_MDARRAY_DATA,
		SGDataTypeConstants.SXYZ_VIRTUAL_MDARRAY_DATA };

    protected static final String SINGLE_XY_ICON_FILENAME = "SingleSXY.png";

    protected static final String MULTIPLE_XY_ICON_FILENAME = "MultipleSXY.png";

    protected static final String ORTHOGONAL_ICON_FILENAME = "OrthogonalVXY.png";

    protected static final String POLAR_ICON_FILENAME = "PolarVXY.png";

    protected static final String PSEUDOCOLOR_MAP_ICON_FILENAME = "PseudocolorMap.png";

    // array of filename of icons
    protected static final String[] ICON_FILENAME_ARRAY = {
            SINGLE_XY_ICON_FILENAME, MULTIPLE_XY_ICON_FILENAME,
            ORTHOGONAL_ICON_FILENAME, POLAR_ICON_FILENAME,
            PSEUDOCOLOR_MAP_ICON_FILENAME
    };

    public static final String SINGLE_SXY = "Single Scalar-XY";

    public static final String MULTIPLE_SXY = "Multiple Scalar-XY";

    public static final String ORTHOGONAL_VXY = "Orthogonal Vector-XY";

    public static final String POLAR_VXY = "Polar Vector-XY";

    public static final String PSEUDOCOLOR_MAP = "Pseudocolor Map";

    /**
     * The array of data type buttons.
     */
    private DataTypeButton[] mDataTypeButtonArray = null;
    
    // The type of data file.
    private FILE_TYPE mDataFileType = null;

    private boolean initProperty() {
    	
        // set the title
        this.setTitle(SGDataTypeWizardDialog.TITLE);

        // create icon array
        final String[] filenameArray = ICON_FILENAME_ARRAY;
        final int num = filenameArray.length;
        ImageIcon[] icons = new ImageIcon[num];
        for (int ii = 0; ii < num; ii++) {
            icons[ii] = SGUtility.createIcon(this, filenameArray[ii]);
        }

        // a map of file name and icon
        HashMap<String, ImageIcon> iconMap = new HashMap<String, ImageIcon>();
        for (int ii = 0; ii < num; ii++) {
            iconMap.put(filenameArray[ii], icons[ii]);
        }

        // set icons
        this.setupButton(this.mSingleButton, iconMap, SINGLE_XY_ICON_FILENAME, SINGLE_SXY);
        this.setupButton(this.mMultipleButton, iconMap, MULTIPLE_XY_ICON_FILENAME, MULTIPLE_SXY);
        this.setupButton(this.mOrthogonalButton, iconMap, ORTHOGONAL_ICON_FILENAME, ORTHOGONAL_VXY);
        this.setupButton(this.mPolarButton, iconMap, POLAR_ICON_FILENAME, POLAR_VXY);
        this.setupButton(this.mPseudocolorMapButton, iconMap, PSEUDOCOLOR_MAP_ICON_FILENAME, PSEUDOCOLOR_MAP);
        this.pack();

        // creates a button-group
        ButtonGroup group = new ButtonGroup();
        group.add(this.mSingleButton);
        group.add(this.mMultipleButton);
        group.add(this.mOrthogonalButton);
        group.add(this.mPolarButton);
        group.add(this.mPseudocolorMapButton);

        // initializes the components
        this.mSamplingRateField.setEnabled(false);
        this.mSamplingRateField.setText(Double.toString(1.0));
        this.mSingleButton.setSelected(true);
        this.mSingleButton.requestFocusInWindow();
        this.mDataNameTextField.setEditable(false);

        // adds an action lister
        this.mSingleButton.addActionListener(this);
        this.mMultipleButton.addActionListener(this);
        this.mOrthogonalButton.addActionListener(this);
        this.mPolarButton.addActionListener(this);
        this.mPseudocolorMapButton.addActionListener(this);
        this.mSamplingRateCheckBox.addActionListener(this);
        this.mSamplingRateField.addActionListener(this);

        return true;
    }
    
    /**
     * Sets the type of data file.
     * 
     * @param type
     *           the type of data file
     */
    public void setDataFileType(FILE_TYPE type) {
        // setup button array
        String[] dataTypes = null;
        switch(type) {
        case TXT_DATA:
        	dataTypes = TXT_DATA_TYPE_ARRAY;
        	break;
        case NETCDF_DATA:
        	dataTypes = NETCDF_DATA_TYPE_ARRAY;
        	break;
        case HDF5_DATA:
        	dataTypes = HDF5_DATA_TYPE_ARRAY;
        	break;
        case MATLAB_DATA:
        	dataTypes = MATLAB_DATA_TYPE_ARRAY;
        	break;
        case VIRTUAL_DATA:
        	dataTypes = VIRTUAL_DATA_TYPE_ARRAY;
        	break;
       	default:
       		throw new Error("Unsupported data file type: " + type);
        }
		String[] names = { SINGLE_SXY, MULTIPLE_SXY, ORTHOGONAL_VXY, POLAR_VXY,
				PSEUDOCOLOR_MAP };
		AbstractButton[] buttons = { this.mSingleButton, this.mMultipleButton,
				this.mOrthogonalButton, this.mPolarButton,
				this.mPseudocolorMapButton };
		this.mDataTypeButtonArray = new DataTypeButton[buttons.length];
		for (int ii = 0; ii < this.mDataTypeButtonArray.length; ii++) {
			this.mDataTypeButtonArray[ii] = new DataTypeButton(buttons[ii],
					dataTypes[ii], names[ii]);
		}

		// sets visible/invisible the components for the sampling rate
        final boolean samplingRateAvailable = (type == FILE_TYPE.TXT_DATA);
        this.mSamplingPanel.setVisible(samplingRateAvailable);
        
		this.pack();
		
		// sets to the attribute
		this.mDataFileType = type;
    }
    
    /**
     * Returns the type of data file.
     * 
     * @return the type of data file
     */
    public FILE_TYPE getDataFileType() {
    	return this.mDataFileType;
    }

	@Override
    protected JButton getPreviousButton() {
        return this.mPreviousButton;
    }

	@Override
    protected JButton getNextButton() {
        return this.mNextButton;
    }

	@Override
    protected JButton getOKButton() {
        return this.mOKButton;
    }

	@Override
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    /**
     * A class with data type and a radio button.
     */
    protected static class DataTypeButton {
        AbstractButton btn;
        String dataType;
        String name;
        DataTypeButton(AbstractButton btn, String dataType, String name) {
            super();
            this.btn = btn;
            this.dataType = dataType;
            this.name = name;
        }
    }

    /**
     * Returns the selected data type.
     */
    public String getSelectedDataType() {
        String str = null;
        for (int ii = 0; ii < this.mDataTypeButtonArray.length; ii++) {
            if (this.mDataTypeButtonArray[ii].btn.isSelected()) {
                str = this.mDataTypeButtonArray[ii].dataType;
                break;
            }
        }
        return str;
    }

    public String getSelected() {
        String str = null;
        for (int ii = 0; ii < this.mDataTypeButtonArray.length; ii++) {
            if (this.mDataTypeButtonArray[ii].btn.isSelected()) {
                str = this.mDataTypeButtonArray[ii].name;
                break;
            }
        }
        return str;
    }

    public boolean setSelected(String name) {
        for (int ii = 0; ii < this.mDataTypeButtonArray.length; ii++) {
            if (this.mDataTypeButtonArray[ii].name.equals(name)) {
            	this.mDataTypeButtonArray[ii].btn.setSelected(true);
                return true;
            }
        }
        return false;
    }

    /**
     * A list of available data types.
     */
    private List<String> mAvailableDataTypeList = new ArrayList<String>();

    /**
     * Set available data types.
     *
     * @param avList
     *             a list of available data types.
     * @return
     *             true if succeeded
     */
    public boolean setAvailableDataType(final List<String> avList) {

        // check input values
        if (avList == null) {
            return false;
        }

        // clear attributes
        this.mAvailableDataTypeList.clear();

        // set available buttons
        for (int ii = 0; ii < this.mDataTypeButtonArray.length; ii++) {
            DataTypeButton db = this.mDataTypeButtonArray[ii];
            final boolean available = avList.contains(db.dataType);
            db.btn.setEnabled(available);
        }

        // avoid the selection of unavailable buttons
        for (int ii = 0; ii < this.mDataTypeButtonArray.length; ii++) {
            DataTypeButton db = this.mDataTypeButtonArray[ii];
            if (avList.contains(db.dataType)) {
                db.btn.setSelected(true);
                break;
            }
        }

        // set to attribute
        this.mAvailableDataTypeList.addAll(avList);

        return true;
    }
    
    public void setAllDataTypeButtonsEnabled(final boolean enabled) {
        for (int ii = 0; ii < this.mDataTypeButtonArray.length; ii++) {
            DataTypeButton db = this.mDataTypeButtonArray[ii];
            db.btn.setEnabled(enabled);
        }
    }

    /**
     * Returns the data type for a given radio button.
     * @param btn
     *            a radio button
     * @return
     *            the data type.
     */
    public String getDataType(JRadioButton btn) {
        String str = null;
        for (int ii = 0; ii < this.mDataTypeButtonArray.length; ii++) {
            if (this.mDataTypeButtonArray[ii].btn.equals(btn)) {
                str = this.mDataTypeButtonArray[ii].dataType;
                break;
            }
        }
        return str;
    }

    /**
     * Returns the button for a given data type.
     *
     * @param dataTypes
     *           the data type
     * @return the button for a given data type
     */
    public AbstractButton getButton(String dataType) {
        AbstractButton btn = null;
        for (int ii = 0; ii < this.mDataTypeButtonArray.length; ii++) {
            if (this.mDataTypeButtonArray[ii].dataType.equals(dataType)) {
                btn = this.mDataTypeButtonArray[ii].btn;
                break;
            }
        }
        return btn;
    }

    /**
     * Returns whether polar mode is selected.
     *
     * @return true if polar mode is selected
     */
    public boolean isPolarSelected() {
        return this.mPolarButton.isSelected();
    }

    /**
     * Overrode to set availability of the text field.
     */
    @Override
    public void setVisible(final boolean b) {
        this.updateComponents();
        super.setVisible(b);
    }

    /**
     * Update the components.
     *
     */
	protected void updateComponents() {
		final boolean samplingEnabled = this.mSingleButton.isSelected()
				|| this.mMultipleButton.isSelected();
		this.mSamplingRateCheckBox.setEnabled(samplingEnabled);
		this.mSamplingRateField.setEnabled(samplingEnabled
				&& this.mSamplingRateCheckBox.isSelected());
	}

    /**
	 * Returns whether the radio button for multiple data is selected.
	 *
	 * @return true if the radio button for multiple data is selected, false not selected and null if the radio button is disabled
	 */
    public Boolean isMultipleSelected() {
        AbstractButton btn = this.mMultipleButton;
        if (btn.isEnabled()) {
            return Boolean.valueOf(btn.isSelected());
        } else {
            return null;
        }
    }

    protected void setupButton(AbstractButton btn, Map<String, ImageIcon> iconMap, String iconFileName, 
    		String name) {
        btn.setIcon(iconMap.get(iconFileName));
        btn.setToolTipText(name);
    }
    
    public void setDataName(String name) {
    	SGApplicationUtility.setDataName(this.mDataNameTextField, this.mDataNamePanel, name);
    }
    
    public String getDataName() {
    	return this.mDataNameTextField.getText();
    }

    /**
     * Returns the sampling rate.
     *
     * @return Sampling rate. If input value is illegal, returns null.
     */
    public Double getSamplingRate() {
    	if (this.mSamplingRateCheckBox.isSelected() == false) {
    		return null;
    	}
        String str = this.mSamplingRateField.getText();
        return SGUtilityText.getDouble(str);
    }

    /**
     * Overrode to check validity of the input value.
     */
    protected boolean onOK() {

        // check the sampling rate
    	if (this.mSamplingRateCheckBox.isSelected()) {
            boolean ok = true;
            final Double d = this.getSamplingRate();
            if (d == null) {
                ok = false;
            } else {
                final double rate = d.doubleValue();
                if (rate <= 0.0) {
                    ok = false;
                }
            }
            if (!ok) {
                SGUtility.showMessageDialog(this, MSG_INVALID_INPUT_VALUE,
                        SGIConstants.TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }

        return super.onOK();
    }

    /**
     * Overrode to set availability of the text field.
     */
    @Override
    public void actionPerformed(final ActionEvent e) {

        this.updateComponents();

        Object source = e.getSource();
        if (source.equals(this.mSamplingRateField)) {
            this.onOK();
            return;
        }

        // calls the method of the super class
        super.actionPerformed(e);
    }

    /**
     * Sets the selection state of the check box for availability of sampling rate.
     * 
     * @param b
     *            true to set enabled the sampling rate
     */
    public void setSamplingRateSelected(final boolean b) {
    	this.mSamplingRateCheckBox.setSelected(b);
    }

}
