package jp.riken.brain.ni.samuraigraph.application;

import javax.swing.ButtonGroup;
import javax.swing.JButton;

import jp.riken.brain.ni.samuraigraph.application.SGIApplicationConstants.FILE_TYPE;

/**
 * The wizard dialog to select the file type.
 * 
 */
public class SGFileTypeSelectionWizardDialog extends SGWizardDialog {

	private static final long serialVersionUID = -8284628961320721100L;
	
	public static final String TITLE = "Select File Type";

	/** Creates new form SGFileTypeSelectionWizardDialog */
    public SGFileTypeSelectionWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mPreviousButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPanel = new javax.swing.JPanel();
        mHDF5RadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mNetCDFRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mOpenFileLabel = new javax.swing.JLabel();
        mDataNamePanel = new javax.swing.JPanel();
        mDataNameLabel = new javax.swing.JLabel();
        mDataNameTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPreviousButton.setText("<Prev");
        mPreviousButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mPreviousButton);

        mNextButton.setText("Next>");
        mNextButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mNextButton);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mPanel.setLayout(new java.awt.GridBagLayout());

        mHDF5RadioButton.setText("HDF5");
        mHDF5RadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mPanel.add(mHDF5RadioButton, gridBagConstraints);

        mNetCDFRadioButton.setText("NetCDF");
        mNetCDFRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mPanel.add(mNetCDFRadioButton, gridBagConstraints);

        mOpenFileLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mOpenFileLabel.setText("Open file as...");
        mOpenFileLabel.setPreferredSize(new java.awt.Dimension(180, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        mPanel.add(mOpenFileLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 10);
        getContentPane().add(mPanel, gridBagConstraints);

        mDataNamePanel.setLayout(new java.awt.GridBagLayout());

        mDataNameLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mDataNameLabel.setText("Data Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameLabel, gridBagConstraints);

        mDataNameTextField.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(mDataNamePanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JLabel mDataNameLabel;
    private javax.swing.JPanel mDataNamePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mDataNameTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mHDF5RadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mNetCDFRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JLabel mOpenFileLabel;
    private javax.swing.JPanel mPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviousButton;
    // End of variables declaration//GEN-END:variables

    private void initProperty() {
    	// sets the title
    	this.setTitle(TITLE);
    	
    	// sets the button group
    	ButtonGroup bg = new ButtonGroup();
    	bg.add(this.mHDF5RadioButton);
    	bg.add(this.mNetCDFRadioButton);
    	this.mHDF5RadioButton.setSelected(true);
    	
    	this.mDataNameTextField.setEditable(false);
    	this.mOKButton.setVisible(false);
    	this.pack();
    }
    
    @Override
	protected JButton getPreviousButton() {
		return this.mPreviousButton;
	}

	@Override
	protected JButton getNextButton() {
		return this.mNextButton;
	}

	@Override
	protected JButton getOKButton() {
		return this.mOKButton;
	}

	@Override
	protected JButton getCancelButton() {
		return this.mCancelButton;
	}

	/**
	 * Selects the file type.
	 * 
	 * @param fileType
	 *           the file type to select
	 */
	public void setSelectedFileType(FILE_TYPE fileType) {
		if (FILE_TYPE.HDF5_DATA.equals(fileType)) {
			this.mHDF5RadioButton.setSelected(true);
		} else if (FILE_TYPE.NETCDF_DATA.equals(fileType)) {
			this.mNetCDFRadioButton.setSelected(true);
		} else {
			throw new IllegalArgumentException("Unsupported file type: " + fileType);
		}
	}
	
	/**
	 * Returns selected file type.
	 * 
	 * @return selected file type
	 */
	public FILE_TYPE getSelectedFileType() {
		if (this.mHDF5RadioButton.isSelected()) {
			return FILE_TYPE.HDF5_DATA;
		} else if (this.mNetCDFRadioButton.isSelected()) {
			return FILE_TYPE.NETCDF_DATA;
		} else {
			// This must not happen.
			throw new Error("This must not happen.");
		}
	}
	
    public void setDataName(String name) {
    	SGApplicationUtility.setDataName(this.mDataNameTextField, this.mDataNamePanel, name);
    }
    
    public String getDataName() {
    	return this.mDataNameTextField.getText();
    }
}
