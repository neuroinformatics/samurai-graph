package jp.riken.brain.ni.samuraigraph.figure.java2d;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;

import jp.riken.brain.ni.samuraigraph.base.SGAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGITwoAxesDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyDialog;
import jp.riken.brain.ni.samuraigraph.base.SGSpinner;
import jp.riken.brain.ni.samuraigraph.base.SGTextField;
import jp.riken.brain.ni.samuraigraph.base.SGTwoAxesSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;
import jp.riken.brain.ni.samuraigraph.figure.SGIScaleConstants;

/**
 * The dialog for axis scale symbol.
 * 
 */
public class SGAxisScaleDialog extends SGPropertyDialog implements
		SGIScaleConstants, SGITwoAxesDialog {

	private static final long serialVersionUID = 7559721912628401885L;
	
	/**
     * The title of this dialog.
     */
    public static final String TITLE = "Axis Scale Properties";

    /**
     * Creates new form SGAxisScaleDialog
     */
    public SGAxisScaleDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.initialize();
    	this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mAxisLengthModeLabel = new javax.swing.JLabel();
        mAxisLengthModeSeparator = new javax.swing.JSeparator();
        mAxisLengthModeComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPanel = new javax.swing.JPanel();
        mFormLabel = new javax.swing.JLabel();
        mFormSeparator = new javax.swing.JSeparator();
        mLeftSpaceLabel = new javax.swing.JLabel();
        mRightSpaceLabel = new javax.swing.JLabel();
        mFormPanel = new javax.swing.JPanel();
        mSpaceLabel = new javax.swing.JLabel();
        mSpaceSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mLineWidthLabel = new javax.swing.JLabel();
        mLineWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mLineColorLabel = new javax.swing.JLabel();
        mLineColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mStringPanel = new javax.swing.JPanel();
        mTextPanel = new javax.swing.JPanel();
        mFontPanel = new javax.swing.JPanel();
        mFontStyleLabel = new javax.swing.JLabel();
        mFontStyleComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mFontSizeLabel = new javax.swing.JLabel();
        mFontSizeSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mFontNameLabel = new javax.swing.JLabel();
        mFontNameComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mFontAngleLabel = new javax.swing.JLabel();
        mFontAngleSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mFontColorLabel = new javax.swing.JLabel();
        mFontColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mStringLabel = new javax.swing.JLabel();
        mStringSeparator = new javax.swing.JSeparator();
        mVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mXAxisLabel = new javax.swing.JLabel();
        mXAxisSeparator = new javax.swing.JSeparator();
        mYAxisLabel = new javax.swing.JLabel();
        mYAxisSeparator = new javax.swing.JSeparator();
        mXAxisPanel = new javax.swing.JPanel();
        mXAxisSecondPanel = new javax.swing.JPanel();
        mXAxisTextLabel = new javax.swing.JLabel();
        mXAxisTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mXAxisUnitLabel = new javax.swing.JLabel();
        mXAxisUnitTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mXAxisFirstPanel = new javax.swing.JPanel();
        mXLengthLabel = new javax.swing.JLabel();
        mXAxisVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mXLengthValuePanel = new javax.swing.JPanel();
        mXLengthValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mXLengthValueDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mXAxisUpsideRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mXAxisDownsideRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mXAxisThirdPanel = new javax.swing.JPanel();
        mYAxisPanel = new javax.swing.JPanel();
        mYAxisSecondPanel = new javax.swing.JPanel();
        mYAxisTextLabel = new javax.swing.JLabel();
        mYAxisTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mYAxisUnitLabel = new javax.swing.JLabel();
        mYAxisUnitTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mYAxisFirstPanel = new javax.swing.JPanel();
        mYLengthLabel = new javax.swing.JLabel();
        mYAxisVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mYLengthValuePanel = new javax.swing.JPanel();
        mYLengthValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mYLengthValueDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mYAxisLeftsideRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mYAxisRightsideRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mYAxisThirdPanel = new javax.swing.JPanel();
        mLocationAxisLengthModePanel = new javax.swing.JPanel();
        mLocationLabel = new javax.swing.JLabel();
        mLocationSeparator = new javax.swing.JSeparator();
        mLocationPanel = new javax.swing.JPanel();
        mYValuePanel = new javax.swing.JPanel();
        mYValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mYValueDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mXValuePanel = new javax.swing.JPanel();
        mXValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mXValueDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mXValueLabel = new javax.swing.JLabel();
        mYValueLabel = new javax.swing.JLabel();
        mHeadPanel = new javax.swing.JPanel();

        mAxisLengthModeLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mAxisLengthModeLabel.setText("Axis Length");

        mAxisLengthModeComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mAxisLengthModeComboBox.setPreferredSize(new java.awt.Dimension(100, 24));

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mPanel.setLayout(new java.awt.GridBagLayout());

        mFormLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mFormLabel.setText("Form");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mFormLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 45, 5, 5);
        mPanel.add(mFormSeparator, gridBagConstraints);

        mLeftSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mPanel.add(mLeftSpaceLabel, gridBagConstraints);

        mRightSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        mPanel.add(mRightSpaceLabel, gridBagConstraints);

        mFormPanel.setLayout(new java.awt.GridBagLayout());

        mSpaceLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSpaceLabel.setText("Space");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 2);
        mFormPanel.add(mSpaceLabel, gridBagConstraints);

        mSpaceSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSpaceSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mFormPanel.add(mSpaceSpinner, gridBagConstraints);

        mLineWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineWidthLabel.setText("Line Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        mFormPanel.add(mLineWidthLabel, gridBagConstraints);

        mLineWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineWidthSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mFormPanel.add(mLineWidthSpinner, gridBagConstraints);

        mLineColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineColorLabel.setText("Line Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 2);
        mFormPanel.add(mLineColorLabel, gridBagConstraints);

        mLineColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mFormPanel.add(mLineColorButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        mPanel.add(mFormPanel, gridBagConstraints);

        mStringPanel.setLayout(new java.awt.GridBagLayout());

        mTextPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        mStringPanel.add(mTextPanel, gridBagConstraints);

        mFontPanel.setLayout(new java.awt.GridBagLayout());

        mFontStyleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontStyleLabel.setText("Style");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mFontPanel.add(mFontStyleLabel, gridBagConstraints);

        mFontStyleComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mFontPanel.add(mFontStyleComboBox, gridBagConstraints);

        mFontSizeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontSizeLabel.setText("Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 2);
        mFontPanel.add(mFontSizeLabel, gridBagConstraints);

        mFontSizeSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontSizeSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mFontPanel.add(mFontSizeSpinner, gridBagConstraints);

        mFontNameLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontNameLabel.setText("Family");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        mFontPanel.add(mFontNameLabel, gridBagConstraints);

        mFontNameComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        mFontPanel.add(mFontNameComboBox, gridBagConstraints);

        mFontAngleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontAngleLabel.setText("Angle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 2);
        mFontPanel.add(mFontAngleLabel, gridBagConstraints);

        mFontAngleSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontAngleSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mFontPanel.add(mFontAngleSpinner, gridBagConstraints);

        mFontColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 2);
        mFontPanel.add(mFontColorLabel, gridBagConstraints);

        mFontColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mFontPanel.add(mFontColorButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        mStringPanel.add(mFontPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 10, 0);
        mPanel.add(mStringPanel, gridBagConstraints);

        mStringLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mStringLabel.setText("String");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mStringLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 50, 5, 5);
        mPanel.add(mStringSeparator, gridBagConstraints);

        mVisibleCheckBox.setText("Visible");
        mVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        mPanel.add(mVisibleCheckBox, gridBagConstraints);

        mXAxisLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mXAxisLabel.setText("X Axis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mXAxisLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 50, 5, 5);
        mPanel.add(mXAxisSeparator, gridBagConstraints);

        mYAxisLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mYAxisLabel.setText("Y Axis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mYAxisLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 50, 5, 5);
        mPanel.add(mYAxisSeparator, gridBagConstraints);

        mXAxisPanel.setLayout(new java.awt.GridBagLayout());

        mXAxisSecondPanel.setLayout(new java.awt.GridBagLayout());

        mXAxisTextLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mXAxisTextLabel.setText("Text");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mXAxisSecondPanel.add(mXAxisTextLabel, gridBagConstraints);

        mXAxisTextField.setColumns(4);
        mXAxisTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 88;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mXAxisSecondPanel.add(mXAxisTextField, gridBagConstraints);

        mXAxisUnitLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mXAxisUnitLabel.setText("Unit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        mXAxisSecondPanel.add(mXAxisUnitLabel, gridBagConstraints);

        mXAxisUnitTextField.setColumns(3);
        mXAxisUnitTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 88;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mXAxisSecondPanel.add(mXAxisUnitTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mXAxisPanel.add(mXAxisSecondPanel, gridBagConstraints);

        mXAxisFirstPanel.setLayout(new java.awt.GridBagLayout());

        mXLengthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mXLengthLabel.setText("Length");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 4);
        mXAxisFirstPanel.add(mXLengthLabel, gridBagConstraints);

        mXAxisVisibleCheckBox.setText("Visible");
        mXAxisVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mXAxisFirstPanel.add(mXAxisVisibleCheckBox, gridBagConstraints);

        mXLengthValuePanel.setLayout(new java.awt.GridBagLayout());

        mXLengthValueTextField.setColumns(6);
        mXLengthValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXLengthValuePanel.add(mXLengthValueTextField, gridBagConstraints);

        mXLengthValueDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXLengthValuePanel.add(mXLengthValueDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        mXAxisFirstPanel.add(mXLengthValuePanel, gridBagConstraints);

        mXAxisUpsideRadioButton.setText("Upside");
        mXAxisUpsideRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXAxisFirstPanel.add(mXAxisUpsideRadioButton, gridBagConstraints);

        mXAxisDownsideRadioButton.setText("Downside");
        mXAxisDownsideRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        mXAxisFirstPanel.add(mXAxisDownsideRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXAxisPanel.add(mXAxisFirstPanel, gridBagConstraints);

        mXAxisThirdPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXAxisPanel.add(mXAxisThirdPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        mPanel.add(mXAxisPanel, gridBagConstraints);

        mYAxisPanel.setLayout(new java.awt.GridBagLayout());

        mYAxisSecondPanel.setLayout(new java.awt.GridBagLayout());

        mYAxisTextLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYAxisTextLabel.setText("Text");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mYAxisSecondPanel.add(mYAxisTextLabel, gridBagConstraints);

        mYAxisTextField.setColumns(4);
        mYAxisTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 88;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mYAxisSecondPanel.add(mYAxisTextField, gridBagConstraints);

        mYAxisUnitLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYAxisUnitLabel.setText("Unit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        mYAxisSecondPanel.add(mYAxisUnitLabel, gridBagConstraints);

        mYAxisUnitTextField.setColumns(3);
        mYAxisUnitTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 88;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mYAxisSecondPanel.add(mYAxisUnitTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mYAxisPanel.add(mYAxisSecondPanel, gridBagConstraints);

        mYAxisFirstPanel.setLayout(new java.awt.GridBagLayout());

        mYLengthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYLengthLabel.setText("Length");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 4);
        mYAxisFirstPanel.add(mYLengthLabel, gridBagConstraints);

        mYAxisVisibleCheckBox.setText("Visible");
        mYAxisVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mYAxisFirstPanel.add(mYAxisVisibleCheckBox, gridBagConstraints);

        mYLengthValuePanel.setLayout(new java.awt.GridBagLayout());

        mYLengthValueTextField.setColumns(6);
        mYLengthValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYLengthValuePanel.add(mYLengthValueTextField, gridBagConstraints);

        mYLengthValueDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYLengthValuePanel.add(mYLengthValueDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        mYAxisFirstPanel.add(mYLengthValuePanel, gridBagConstraints);

        mYAxisLeftsideRadioButton.setText("Leftside");
        mYAxisLeftsideRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        mYAxisFirstPanel.add(mYAxisLeftsideRadioButton, gridBagConstraints);

        mYAxisRightsideRadioButton.setText("Rightside");
        mYAxisRightsideRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYAxisFirstPanel.add(mYAxisRightsideRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYAxisPanel.add(mYAxisFirstPanel, gridBagConstraints);

        mYAxisThirdPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYAxisPanel.add(mYAxisThirdPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        mPanel.add(mYAxisPanel, gridBagConstraints);

        mLocationAxisLengthModePanel.setLayout(new java.awt.GridBagLayout());

        mLocationLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mLocationLabel.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLocationAxisLengthModePanel.add(mLocationLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 65, 5, 5);
        mLocationAxisLengthModePanel.add(mLocationSeparator, gridBagConstraints);

        mLocationPanel.setLayout(new java.awt.GridBagLayout());

        mYValuePanel.setLayout(new java.awt.GridBagLayout());

        mYValueTextField.setColumns(6);
        mYValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYValuePanel.add(mYValueTextField, gridBagConstraints);

        mYValueDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYValuePanel.add(mYValueDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        mLocationPanel.add(mYValuePanel, gridBagConstraints);

        mXValuePanel.setLayout(new java.awt.GridBagLayout());

        mXValueTextField.setColumns(6);
        mXValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXValuePanel.add(mXValueTextField, gridBagConstraints);

        mXValueDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXValuePanel.add(mXValueDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        mLocationPanel.add(mXValuePanel, gridBagConstraints);

        mXValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mXValueLabel.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        mLocationPanel.add(mXValueLabel, gridBagConstraints);

        mYValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYValueLabel.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        mLocationPanel.add(mYValueLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        mLocationAxisLengthModePanel.add(mLocationPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mPanel.add(mLocationAxisLengthModePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        getContentPane().add(mPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(mHeadPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mAxisLengthModeComboBox;
    private javax.swing.JLabel mAxisLengthModeLabel;
    private javax.swing.JSeparator mAxisLengthModeSeparator;
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JLabel mFontAngleLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mFontAngleSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mFontColorButton;
    private javax.swing.JLabel mFontColorLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mFontNameComboBox;
    private javax.swing.JLabel mFontNameLabel;
    private javax.swing.JPanel mFontPanel;
    private javax.swing.JLabel mFontSizeLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mFontSizeSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mFontStyleComboBox;
    private javax.swing.JLabel mFontStyleLabel;
    private javax.swing.JLabel mFormLabel;
    private javax.swing.JPanel mFormPanel;
    private javax.swing.JSeparator mFormSeparator;
    private javax.swing.JPanel mHeadPanel;
    private javax.swing.JLabel mLeftSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mLineColorButton;
    private javax.swing.JLabel mLineColorLabel;
    private javax.swing.JLabel mLineWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mLineWidthSpinner;
    private javax.swing.JPanel mLocationAxisLengthModePanel;
    private javax.swing.JLabel mLocationLabel;
    private javax.swing.JPanel mLocationPanel;
    private javax.swing.JSeparator mLocationSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JPanel mPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    private javax.swing.JLabel mRightSpaceLabel;
    private javax.swing.JLabel mSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mSpaceSpinner;
    private javax.swing.JLabel mStringLabel;
    private javax.swing.JPanel mStringPanel;
    private javax.swing.JSeparator mStringSeparator;
    private javax.swing.JPanel mTextPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mVisibleCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mXAxisDownsideRadioButton;
    private javax.swing.JPanel mXAxisFirstPanel;
    private javax.swing.JLabel mXAxisLabel;
    private javax.swing.JPanel mXAxisPanel;
    private javax.swing.JPanel mXAxisSecondPanel;
    private javax.swing.JSeparator mXAxisSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mXAxisTextField;
    private javax.swing.JLabel mXAxisTextLabel;
    private javax.swing.JPanel mXAxisThirdPanel;
    private javax.swing.JLabel mXAxisUnitLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mXAxisUnitTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mXAxisUpsideRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mXAxisVisibleCheckBox;
    private javax.swing.JLabel mXLengthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mXLengthValueDateButton;
    private javax.swing.JPanel mXLengthValuePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mXLengthValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mXValueDateButton;
    private javax.swing.JLabel mXValueLabel;
    private javax.swing.JPanel mXValuePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mXValueTextField;
    private javax.swing.JPanel mYAxisFirstPanel;
    private javax.swing.JLabel mYAxisLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mYAxisLeftsideRadioButton;
    private javax.swing.JPanel mYAxisPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mYAxisRightsideRadioButton;
    private javax.swing.JPanel mYAxisSecondPanel;
    private javax.swing.JSeparator mYAxisSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mYAxisTextField;
    private javax.swing.JLabel mYAxisTextLabel;
    private javax.swing.JPanel mYAxisThirdPanel;
    private javax.swing.JLabel mYAxisUnitLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mYAxisUnitTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mYAxisVisibleCheckBox;
    private javax.swing.JLabel mYLengthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mYLengthValueDateButton;
    private javax.swing.JPanel mYLengthValuePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mYLengthValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mYValueDateButton;
    private javax.swing.JLabel mYValueLabel;
    private javax.swing.JPanel mYValuePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mYValueTextField;
    // End of variables declaration//GEN-END:variables

    private SGTwoAxesSelectionPanel mAxisPanel = new SGTwoAxesSelectionPanel();

    protected SGComponentGroup mDateXComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateYComponentGroup = new SGComponentGroup();

    private void initProperty() {
    	this.mHeadPanel.add(this.mAxisPanel);
    	this.mAxisPanel.addAxisSelectionListener(this);

        // set the title
    	this.setTitle(TITLE);

        // set up the combo boxes
        this.initFontFamilyNameComboBox(this.mFontNameComboBox);
        this.initFontStyleComboBox(this.mFontStyleComboBox);
        final String[] axisChangeModeArray = { AXIS_LENGTH_MODE_FIXED,
        		AXIS_LENGTH_MODE_VALUE_FIXED, AXIS_LENGTH_MODE_ADAPTIVE };
        for (String mode : axisChangeModeArray) {
            this.mAxisLengthModeComboBox.addItem(mode);
        }
        
        // set up button groups
        ButtonGroup xAxisButtonGroup = new ButtonGroup();
        xAxisButtonGroup.add(this.mXAxisDownsideRadioButton);
        xAxisButtonGroup.add(this.mXAxisUpsideRadioButton);
        xAxisButtonGroup.add(this.mXAxisDummyRadioButton);
        
        ButtonGroup yAxisButtonGroup = new ButtonGroup();
        yAxisButtonGroup.add(this.mYAxisLeftsideRadioButton);
        yAxisButtonGroup.add(this.mYAxisRightsideRadioButton);
        yAxisButtonGroup.add(this.mYAxisDummyRadioButton);

        //
        // set up the spinners
        //
        
        // space
        this.mSpaceSpinner.initProperties(new SpinnerNumberModel(0.1,
                SCALE_SPACE_MIN, SCALE_SPACE_MAX, SCALE_SPACE_STEP),
                SCALE_SPACE_UNIT, SCALE_SPACE_FRAC_DIFIT_MIN, SCALE_SPACE_FRAC_DIFIT_MAX);

        // line width
        this.mLineWidthSpinner.initProperties(getLineWidthSpinnerNumberModel(),
                FONT_SIZE_UNIT, LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);

        // font size
        this.mFontSizeSpinner.initProperties(getFontSizeSpinnerNumberModel(),
                FONT_SIZE_UNIT, FONT_SIZE_FRAC_DIGIT_MIN, FONT_SIZE_FRAC_DIGIT_MAX);

        // angle
        this.mFontAngleSpinner.initProperties(new SpinnerNumberModel(0.0,
        		STRING_ANGLE_MIN, STRING_ANGLE_MAX, STRING_ANGLE_STEP), degree,
        		STRING_ANGLE_FRAC_DIFIT_MIN, STRING_ANGLE_FRAC_DIFIT_MAX);

        // set the name
        this.mXValueTextField.setDescription("Location-> X");
        this.mYValueTextField.setDescription("Location-> Y");
        this.mXLengthValueTextField.setDescription("X Axis-> Length");
        this.mXAxisTextField.setDescription("X Axis-> Text");
        this.mXAxisUnitTextField.setDescription("X Axis-> Unit");
        this.mYLengthValueTextField.setDescription("Y Axis-> Length");
        this.mYAxisTextField.setDescription("Y Axis-> Text");
        this.mYAxisUnitTextField.setDescription("Y Axis-> Unit");
        this.mLineWidthSpinner.setDescription("Form-> LineWidth");
        this.mSpaceSpinner.setDescription("Form-> Space");
        this.mFontSizeSpinner.setDescription("String-> Size");
        this.mFontAngleSpinner.setDescription("String-> Angle");

        // add an action event listener
        this.mAxisPanel.addActionListener(this);
        this.mVisibleCheckBox.addActionListener(this);
        this.mFontNameComboBox.addActionListener(this);
        this.mFontStyleComboBox.addActionListener(this);
        this.mXValueDateButton.addActionListener(this);
        this.mYValueDateButton.addActionListener(this);
        this.mXLengthValueDateButton.addActionListener(this);
        this.mYLengthValueDateButton.addActionListener(this);
        this.mXAxisVisibleCheckBox.addActionListener(this);
        this.mYAxisVisibleCheckBox.addActionListener(this);
        this.mXAxisDownsideRadioButton.addActionListener(this);
        this.mXAxisUpsideRadioButton.addActionListener(this);
        this.mYAxisLeftsideRadioButton.addActionListener(this);
        this.mYAxisRightsideRadioButton.addActionListener(this);
        this.mXAxisTextField.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void insertUpdate(DocumentEvent e) {
				setEnabledXAxisUnitField(e);
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				setEnabledXAxisUnitField(e);
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				setEnabledXAxisUnitField(e);
			}
			
        });
        this.mYAxisTextField.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void insertUpdate(DocumentEvent e) {
				setEnabledYAxisUnitField(e);
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				setEnabledYAxisUnitField(e);
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				setEnabledYAxisUnitField(e);
			}
        	
        });

        SGComponentGroupElement[] dateXComponents = {
                new SGComponentGroupElement(this.mXValueDateButton),
                new SGComponentGroupElement(this.mXLengthValueDateButton) };
        SGComponentGroupElement[] dateYComponents = {
                new SGComponentGroupElement(this.mYValueDateButton),
                new SGComponentGroupElement(this.mYLengthValueDateButton) };
        this.mDateXComponentGroup.addElement(dateXComponents);
        this.mDateYComponentGroup.addElement(dateYComponents);

        // sets the calendar icon
        this.setCalendarIcon(this.mXValueDateButton);
        this.setCalendarIcon(this.mYValueDateButton);
        this.setCalendarIcon(this.mXLengthValueDateButton);
        this.setCalendarIcon(this.mYLengthValueDateButton);
        
        SGComponentGroupElement[] xAxisComponents = {
                new SGComponentGroupElement(this.mXLengthLabel),
                new SGComponentGroupElement(this.mXLengthValueTextField),
                new SGComponentGroupElement(this.mXAxisDownsideRadioButton),
                new SGComponentGroupElement(this.mXAxisUpsideRadioButton),
                new SGComponentGroupElement(this.mXAxisTextLabel),
                new SGComponentGroupElement(this.mXAxisTextField),
                new SGComponentGroupElement(this.mXAxisUnitLabel),
                new SGComponentGroupElement(this.mXAxisUnitTextField),
                dateXComponents[1] };

        SGComponentGroupElement[] yAxisComponents = {
                new SGComponentGroupElement(this.mYLengthLabel),
                new SGComponentGroupElement(this.mYLengthValueTextField),
                new SGComponentGroupElement(this.mYAxisLeftsideRadioButton),
                new SGComponentGroupElement(this.mYAxisRightsideRadioButton),
                new SGComponentGroupElement(this.mYAxisTextLabel),
                new SGComponentGroupElement(this.mYAxisTextField),
                new SGComponentGroupElement(this.mYAxisUnitLabel),
                new SGComponentGroupElement(this.mYAxisUnitTextField),
                dateYComponents[1] };

        SGComponentGroupElement[] visibleComponents = {
        		// Location
                new SGComponentGroupElement(this.mLocationLabel),
                new SGComponentGroupElement(this.mXValueLabel),
                new SGComponentGroupElement(this.mXValueTextField),
                dateXComponents[0],
                new SGComponentGroupElement(this.mYValueLabel),
                new SGComponentGroupElement(this.mYValueTextField),
                dateYComponents[0],
                
                // axis change mode
                new SGComponentGroupElement(this.mAxisLengthModeLabel),
                new SGComponentGroupElement(this.mAxisLengthModeComboBox),
        		
                // X Axis
                new SGComponentGroupElement(this.mXAxisVisibleCheckBox),
                new SGComponentGroupElement(this.mXAxisLabel),
                xAxisComponents[0],
                xAxisComponents[1],
                xAxisComponents[2],
                xAxisComponents[3],
                xAxisComponents[4],
                xAxisComponents[5],
                xAxisComponents[6],
                xAxisComponents[7],
                dateXComponents[1],

                // Y Axis
                new SGComponentGroupElement(this.mYAxisVisibleCheckBox),
                new SGComponentGroupElement(this.mYAxisLabel),
                yAxisComponents[0],
                yAxisComponents[1],
                yAxisComponents[2],
                yAxisComponents[3],
                yAxisComponents[4],
                yAxisComponents[5],
                yAxisComponents[6],
                yAxisComponents[7],
                dateYComponents[1],

                // Form
                new SGComponentGroupElement(this.mFormLabel),
                new SGComponentGroupElement(this.mLineWidthLabel),
                new SGComponentGroupElement(this.mLineWidthSpinner),
                new SGComponentGroupElement(this.mLineColorLabel),
                new SGComponentGroupElement(this.mLineColorButton),
                new SGComponentGroupElement(this.mSpaceLabel),
                new SGComponentGroupElement(this.mSpaceSpinner),

                // String
                new SGComponentGroupElement(this.mStringLabel),
                new SGComponentGroupElement(this.mFontNameLabel),
                new SGComponentGroupElement(this.mFontNameComboBox),
                new SGComponentGroupElement(this.mFontStyleLabel),
                new SGComponentGroupElement(this.mFontStyleComboBox),
                new SGComponentGroupElement(this.mFontSizeLabel),
                new SGComponentGroupElement(this.mFontSizeSpinner),
                new SGComponentGroupElement(this.mFontColorLabel),
                new SGComponentGroupElement(this.mFontColorButton),
                new SGComponentGroupElement(this.mFontAngleLabel),
                new SGComponentGroupElement(this.mFontAngleSpinner)
        };
        
        this.mXAxisComponentGroup.addElement(xAxisComponents);
        this.mYAxisComponentGroup.addElement(yAxisComponents);
        this.mVisibleComponentGroup.addElement(visibleComponents);
    }

    private void setEnabledXAxisUnitField(DocumentEvent e) {
    	this.setEnabledUnitField(e.getDocument(), this.mXAxisUnitTextField);
    }

    private void setEnabledYAxisUnitField(DocumentEvent e) {
    	this.setEnabledUnitField(e.getDocument(), this.mYAxisUnitTextField);
    }

    private void setEnabledUnitField(Document doc, JTextField unitField) {
    	final int len = doc.getLength();
    	unitField.setEditable(len == 0);
    }
    
    // a radio button to display "intermediate" selected state
    private JRadioButton mXAxisDummyRadioButton = new JRadioButton();

    private JRadioButton mYAxisDummyRadioButton = new JRadioButton();

    private SGComponentGroup mXAxisComponentGroup = new SGComponentGroup();

    private SGComponentGroup mYAxisComponentGroup = new SGComponentGroup();

    private SGComponentGroup mVisibleComponentGroup = new SGComponentGroup();

    @Override
    public void actionPerformed(ActionEvent e) {
        super.actionPerformed(e);
        Object source = e.getSource();
        if (source.equals(this.mXValueDateButton)) {
        	this.onDateButtonPressed(this.mXValueTextField);
        } else if (source.equals(this.mYValueDateButton)) {
        	this.onDateButtonPressed(this.mYValueTextField);
        } else if (source.equals(this.mXLengthValueDateButton)) {
        	this.onPeriodButtonPressedForDoubleValue(this.mXLengthValueTextField);
        } else if (source.equals(this.mYLengthValueDateButton)) {
        	this.onPeriodButtonPressedForDoubleValue(this.mYLengthValueTextField);
        } else if (source.equals(this.mXAxisVisibleCheckBox)) {
        	this.mXAxisComponentGroup.setEnabled(this.mXAxisVisibleCheckBox.isSelected());
        } else if (source.equals(this.mYAxisVisibleCheckBox)) {
        	this.mYAxisComponentGroup.setEnabled(this.mYAxisVisibleCheckBox.isSelected());
        } else if (source.equals(this.mVisibleCheckBox)) {
        	this.mVisibleComponentGroup.setEnabled(this.mVisibleCheckBox.isSelected());
        }
    }

    @Override
	public List<JTextField> getTextFieldComponentsList() {
    	List<JTextField> list = new ArrayList<JTextField>();
    	list.addAll(this.getAxisNumberTextFieldList());
    	list.add(this.mXAxisTextField);
    	list.add(this.mXAxisUnitTextField);
    	list.add(this.mYAxisTextField);
    	list.add(this.mYAxisUnitTextField);
		return list;
	}

	@Override
	public List<SGTextField> getAxisNumberTextFieldList() {
    	List<SGTextField> list = new ArrayList<SGTextField>();
    	list.add(this.mXValueTextField);
    	list.add(this.mYValueTextField);
    	list.add(this.mXLengthValueTextField);
    	list.add(this.mYLengthValueTextField);
		return list;
	}

	@Override
	public List<SGSpinner> getSpinnerList() {
    	List<SGSpinner> list = new ArrayList<SGSpinner>();
    	list.add(this.mSpaceSpinner);
    	list.add(this.mLineWidthSpinner);
    	list.add(this.mFontSizeSpinner);
    	list.add(this.mFontAngleSpinner);
		return list;
	}

	@Override
    public List getColorSelectionButtonsList() {
    	List<JButton> list = new ArrayList<JButton>();
    	list.add(this.mLineColorButton);
    	list.add(this.mFontColorButton);
    	return list;
    }

	@Override
	protected JButton getOKButton() {
		return this.mOKButton;
	}

	@Override
	protected JButton getCancelButton() {
		return this.mCancelButton;
	}

	@Override
	protected JButton getPreviewButton() {
		return this.mPreviewButton;
	}

	@Override
	public boolean setPropertiesToObserver(SGIPropertyDialogObserver obs) {
		
		SGIAxisScaleDialogObserver scale = (SGIAxisScaleDialogObserver) obs;
		
        // get values
        final int xLocation = this.mAxisPanel.getXAxisLocation();
        final int yLocation = this.mAxisPanel.getYAxisLocation();
        final Boolean visible = this.getScaleVisible();
        final AXIS_LENGTH_MODE axisChangeMode = this.getAxisLengthMode();
        final Number xValue = this.getXValue();
        final Number yValue = this.getYValue();
		final Boolean xAxisVisible = this.getXAxisVisible();
		final Number xLength = this.getXLength();
		final Boolean xAxisDownside = this.isXAxisDownside();
		final String xAxisText = this.getXAxisText();
		final String xAxisUnit = this.getXAxisUnitText();
		final Boolean yAxisVisible = this.getYAxisVisible();
		final Number yLength = this.getYLength();
		final Boolean yAxisLeftside = this.isYAxisLeftside();
		final String yAxisText = this.getYAxisText();
		final String yAxisUnit = this.getYAxisUnitText();
		final Number lineWidth = this.getLineWidth();
		final Color lineColor = this.getLineColor();
		final Number space = this.getSpace();
		final String fontName = this.getFontName();
		final Integer fontStyle = this.getFontStyle();
		final Number fontSize = this.getFontSize();
		final Number fontAngle = this.getFontAngle();
		final Color fontColor = this.getFontColor();
        
        // check values
        ArrayList<String> list = new ArrayList<String>();
        if (scale.hasValidXValue(xLocation, xValue) == false) {
            list.add("X");
        }
        if (scale.hasValidYValue(yLocation, yValue) == false) {
            list.add("Y");
        }
        if (list.size() != 0) {
        	StringBuffer sb = new StringBuffer();
        	sb.append(ERRMSG_AXIS_VALUE_INVALID);
        	sb.append(":\n");
            for (int ii = 0; ii < list.size(); ii++) {
                String str = (String) list.get(ii);
                sb.append("- ");
                sb.append(str);
                sb.append('\n');
            }
            this.setInputErrorMessage(sb.toString());
            return false;
        }

        // set the related axes
        if (xLocation != -1) {
            scale.setXAxisLocation(xLocation);
        }

        if (yLocation != -1) {
            scale.setYAxisLocation(yLocation);
        }
        
        // visible
        if (visible != null) {
        	scale.setAxisScaleVisible(visible.booleanValue());
        }
        
        // axis change mode
        if (axisChangeMode != null) {
        	scale.setAxisLengthMode(axisChangeMode);
        }

        // x value
        if (xValue != null) {
            scale.setXValue(xValue.doubleValue());
        }
        
        // y value
        if (yValue != null) {
        	scale.setYValue(yValue.doubleValue());
        }

        // x axis visible
        if (xAxisVisible != null) {
        	scale.setXAxisVisible(xAxisVisible.booleanValue());
        }

        // x length
        if (xLength != null) {
        	scale.setXLengthValue(xLength.doubleValue());
        }
        
        // x downside
        if (xAxisDownside != null) {
        	scale.setXAxisTitleDownside(xAxisDownside.booleanValue());
        }

        // x axis text
        if (xAxisText != null) {
        	scale.setXAxisText(xAxisText);
        }

        // x axis unit
        if (xAxisUnit != null) {
        	scale.setXAxisUnit(xAxisUnit);
        }

        // y axis visible
        if (yAxisVisible != null) {
        	scale.setYAxisVisible(yAxisVisible.booleanValue());
        }
        
        // y length
        if (yLength != null) {
        	scale.setYLengthValue(yLength.doubleValue());
        }
        
        // y leftside
        if (yAxisLeftside != null) {
        	scale.setYAxisTitleLeftside(yAxisLeftside.booleanValue());
        }

        // y axis text
        if (yAxisText != null) {
        	scale.setYAxisText(yAxisText);
        }

        // y axis unit
        if (yAxisUnit != null) {
        	scale.setYAxisUnit(yAxisUnit);
        }
        
        // line width
        if (lineWidth != null) {
        	scale.setLineWidth(lineWidth.floatValue(), LINE_WIDTH_UNIT);
        }
        
        // line color
        if (lineColor != null) {
        	scale.setLineColor(lineColor);
        }
        
        // space
        if (space != null) {
        	scale.setSpace(space.floatValue(), SCALE_SPACE_UNIT);
        }
        
        // font name
        if (fontName != null) {
        	scale.setFontName(fontName);
        }
        
        // font style
        if (fontStyle != null) {
        	scale.setFontStyle(fontStyle.intValue());
        }
        
        // font size
        if (fontSize != null) {
        	scale.setFontSize(fontSize.floatValue(), FONT_SIZE_UNIT);
        }
        
        // font angle
        if (fontAngle != null) {
        	scale.setTextAngle(fontAngle.floatValue());
        }

        // font color
        if (fontColor != null) {
        	scale.setFontColor(fontColor);
        }
        
		return true;
	}

	@Override
	public boolean setDialogProperty() {
        final List<SGIPropertyDialogObserver> list = this.mPropertyDialogObserverList;
        final int num = list.size();
        
        // select axis panel
        selectAxisPanel(this, this.mAxisPanel, list);

        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, list);

        final boolean[] visibleArray = new boolean[num];
        final AXIS_LENGTH_MODE[] axisLengthModeArray = new AXIS_LENGTH_MODE[num];
        final double[] xValueArray = new double[num];
        final double[] yValueArray = new double[num];
        final boolean[] xAxisVisibleArray = new boolean[num];
        final double[] xLengthArray = new double[num];
        final boolean[] xAxisDownsideArray = new boolean[num];
        final String[] xAxisTextArray = new String[num];
        final String[] xAxisUnitArray = new String[num];
        final boolean[] yAxisVisibleArray = new boolean[num];
        final double[] yLengthArray = new double[num];
        final boolean[] yAxisLeftsideArray = new boolean[num];
        final String[] yAxisTextArray = new String[num];
        final String[] yAxisUnitArray = new String[num];
        final float[] lineWidthArray = new float[num];
        final Color[] lineColorArray = new Color[num];
        final float[] spaceArray = new float[num];
        final String[] fontNameArray = new String[num];
        final int[] fontStyleArray = new int[num];
        final float[] fontSizeArray = new float[num];
        final float[] fontAngleArray = new float[num];
        final Color[] fontColorArray = new Color[num];

        for (int ii = 0; ii < num; ii++) {
        	SGIAxisScaleDialogObserver l = (SGIAxisScaleDialogObserver) list.get(ii);
        	visibleArray[ii] = l.isAxisScaleVisible();
        	axisLengthModeArray[ii] = l.getAxisLengthMode();
        	xValueArray[ii] = l.getXValue();
        	yValueArray[ii] = l.getYValue();
        	xAxisVisibleArray[ii] = l.isXAxisVisible();
        	xLengthArray[ii] = l.getXLengthValue();
        	xAxisDownsideArray[ii] = l.isXAxisTitleDownside();
        	xAxisTextArray[ii] = l.getXAxisText();
        	xAxisUnitArray[ii] = l.getXAxisUnit();
        	yAxisVisibleArray[ii] = l.isYAxisVisible();
        	yLengthArray[ii] = l.getYLengthValue();
        	yAxisLeftsideArray[ii] = l.isYAxisTitleLeftside();
        	yAxisTextArray[ii] = l.getYAxisText();
        	yAxisUnitArray[ii] = l.getYAxisUnit();
        	lineWidthArray[ii] = l.getLineWidth(LINE_WIDTH_UNIT);
        	lineColorArray[ii] = l.getLineColor();
        	spaceArray[ii] = l.getSpace(SCALE_SPACE_UNIT);
        	fontNameArray[ii] = l.getFontName();
        	fontStyleArray[ii] = l.getFontStyle();
        	fontSizeArray[ii] = l.getFontSize(FONT_SIZE_UNIT);
        	fontAngleArray[ii] = l.getTextAngle();
        	fontColorArray[ii] = l.getFontColor();
        }
        
        Boolean visible = SGUtility.checkEquality(visibleArray);
        AXIS_LENGTH_MODE axisLengthMode = (AXIS_LENGTH_MODE) SGUtility.checkEquality(axisLengthModeArray);
        Double xValue = SGUtility.checkEquality(xValueArray);
        Double yValue = SGUtility.checkEquality(yValueArray);
        Boolean xAxisVisible = SGUtility.checkEquality(xAxisVisibleArray);
        Boolean yAxisVisible = SGUtility.checkEquality(yAxisVisibleArray);
        Double xLength = SGUtility.checkEquality(xLengthArray);
        Boolean xAxisDownside = SGUtility.checkEquality(xAxisDownsideArray);
        String xAxisText = SGUtility.checkEquality(xAxisTextArray);
        String xAxisUnit = SGUtility.checkEquality(xAxisUnitArray);
        Double yLength = SGUtility.checkEquality(yLengthArray);
        Boolean yAxisLeftside = SGUtility.checkEquality(yAxisLeftsideArray);
        String yAxisText = SGUtility.checkEquality(yAxisTextArray);
        String yAxisUnit = SGUtility.checkEquality(yAxisUnitArray);
        Float space = SGUtility.checkEquality(spaceArray);
        Float lineWidth = SGUtility.checkEquality(lineWidthArray);
        Color lineColor = SGUtility.checkEquality(lineColorArray);
        String fontName = SGUtility.checkEquality(fontNameArray);
        Integer fontStyle = SGUtility.checkEquality(fontStyleArray);
        Float fontSize = SGUtility.checkEquality(fontSizeArray);
        Float fontAngle = SGUtility.checkEquality(fontAngleArray);
        Color fontColor = SGUtility.checkEquality(fontColorArray);
        
        this.setScaleVisible(visible);
        this.setAxisLengthMode(axisLengthMode);
        this.setXValue(xValue);
        this.setYValue(yValue);
        this.setXAxisVisible(xAxisVisible);
        this.setXLength(xLength);
        if (xAxisDownside != null) {
            this.setXAxisDownside(xAxisDownside.booleanValue());
        } else {
            this.mXAxisDummyRadioButton.setSelected(true);
        }
        this.setXAxisText(xAxisText);
        this.setXAxisUnitText(xAxisUnit);
        this.setYAxisVisible(yAxisVisible);
        this.setYLength(yLength);
        if (yAxisLeftside != null) {
            this.setYAxisLeftside(yAxisLeftside.booleanValue());
        } else {
            this.mYAxisDummyRadioButton.setSelected(true);
        }
        this.setYAxisText(yAxisText);
        this.setYAxisUnitText(yAxisUnit);
        this.setLineWidth(lineWidth);
        this.setLineColor(lineColor);
        this.setSpace(space);
        this.setFontName(fontName);
        this.setFontStyle(fontStyle);
        this.setFontSize(fontSize);
        this.setFontAngle(fontAngle);
        this.setFontColor(fontColor);

		return true;
	}

	@Override
	public void onAxisSelectionStateChanged(SGAxisSelectionPanel axisPanel) {
        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, 
        		this.mPropertyDialogObserverList);
	}

	@Override
	public void onXAxisDateSelected(boolean selected) {
		this.mDateXComponentGroup.setEnabled(selected);
	}

	@Override
	public void onYAxisDateSelected(boolean selected) {
		this.mDateYComponentGroup.setEnabled(selected);
	}
	
    public Boolean getScaleVisible() {
        return this.mVisibleCheckBox.getSelected();
    }
    
    public AXIS_LENGTH_MODE getAxisLengthMode() {
    	AXIS_LENGTH_MODE ret = null;
    	Object item = this.mAxisLengthModeComboBox.getSelectedItem();
    	if (item != null) {
    		String modeName = item.toString();
    		if (AXIS_LENGTH_MODE_FIXED.equals(modeName)) {
    			ret = AXIS_LENGTH_MODE.LENGTH_FIXED;
    		} else if (AXIS_LENGTH_MODE_VALUE_FIXED.equals(modeName)) {
    			ret = AXIS_LENGTH_MODE.VALUE_FIXED;
    		} else if (AXIS_LENGTH_MODE_ADAPTIVE.equals(modeName)) {
    			ret = AXIS_LENGTH_MODE.ADAPTIVE;
    		}
    	}
    	return ret;
    }

    public String getXAxisText() {
        return this.mXAxisTextField.getText();
    }

    public String getXAxisUnitText() {
        return this.mXAxisUnitTextField.getText();
    }

    public String getYAxisText() {
        return this.mYAxisTextField.getText();
    }

    public String getYAxisUnitText() {
        return this.mYAxisUnitTextField.getText();
    }

    public Number getXValue() {
        return this.getNumber(this.mXValueTextField);
    }

    public Number getXLength() {
    	return this.getNumber(this.mXLengthValueTextField);
    }

    public Number getYValue() {
        return this.getNumber(this.mYValueTextField);
    }

    public Number getYLength() {
    	return this.getNumber(this.mYLengthValueTextField);
    }

    public Boolean getXAxisVisible() {
        return this.mXAxisVisibleCheckBox.getSelected();
    }

    public Boolean getYAxisVisible() {
        return this.mYAxisVisibleCheckBox.getSelected();
    }

    public Number getSpace() {
        return this.mSpaceSpinner.getNumber();
    }

    public Number getFontSize() {
        return this.mFontSizeSpinner.getNumber();
    }

    public String getFontName() {
        return (String) this.mFontNameComboBox.getSelectedItem();
    }

    public Integer getFontStyle() {
        final String item = (String) this.mFontStyleComboBox.getSelectedItem();
        return SGUtilityText.getFontStyle(item);
    }

    public Color getLineColor() {
        return this.mLineColorButton.getColor();
    }

    public Number getLineWidth() {
        return this.mLineWidthSpinner.getNumber();
    }
    
    public Number getFontAngle() {
        return this.mFontAngleSpinner.getNumber();
    }

    public Color getFontColor() {
        return this.mFontColorButton.getColor();
    }

    public boolean setScaleVisible(final Boolean b) {
        this.mVisibleCheckBox.setSelected(b);
        boolean flag = true;
        if (b != null) {
            flag = b.booleanValue();
        }
        this.mVisibleComponentGroup.setEnabled(flag);
        return true;
    }

    public boolean setAxisLengthMode(final AXIS_LENGTH_MODE mode) {
        String modeName = null;
        if (mode != null) {
        	if (AXIS_LENGTH_MODE.LENGTH_FIXED.equals(mode)) {
        		modeName = AXIS_LENGTH_MODE_FIXED;
        	} else if (AXIS_LENGTH_MODE.VALUE_FIXED.equals(mode)) {
        		modeName = AXIS_LENGTH_MODE_VALUE_FIXED;
        	} else if (AXIS_LENGTH_MODE.ADAPTIVE.equals(mode)) {
        		modeName = AXIS_LENGTH_MODE_ADAPTIVE;
        	}
        }
        this.mAxisLengthModeComboBox.setSelectedItem(modeName);
        return true;
    }

    public boolean setXAxisVisible(final Boolean b) {
        this.mXAxisVisibleCheckBox.setSelected(b);
        return true;
    }

    public boolean setYAxisVisible(final Boolean b) {
        this.mYAxisVisibleCheckBox.setSelected(b);
        return true;
    }
    
    public boolean setXAxisText(final String text) {
        this.mXAxisTextField.setText(text);
        return true;
    }

    public boolean setXAxisUnitText(final String text) {
        this.mXAxisUnitTextField.setText(text);
        return true;
    }

    public boolean setYAxisText(final String text) {
        this.mYAxisTextField.setText(text);
        return true;
    }

    public boolean setYAxisUnitText(final String text) {
        this.mYAxisUnitTextField.setText(text);
        return true;
    }

    public boolean setXValue(final Object obj) {
        return this.setValue(this.mXValueTextField, obj);
    }

    public boolean setXLength(final Object obj) {
    	return this.setValue(this.mXLengthValueTextField, obj);
    }

    public boolean setYValue(final Object obj) {
        return this.setValue(this.mYValueTextField, obj);
    }

    public boolean setYLength(final Object obj) {
    	return this.setValue(this.mYLengthValueTextField, obj);
    }

    public boolean setSpace(final Object obj) {
        return this.setValue(this.mSpaceSpinner, obj);
    }

    public boolean setFontSize(final Object obj) {
        return this.setValue(this.mFontSizeSpinner, obj);
    }

    /**
     * Sets the font name.
     * 
     * @param name
     *           the font name to set
     * @return true if succeeded
     */
    public boolean setFontName(final String name) {
    	final String fName = SGUtility.findFontFamilyName(name);
        this.mFontNameComboBox.setSelectedItem(fName);
        return true;
    }

    public boolean setFontStyle(final Integer style) {
        String styleName = null;
        if (style != null) {
            styleName = SGUtilityText.getFontStyleName(style.intValue());
        }
        this.mFontStyleComboBox.setSelectedItem(styleName);
        return true;
    }

    public boolean setLineColor(final Color cl) {
        this.mLineColorButton.setColor(cl);
        return true;
    }

    public boolean setLineWidth(Object obj) {
        return this.setValue(this.mLineWidthSpinner, obj);
    }

    public boolean setFontAngle(Object obj) {
        return this.setValue(this.mFontAngleSpinner, obj);
    }

    public boolean setFontColor(final Color cl) {
        this.mFontColorButton.setColor(cl);
        return true;
    }

    public boolean setXAxisDownside(final boolean b) {
    	this.mXAxisDownsideRadioButton.setSelected(b);
    	this.mXAxisUpsideRadioButton.setSelected(!b);
        return true;
    }

    public boolean setYAxisLeftside(final boolean b) {
    	this.mYAxisLeftsideRadioButton.setSelected(b);
    	this.mYAxisRightsideRadioButton.setSelected(!b);
        return true;
    }

    public Boolean isXAxisDownside() {
        if (this.mXAxisDummyRadioButton.isSelected()) {
            return null;
        }
        return Boolean.valueOf(this.mXAxisDownsideRadioButton.isSelected());
    }

    public Boolean isYAxisLeftside() {
        if (this.mYAxisDummyRadioButton.isSelected()) {
            return null;
        }
        return Boolean.valueOf(this.mYAxisLeftsideRadioButton.isSelected());
    }

}
