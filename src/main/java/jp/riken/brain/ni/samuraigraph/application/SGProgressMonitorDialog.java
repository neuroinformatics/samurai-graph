package jp.riken.brain.ni.samuraigraph.application;

import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;

import jp.riken.brain.ni.samuraigraph.base.SGDialog;

/**
 * A dialog to display the progress.
 * 
 */
public abstract class SGProgressMonitorDialog extends SGDialog {

    private static final long serialVersionUID = 4201251650516943885L;

    /** Creates new form SGProgressMonitorDialog */
    public SGProgressMonitorDialog() {
        super();
        initComponents();
        this.initProperty();
    }

    /** Creates new form SGProgressMonitorDialog */
    public SGProgressMonitorDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /** Creates new form SGProgressMonitorDialog */
    public SGProgressMonitorDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mPanel = new javax.swing.JPanel();
        mButtonPanel = new javax.swing.JPanel();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mProgressBar = new javax.swing.JProgressBar();
        mMessageLabel = new javax.swing.JLabel();
        mScrollPane = new javax.swing.JScrollPane();
        mTextArea = new javax.swing.JTextArea();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPanel.setLayout(new java.awt.GridBagLayout());

        mButtonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        mPanel.add(mButtonPanel, gridBagConstraints);

        mProgressBar.setPreferredSize(new java.awt.Dimension(350, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        mPanel.add(mProgressBar, gridBagConstraints);

        mMessageLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMessageLabel.setText("message");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mPanel.add(mMessageLabel, gridBagConstraints);

        mScrollPane.setBorder(null);
        mScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        mTextArea.setColumns(20);
        mTextArea.setEditable(false);
        mTextArea.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTextArea.setLineWrap(true);
        mTextArea.setRows(3);
        mTextArea.setBorder(null);
        mScrollPane.setViewportView(mTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel mButtonPanel;
    protected jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JLabel mMessageLabel;
    protected javax.swing.JPanel mPanel;
    protected javax.swing.JProgressBar mProgressBar;
    private javax.swing.JScrollPane mScrollPane;
    private javax.swing.JTextArea mTextArea;
    // End of variables declaration//GEN-END:variables

	private boolean mCanceledFlag = false;

    private void initProperty() {
        this.mCancelButton.addActionListener(this);
        this.mTextArea.setBackground(this.getBackground());
        this.mTextArea.setForeground(this.getForeground());
    }

    @Override
    public void actionPerformed(ActionEvent e) {
    	super.actionPerformed(e);
        String command = e.getActionCommand();
        if (command.equals(SGDialog.CANCEL_BUTTON_TEXT)) {
            this.onCanceled();
        }
    }

    @Override
    public void windowClosing(final WindowEvent e) {
        super.windowClosing(e);
        this.onCanceled();
    }

    private boolean onCanceled() {
        this.mCanceledFlag = true;
        this.setVisible(false);
        return true;
    }

    public void setStatusText(String text) {
        this.mTextArea.setText(text);
    }

    @Override
    public void setVisible(boolean b) {
        if (b) {
            this.mCanceledFlag = false;
        }
        super.setVisible(b);
    }

    public boolean isCanceled() {
        return this.mCanceledFlag;
    }

    /**
     * Called when the escape key is typed.
     *
     */
    @Override
    protected void onEscKeyTyped() {
        this.onCanceled();
    }
    
    public void setMessage(final String text) {
    	this.mMessageLabel.setText(text);
    }
    
    public void setMaxValue(final int value) {
    	if (value <= 0) {
    		throw new IllegalArgumentException("value <= 0: " + value);
    	}
    	this.mProgressBar.setMinimum(0);
    	this.mProgressBar.setMaximum(value);
    }
    
    public int getMaxValue() {
    	return this.mProgressBar.getMaximum();
    }
    
    public void setProgress(final int value) {
        final int max = this.getMaxValue();

        // set to the progress bar
        this.mProgressBar.setValue(value);

        // set string
        final int percent = (int) (100.0f * value / max);
        String note = Integer.valueOf(percent).toString() + "%";
        this.mProgressBar.setString(note);
    }
}
