package jp.riken.brain.ni.samuraigraph.application;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.io.File;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import jp.riken.brain.ni.samuraigraph.base.SGAnimationThread;
import jp.riken.brain.ni.samuraigraph.base.SGAnimationThread.AnimationThreadObserver;
import jp.riken.brain.ni.samuraigraph.base.SGButton;
import jp.riken.brain.ni.samuraigraph.base.SGData;
import jp.riken.brain.ni.samuraigraph.base.SGDialog;
import jp.riken.brain.ni.samuraigraph.base.SGDrawingWindow;
import jp.riken.brain.ni.samuraigraph.base.SGIAnimation;
import jp.riken.brain.ni.samuraigraph.base.SGIAnimationConstants;
import jp.riken.brain.ni.samuraigraph.base.SGIConstants;
import jp.riken.brain.ni.samuraigraph.base.SGIntegerSeriesSet;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyMap;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;
import jp.riken.brain.ni.samuraigraph.data.SGDataAnimationThread;
import jp.riken.brain.ni.samuraigraph.data.SGDataUtility;
import jp.riken.brain.ni.samuraigraph.data.SGIDataAnimation;
import jp.riken.brain.ni.samuraigraph.data.SGMDArrayData;
import jp.riken.brain.ni.samuraigraph.data.SGNetCDFData;
import jp.riken.brain.ni.samuraigraph.data.SGSliderPanel;

import org.freehep.graphicsio.ImageConstants;
import org.freehep.graphicsio.PageConstants;

import foxtrot.Task;
import foxtrot.Worker;

/**
 * A dialog to set configuration of animation of data object.
 *
 */
public class SGDataAnimationDialog extends SGDialog
        implements SGIAnimationConstants, DocumentListener, ChangeListener,
        AnimationThreadObserver, MouseListener, ItemListener {

    /**
     * Serial Version UID
     */
    private static final long serialVersionUID = -422924558519688171L;

    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Set up the Animation";

    /**
     * Builds a new dialog.
     *
     * @param parent
     *           the parent of this dialog
     * @param modal
     *           true to create a modal dialog
     */
    public SGDataAnimationDialog(SGDrawingWindow wnd, final boolean modal) {
        super(wnd, modal);
        initComponents();
        this.initProperty();
        this.mWindow = wnd;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mButtonInnerPanel = new javax.swing.JPanel();
        mRestoreButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCloseButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mMainPanel = new javax.swing.JPanel();
        mSeparator = new javax.swing.JSeparator();
        mOpenToggleButton = new jp.riken.brain.ni.samuraigraph.base.SGOpenToggleButton();
        mSubPanel = new javax.swing.JPanel();
        mTabbedPane = new javax.swing.JTabbedPane();
        mAnimationTabPanel = new javax.swing.JPanel();
        mFrameRatePanel = new javax.swing.JPanel();
        mFrameRateLabel = new javax.swing.JLabel();
        mFrameRateSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mFPSLabel = new javax.swing.JLabel();
        mAnimationSubPanel = new javax.swing.JPanel();
        mAnimationSubInnerPanel = new javax.swing.JPanel();
        mPlayerButtonPanel = new javax.swing.JPanel();
        mPrevButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mHeadButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mEndButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mLoopPlaybackToggleButton = new javax.swing.JToggleButton();
        mReversePlayToggleButton = new javax.swing.JToggleButton();
        mPlayToggleButton = new javax.swing.JToggleButton();
        mSliderParentPanel = new javax.swing.JPanel();
        mVariablePanel = new javax.swing.JPanel();
        mNameLabel = new javax.swing.JLabel();
        mEqualLabel = new javax.swing.JLabel();
        mValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mUnitLabel = new javax.swing.JLabel();
        mExportTabPanel = new javax.swing.JPanel();
        mExportPanel = new javax.swing.JPanel();
        mImageFormatLabel = new javax.swing.JLabel();
        mImageFormatComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mFolderLabel = new javax.swing.JLabel();
        mFileNameLabel = new javax.swing.JLabel();
        mFileNameTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mResolutionLabel = new javax.swing.JLabel();
        mResolutionTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mRoundSizePanel = new javax.swing.JPanel();
        mRoundSize16CheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mRoundSize8CheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mRoundSize32CheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mRoundSizeLabel = new javax.swing.JLabel();
        mFolderPanel = new javax.swing.JPanel();
        mFolderTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mFolderBrowseButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mExportButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mFrameIndexPanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mCompactViewPanel = new javax.swing.JPanel();
        mOpenToggleButtonPanel = new javax.swing.JPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mButtonPanel.setLayout(new java.awt.BorderLayout());

        mButtonInnerPanel.setLayout(new java.awt.GridBagLayout());

        mRestoreButton.setText("Restore");
        mRestoreButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mButtonInnerPanel.add(mRestoreButton, gridBagConstraints);

        mCloseButton.setText("Close");
        mCloseButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mButtonInnerPanel.add(mCloseButton, gridBagConstraints);

        mButtonPanel.add(mButtonInnerPanel, java.awt.BorderLayout.EAST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mMainPanel.setLayout(new java.awt.GridBagLayout());

        mSeparator.setPreferredSize(new java.awt.Dimension(180, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mMainPanel.add(mSeparator, gridBagConstraints);

        mOpenToggleButton.setFocusable(false);
        mOpenToggleButton.setPreferredSize(new java.awt.Dimension(16, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mMainPanel.add(mOpenToggleButton, gridBagConstraints);

        mSubPanel.setLayout(new java.awt.GridBagLayout());

        mTabbedPane.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        mAnimationTabPanel.setLayout(new java.awt.GridBagLayout());

        mFrameRatePanel.setLayout(new java.awt.GridBagLayout());

        mFrameRateLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFrameRateLabel.setText("Frame Rate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        mFrameRatePanel.add(mFrameRateLabel, gridBagConstraints);

        mFrameRateSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFrameRateSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        mFrameRatePanel.add(mFrameRateSpinner, gridBagConstraints);

        mFPSLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFPSLabel.setText("[fps]");
        mFrameRatePanel.add(mFPSLabel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mAnimationTabPanel.add(mFrameRatePanel, gridBagConstraints);

        mAnimationSubPanel.setLayout(new java.awt.GridBagLayout());

        mAnimationSubInnerPanel.setLayout(new java.awt.GridBagLayout());

        mPlayerButtonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mPlayerButtonPanel.setLayout(new java.awt.GridBagLayout());

        mPrevButton.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 5, 1);
        mPlayerButtonPanel.add(mPrevButton, gridBagConstraints);

        mNextButton.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 5, 1);
        mPlayerButtonPanel.add(mNextButton, gridBagConstraints);

        mHeadButton.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 1);
        mPlayerButtonPanel.add(mHeadButton, gridBagConstraints);

        mEndButton.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 5, 5);
        mPlayerButtonPanel.add(mEndButton, gridBagConstraints);

        mLoopPlaybackToggleButton.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPlayerButtonPanel.add(mLoopPlaybackToggleButton, gridBagConstraints);

        mReversePlayToggleButton.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 1);
        mPlayerButtonPanel.add(mReversePlayToggleButton, gridBagConstraints);

        mPlayToggleButton.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 5, 5);
        mPlayerButtonPanel.add(mPlayToggleButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        mAnimationSubInnerPanel.add(mPlayerButtonPanel, gridBagConstraints);

        mSliderParentPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        mAnimationSubInnerPanel.add(mSliderParentPanel, gridBagConstraints);

        mVariablePanel.setLayout(new java.awt.GridBagLayout());

        mNameLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNameLabel.setText("Name");
        mVariablePanel.add(mNameLabel, new java.awt.GridBagConstraints());

        mEqualLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mEqualLabel.setText(" = ");
        mEqualLabel.setPreferredSize(new java.awt.Dimension(16, 16));
        mVariablePanel.add(mEqualLabel, new java.awt.GridBagConstraints());

        mValueTextField.setColumns(6);
        mValueTextField.setEditable(false);
        mValueTextField.setText("Value");
        mValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        mVariablePanel.add(mValueTextField, gridBagConstraints);

        mUnitLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mUnitLabel.setText("Unit");
        mVariablePanel.add(mUnitLabel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        mAnimationSubInnerPanel.add(mVariablePanel, gridBagConstraints);

        mAnimationSubPanel.add(mAnimationSubInnerPanel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        mAnimationTabPanel.add(mAnimationSubPanel, gridBagConstraints);

        mTabbedPane.addTab("Animation", mAnimationTabPanel);

        mExportTabPanel.setLayout(new java.awt.GridBagLayout());

        mExportPanel.setLayout(new java.awt.GridBagLayout());

        mImageFormatLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mImageFormatLabel.setText("Format");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mExportPanel.add(mImageFormatLabel, gridBagConstraints);

        mImageFormatComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mImageFormatComboBox.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mExportPanel.add(mImageFormatComboBox, gridBagConstraints);

        mFolderLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFolderLabel.setText("Folder");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mExportPanel.add(mFolderLabel, gridBagConstraints);

        mFileNameLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFileNameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mExportPanel.add(mFileNameLabel, gridBagConstraints);

        mFileNameTextField.setColumns(10);
        mFileNameTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mExportPanel.add(mFileNameTextField, gridBagConstraints);

        mResolutionLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mResolutionLabel.setText("Resolution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        mExportPanel.add(mResolutionLabel, gridBagConstraints);

        mResolutionTextField.setColumns(5);
        mResolutionTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mExportPanel.add(mResolutionTextField, gridBagConstraints);

        mRoundSizePanel.setLayout(new java.awt.GridBagLayout());

        mRoundSize16CheckBox.setText("16");
        mRoundSize16CheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        mRoundSizePanel.add(mRoundSize16CheckBox, gridBagConstraints);

        mRoundSize8CheckBox.setText("8");
        mRoundSize8CheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        mRoundSizePanel.add(mRoundSize8CheckBox, gridBagConstraints);

        mRoundSize32CheckBox.setText("32");
        mRoundSize32CheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        mRoundSizePanel.add(mRoundSize32CheckBox, gridBagConstraints);

        mRoundSizeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mRoundSizeLabel.setText("Round Size to Multiples of");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        mRoundSizePanel.add(mRoundSizeLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mExportPanel.add(mRoundSizePanel, gridBagConstraints);

        mFolderPanel.setLayout(new java.awt.GridBagLayout());

        mFolderTextField.setColumns(12);
        mFolderTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFolderPanel.add(mFolderTextField, new java.awt.GridBagConstraints());

        mFolderBrowseButton.setText("Browse");
        mFolderBrowseButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        mFolderPanel.add(mFolderBrowseButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mExportPanel.add(mFolderPanel, gridBagConstraints);

        mExportButton.setText("Export");
        mExportButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mExportPanel.add(mExportButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mExportTabPanel.add(mExportPanel, gridBagConstraints);

        mTabbedPane.addTab("Export As Image", mExportTabPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        mSubPanel.add(mTabbedPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mSubPanel.add(mFrameIndexPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        mMainPanel.add(mSubPanel, gridBagConstraints);

        mCompactViewPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mMainPanel.add(mCompactViewPanel, gridBagConstraints);

        mOpenToggleButtonPanel.setLayout(new java.awt.GridBagLayout());
        mMainPanel.add(mOpenToggleButtonPanel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(mMainPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mAnimationSubInnerPanel;
    private javax.swing.JPanel mAnimationSubPanel;
    private javax.swing.JPanel mAnimationTabPanel;
    private javax.swing.JPanel mButtonInnerPanel;
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCloseButton;
    private javax.swing.JPanel mCompactViewPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mEndButton;
    private javax.swing.JLabel mEqualLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mExportButton;
    private javax.swing.JPanel mExportPanel;
    private javax.swing.JPanel mExportTabPanel;
    private javax.swing.JLabel mFPSLabel;
    private javax.swing.JLabel mFileNameLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mFileNameTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mFolderBrowseButton;
    private javax.swing.JLabel mFolderLabel;
    private javax.swing.JPanel mFolderPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mFolderTextField;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mFrameIndexPanel;
    private javax.swing.JLabel mFrameRateLabel;
    private javax.swing.JPanel mFrameRatePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mFrameRateSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mHeadButton;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mImageFormatComboBox;
    private javax.swing.JLabel mImageFormatLabel;
    private javax.swing.JToggleButton mLoopPlaybackToggleButton;
    private javax.swing.JPanel mMainPanel;
    private javax.swing.JLabel mNameLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    private jp.riken.brain.ni.samuraigraph.base.SGOpenToggleButton mOpenToggleButton;
    private javax.swing.JPanel mOpenToggleButtonPanel;
    private javax.swing.JToggleButton mPlayToggleButton;
    private javax.swing.JPanel mPlayerButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPrevButton;
    private javax.swing.JLabel mResolutionLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mResolutionTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mRestoreButton;
    private javax.swing.JToggleButton mReversePlayToggleButton;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mRoundSize16CheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mRoundSize32CheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mRoundSize8CheckBox;
    private javax.swing.JLabel mRoundSizeLabel;
    private javax.swing.JPanel mRoundSizePanel;
    private javax.swing.JSeparator mSeparator;
    private javax.swing.JPanel mSliderParentPanel;
    private javax.swing.JPanel mSubPanel;
    private javax.swing.JTabbedPane mTabbedPane;
    private javax.swing.JLabel mUnitLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mValueTextField;
    private javax.swing.JPanel mVariablePanel;
    // End of variables declaration//GEN-END:variables

    /**
     * A timer for the frame.
     */
    private Timer mFrameTimer;
    
    /**
     * The window.
     */
    private SGDrawingWindow mWindow = null;

    // slider panel
    private SGSliderPanel mSliderPanel = new SGSliderPanel();

    // The array of frame indices.
    private int[] mFrameIndexArray = new int[0];

    static final String[] IMAGE_FORMAT_ARRAY = {
    	ImageConstants.BMP, ImageConstants.PNG, ImageConstants.JPEG, 
    	ImageConstants.GIF
    };
    
    static final Map<String, String> EXTENSION_MAP = new HashMap<String, String>();
    
    static {
    	EXTENSION_MAP.put(ImageConstants.BMP, ImageConstants.BMP.toLowerCase());
    	EXTENSION_MAP.put(ImageConstants.PNG, ImageConstants.PNG.toLowerCase());
    	EXTENSION_MAP.put(ImageConstants.JPEG, ImageConstants.JPG.toLowerCase());
    	EXTENSION_MAP.put(ImageConstants.GIF, ImageConstants.GIF.toLowerCase());
    }
    
    private String mFolderPath = null;

    /**
     * Initialize the properties.
     */
    private void initProperty() {
        // set the title
        this.setTitle(TITLE);

    	for (String format : IMAGE_FORMAT_ARRAY) {
    		this.mImageFormatComboBox.addItem(format);
    	}

    	this.mResolutionTextField.setText(Integer.toString(72));

        // set the spinner model
        this.mFrameRateSpinner.initProperties(new SpinnerNumberModel(FRAME_RATE_INIT,
                FRAME_RATE_MIN, FRAME_RATE_MAX,
                FRAME_RATE_STEP), null, FRAME_RATE_FRAC_DIFIT_MIN, FRAME_RATE_FRAC_DIFIT_MAX);

        // setup the slider
        JSlider slider = this.getSlider();
        slider.setPreferredSize(new java.awt.Dimension(250, 27));
        this.mSliderParentPanel.add(this.mSliderPanel);
        this.mSliderPanel.setStepButtonVisible(false);

        // add event listeners
        this.mPlayToggleButton.addActionListener(this);
        this.mReversePlayToggleButton.addActionListener(this);
        this.mHeadButton.addActionListener(this);
        this.mPrevButton.addActionListener(this);
        this.mPrevButton.addMouseListener(this);
        this.mNextButton.addActionListener(this);
        this.mNextButton.addMouseListener(this);
        this.mEndButton.addActionListener(this);
        this.mLoopPlaybackToggleButton.addActionListener(this);
        this.mRestoreButton.addActionListener(this);
        this.mFrameRateSpinner.addChangeListener(this);
        this.mFrameRateSpinner.getFormattedTextField().getDocument().addDocumentListener(this);
        slider.addChangeListener(this);
        slider.addMouseListener(this);
        this.mFrameIndexPanel.addDocumentListener(this);

    	this.mFolderBrowseButton.addActionListener(this);
    	this.mImageFormatComboBox.addItemListener(this);
    	this.mFolderTextField.getDocument().addDocumentListener(this);
    	this.mResolutionTextField.getDocument().addDocumentListener(this);
    	this.mRoundSize8CheckBox.addActionListener(this);
    	this.mRoundSize16CheckBox.addActionListener(this);
    	this.mRoundSize32CheckBox.addActionListener(this);
    	this.mExportButton.addActionListener(this);

        this.mOpenToggleButton.addActionListener(this);
        this.mCloseButton.addActionListener(this);

        // create icons
        this.mPlayToggleButton.setIcon(this.createIcon("Play.png"));
        this.mReversePlayToggleButton.setIcon(this.createIcon("Reverse.png"));
        this.mHeadButton.setIcon(this.createIcon("Head.png"));
        this.mPrevButton.setIcon(this.createIcon("Prev.png"));
        this.mNextButton.setIcon(this.createIcon("Next.png"));
        this.mEndButton.setIcon(this.createIcon("End.png"));
        this.mLoopPlaybackToggleButton.setIcon(this.createIcon("LoopPlayback.png"));

        // set tool tips
        this.mPlayToggleButton.setToolTipText("Play");
        this.mReversePlayToggleButton.setToolTipText("Reverse");
        this.mHeadButton.setToolTipText("Head");
        this.mPrevButton.setToolTipText("Prev");
        this.mNextButton.setToolTipText("Next");
        this.mEndButton.setToolTipText("End");
        this.mLoopPlaybackToggleButton.setToolTipText("Loop Playback");
        
        // initializes the toggle button for the frame index
        this.mOpenToggleButton.setSelected(true);
        this.mSubPanel.setVisible(true);

        // initializes the timer
        this.mFrameTimer = new Timer(100, this);
        this.mFrameTimer.setInitialDelay(300);

        this.pack();
    }

    JSlider getSlider() {
    	return this.mSliderPanel.getSlider();
    }

    private ImageIcon createIcon(final String name) {
    	return SGUtility.createIcon(this, name);
    }
    
    public static final String DIALOG_SAVED_AND_CLOSED = "Dialog Saved And Closed";

    public static final String DIALOG_CANCELED_AND_CLOSED = "Dialog Canceled And Closed";

    /**
     * Called when an action event is invoked.
     *
     * @param e
     *           an action event
     */
    @Override
    public void actionPerformed(ActionEvent e) {
    	super.actionPerformed(e);
		Object source = e.getSource();
		if (source.equals(this.mRestoreButton)) {
			this.stopAnimation();
			this.restore();
		} else if (source.equals(this.mCloseButton)) {
			// save all changes and close
			this.saveAndClose();
			this.notifyToListener(DIALOG_SAVED_AND_CLOSED);
		} else if (source.equals(this.mOpenToggleButton)) {
			final boolean bOpened = this.mOpenToggleButton.isSelected();
			this.mSubPanel.setVisible(bOpened);
			if (bOpened) {
				Component comp = this.mCompactViewPanel.getComponent(0);
				this.mAnimationSubPanel.add(comp);
			} else {
				Component comp = this.mAnimationSubPanel.getComponent(0);
				this.mCompactViewPanel.add(comp);
			}
			this.pack();
		} else if (source.equals(this.mFrameTimer)) {
			if (this.mPrevButton.equals(this.mPressedButton)) {
				this.setToPrev();
			} else if (this.mNextButton.equals(this.mPressedButton)) {
				this.setToNext();
			}
    	} else if (source.equals(this.mFolderBrowseButton)) {
    		JFileChooser chooser;
    		if (this.mFolderPath != null) {
    			chooser = new JFileChooser(this.mFolderPath);
    		} else {
        		chooser = new JFileChooser();
    		}
    		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    		final int ret = chooser.showSaveDialog(this);
    		if (ret == JFileChooser.APPROVE_OPTION) {
    			File file = chooser.getSelectedFile();
    			String path = file.getAbsolutePath();
    			if (SGUtility.identifyOS(OS_NAME_MACOSX)) {
    				// a measure for the file chooser of Mac OS X
    				String name = file.getName();
    				File parentFile = file.getParentFile();
    				String parentName = parentFile.getName();
    				if (name.equals(parentName) && !file.exists() && parentFile.exists()) {
						path = parentFile.getAbsolutePath();
    				}
    			}
    			this.mFolderTextField.setText(path);
    			this.mFolderPath = path;
    		}
    	} else if (source.equals(this.mExportButton)) {
			final SGDrawingWindow wnd = this.mWindow;
			final SGPropertyMap map = new SGPropertyMap();
			Double res = SGUtilityText.getDouble(this.mResolutionTextField.getText());
			map.putValue(SGImageExportManager.KEY_RESOLUTION, res.toString());
			Boolean roundSelected = null;
			String roundKey = null;
			if (this.mRoundSize8CheckBox.isSelected()) {
				roundSelected = true;
				roundKey = SGImageExportManager.KEY_ROUND_SIZE_8;
			} else if (this.mRoundSize16CheckBox.isSelected()) {
				roundSelected = true;
				roundKey = SGImageExportManager.KEY_ROUND_SIZE_16;
			} else if (this.mRoundSize32CheckBox.isSelected()) {
				roundSelected = true;
				roundKey = SGImageExportManager.KEY_ROUND_SIZE_32;
			}
			if (roundSelected != null) {
				map.putValue(roundKey, roundSelected.toString());
			}
			map.putValue(PageConstants.TRANSPARENT, Boolean.FALSE.toString());
			map.putValue(PageConstants.BACKGROUND, Boolean.TRUE.toString());
			Color bgColor = wnd.getPaperColor();
			String bgColorStr = SGUtilityText.getColorString(bgColor);
			map.putValue(PageConstants.BACKGROUND_COLOR, bgColorStr);
			final String type = this.mImageFormatComboBox.getSelectedItem().toString();
			final String dir = this.mFolderPath;
			if (dir == null) {
				return;
			}
			final String name = this.mFileNameTextField.getText();
			if (name == null) {
				return;
			}
			SGIntegerSeriesSet arraySection = this.mFrameIndexPanel.getIndices();
			if (arraySection == null) {
				return;
			}
			final String extension = EXTENSION_MAP.get(type);
			final int curIndex = this.mAnimationThread.getCurrentFrameIndex();

			// creates the format
			final int frameIndexMax = this.mAnimationThread.getFrameNumber() - 1;
			BigDecimal fMax = new BigDecimal(frameIndexMax);
			final int precision = fMax.precision();
			StringBuffer sbFormat = new StringBuffer();
			sbFormat.append("%0");
			sbFormat.append(precision);
			sbFormat.append('d');
			final String format = sbFormat.toString();
	
			final int[] indices = arraySection.getNumbers();
			final int imageNum = indices.length;
			final SGExportProgressMonitorDialog progressDialog 
					= new SGExportProgressMonitorDialog(this, false);
			progressDialog.setMaxValue(imageNum);
			progressDialog.setCenter(this);
			progressDialog.setVisible(true);
			try {
				Worker.post(new Task() {
				    public Object run() throws Exception {
				    	wnd.startExport(true);
						for (int ii = 0; ii < imageNum; ii++) {
							progressDialog.setProgress(ii + 1);
							if (progressDialog.isCanceled()) {
								break;
							}
							String indexString = String.format(format, indices[ii]);
							StringBuffer sb = new StringBuffer();
							sb.append(dir);
							sb.append(SGIConstants.FILE_SEPARATOR);
							sb.append(name);
							sb.append('_');
							sb.append(indexString);
							sb.append('.');
							sb.append(extension);
							String path = sb.toString();
							progressDialog.setStatusText(path);
							setCurrentFrameIndex(indices[ii]);
							wnd.exportAsImage(map, type, path, true, false);
						}
						wnd.endExport(true);
						progressDialog.setVisible(false);
				    	return true;
				    }
				});
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			
			// restores frame index
			this.setCurrentFrameIndex(curIndex);
			
    	} else if (source.equals(this.mRoundSize8CheckBox)) {
    		this.mRoundSize16CheckBox.setSelected(false);
    		this.mRoundSize32CheckBox.setSelected(false);
    	} else if (source.equals(this.mRoundSize16CheckBox)) {
    		this.mRoundSize32CheckBox.setSelected(false);
    		this.mRoundSize8CheckBox.setSelected(false);
    	} else if (source.equals(this.mRoundSize32CheckBox)) {
    		this.mRoundSize8CheckBox.setSelected(false);
    		this.mRoundSize16CheckBox.setSelected(false);
		} else {
			if (this.mAnimationThread != null) {
				if (source.equals(this.mPlayToggleButton)) {
					this.onPlayButtonPressed(this.mPlayToggleButton, 
							this.mReversePlayToggleButton, true);
				} else if (source.equals(this.mReversePlayToggleButton)) {
					this.onPlayButtonPressed(this.mReversePlayToggleButton,
							this.mPlayToggleButton, false);
				} else if (source.equals(this.mHeadButton)) {
					this.setToFirst();
				} else if (source.equals(this.mPrevButton)) {
					this.setToPrev();
				} else if (source.equals(this.mNextButton)) {
					this.setToNext();
				} else if (source.equals(this.mEndButton)) {
					this.setToLast();
				} else if (source.equals(this.mLoopPlaybackToggleButton)) {
					final boolean b = this.mLoopPlaybackToggleButton
							.isSelected();
					this.mLoopPlaybackFlag = b;
					this.mAnimationThread.setLoopPlaybackEnabled(b);
				}
				
				this.checkAndStopAnimation();
			}
		}
    }
    
    private void onPlayButtonPressed(JToggleButton btn, 
    		JToggleButton invBtn, final boolean forward) {
		final boolean selected = btn.isSelected();
		if (selected) {
			this.startAnimation(forward);
			invBtn.setSelected(false);
		} else {
			this.pauseAnimation();
		}
		this.mTabbedPane.setEnabledAt(1, !selected);
    }

    private void setToPrev() {
        this.setIndex(this.mAnimationThread.getCurrentFrameIndex() - 1, false);
    }

    private void setToNext() {
        this.setIndex(this.mAnimationThread.getCurrentFrameIndex() + 1, true);
    }

    private void setToFirst() {
    	if (this.mFrameIndexArray.length == 0) {
    		return;
    	}
    	int firstIndex = this.mFrameIndexArray[0];
        this.setIndex(firstIndex, false);
    }

    private void setToLast() {
    	if (this.mFrameIndexArray.length == 0) {
    		return;
    	}
    	Integer lastIndex = this.mFrameIndexArray[this.mFrameIndexArray.length - 1];
        this.setIndex(lastIndex, true);
    }

    // start the animation
    private void startAnimation(final boolean forward) {
    	// stop the current thread
        this.stopAnimation();
        
    	// create a new thread
    	this.mAnimationThread = new SGDataAnimationThread(this.mAnimationThread);
        this.mAnimationThread.setPlayingForward(forward);
		this.mAnimationThread.start();
    }

    // pause the animation
    private void pauseAnimation() {
        this.stopAnimation();
    }

    // Sets the current index.
    private void setIndex(int index, boolean forward) {
    	final int indexNew = SGAnimationThread.getValidFrameIndex(index,
    			this.mAnimationThread.getFrameNumber(), this.mFrameIndexArray,
    			forward, mLoopPlaybackFlag);
    	if (indexNew != -1) {
            this.setSliderValue(indexNew);
    	}
    }

    /**
     * Called when a change event is invoked.
     *
     * @param e
     *         a change event
     */
    public void stateChanged(ChangeEvent e) {
        Object source = e.getSource();
        if (source.equals(this.getSlider())) {
            final int index = this.getSlider().getValue();
			if (Arrays.binarySearch(this.mFrameIndexArray, index) >= 0) {
	            this.setCurrentFrameIndex(index);
	            SGIAnimation[] animations = this.mAnimationThread.getAnimations();
				SGIDataAnimation dataAnimation = (SGIDataAnimation) animations[0];
		        final Number value = dataAnimation.getCurrentValue();
	            this.setCurrentValue(value);
				this.checkAndStopAnimation(index);
			}
        } else if (source.equals(this.mFrameRateSpinner)) {
            Object value = this.mFrameRateSpinner.getValue();
            this.updateFrameRate(value);
        }
    }
    
    private void checkAndStopAnimation() {
        final int index = this.getSlider().getValue();
		if (Arrays.binarySearch(this.mFrameIndexArray, index) >= 0) {
			this.checkAndStopAnimation(index);
		}
    }
    
    private void checkAndStopAnimation(final int index) {
        if (!this.mLoopPlaybackFlag) {
        	boolean stop = false;
        	if (this.mAnimationThread.isPlayingForward()) {
        		if (index == this.mFrameIndexArray[this.mFrameIndexArray.length - 1]) {
        			this.mPlayToggleButton.setSelected(false);
        			stop = true;
        		}
        	} else {
        		if (index == this.mFrameIndexArray[0]) {
        			this.mReversePlayToggleButton.setSelected(false);
        			stop = true;
        		}
        	}
        	if (stop) {
        		this.stopAnimation();
        	}
        }
    }

    private void updateFrameRate(Object value) {
        Double num = SGUtilityText.getDouble(value.toString());
        boolean valid;
        if (num != null) {
            if (num < FRAME_RATE_MIN) {
            	valid = false;
            } else if (num > FRAME_RATE_MAX) {
            	valid = false;
            } else {
            	valid = true;
            }
            if (valid) {
    			// updates the time interval and the frame rate
            	final double frameRate = num.doubleValue();
                final long timeInterval = SGAnimationThread.getTimeInterval(frameRate);
                this.mFrameRate = frameRate;
                this.mAnimationThread.setTimeInterval(timeInterval);
                this.mAnimationThread.setFrameRate(frameRate);
            }
            	
        } else {
        	valid = false;
        }
        
        // updates foreground color
        Color cl = valid ? Color.BLACK : Color.LIGHT_GRAY;
        this.mFrameRateSpinner.getFormattedTextField().setForeground(cl);
    }

    /**
     * Called when the escape key is typed.
     *
     */
    protected void onEscKeyTyped() {
        this.cancelAndClose();
        this.notifyToListener(DIALOG_CANCELED_AND_CLOSED);
    }

    /**
     * Cancel all changes and close this dialog.
     *
     */
    public void saveAndClose() {
        this.stopAnimation();
        this.mAnimationThread.saveChanges();
        this.closeSub();
    }

    /**
     * Cancel all changes and close this dialog.
     *
     */
    public void cancelAndClose() {
        this.stopAnimation();
        this.mAnimationThread.cancelChanges();
        this.closeSub();
    }

    /**
     * Close this dialog.
     * 
     */
    public void close() {
        this.stopAnimation();
        this.closeSub();
    }
    
    // stop the animation thread
    private void stopAnimation() {
        this.mAnimationThread.stopAnimation();
        try {
			this.mAnimationThread.join();
		} catch (InterruptedException e) {
		}
    }

    // Restores parameters.
    private void restore() {
		// first, restore the stride
		this.mFrameIndexPanel.setIndices(this.mInitStride);

		// second, restore the index
		this.setIndex(this.mInitFrameIndex, true);

		// frame rate
		this.mFrameRate = this.mInitFrameRate;
		this.mFrameRateSpinner.setValue(Double.valueOf(this.mInitFrameRate));

		// loop play back
		this.mLoopPlaybackFlag = this.mInitLoopPlayback;
		this.mLoopPlaybackToggleButton.setSelected(this.mInitLoopPlayback);
		this.mAnimationThread.setLoopPlaybackEnabled(this.mInitLoopPlayback);
		
        this.notifyToListener(ANIMATION_FRAME_CHANGED);
    }

    private void closeSub() {
    	this.mPlayToggleButton.setSelected(false);
    	this.mReversePlayToggleButton.setSelected(false);
        this.setVisible(false);
    }

    /**
     * A thread of an animation.
     */
    private SGDataAnimationThread mAnimationThread = null;

    /**
     * Frame rate.
     */
    private double mFrameRate = FRAME_RATE_INIT;

    /**
     * A flag for loop playback .
     */
    private boolean mLoopPlaybackFlag = false;

    // Initial frame index.
    private int mInitFrameIndex = -1;

    // Initial stride for frame index.
    private SGIntegerSeriesSet mInitStride = null;

    // Initial value of loop playback flag.
    private boolean mInitLoopPlayback = false;

    // Initial frame rate.
    private double mInitFrameRate = 1.0;
    
    // The array of data.
    private SGData[] mDataArray = null;

    /**
     * Sets the animation data source.
     *
     * @param animation
     *           the animation data source
     */
    public void setAnimation(SGIAnimation[] animations) {
    	if (animations == null) {
    		throw new IllegalArgumentException("animations == null");
    	}
    	if (animations.length == 0) {
    		throw new IllegalArgumentException("animations.length == 0");
    	}
        final int num = animations.length;

    	// creates a thread object
        this.mAnimationThread = new SGDataAnimationThread(animations);
        this.mAnimationThread.addAnimationThreadObserver(this);

        final int frameNumber = this.mAnimationThread.getFrameNumber();

        // setup the variable panel
        SGData[] dataArray = new SGData[num];
        for (int ii = 0; ii < num; ii++) {
        	SGIDataAnimation dataAnimation = (SGIDataAnimation) animations[ii];
            dataArray[ii] = dataAnimation.getData();
        }
        
        boolean[] ncDataFlagArray = new boolean[num];
        for (int ii = 0; ii < num; ii++) {
        	ncDataFlagArray[ii] = SGDataUtility.isNetCDFData(dataArray[ii]);
        }
        Boolean ncDataFlag = SGUtility.checkEquality(ncDataFlagArray);
        final boolean variablePanelVisible = (ncDataFlag != null) ? ncDataFlag : false;
        this.mVariablePanel.setVisible(variablePanelVisible);
        if (variablePanelVisible) {
        	String[] dataSrcNameArray = new String[num];
            for (int ii = 0; ii < num; ii++) {
            	SGIDataAnimation dataAnimation = (SGIDataAnimation) animations[ii];
            	dataSrcNameArray[ii] = dataAnimation.getDataSourceName();
            }
            final String nameCommon = SGUtility.checkEquality(dataSrcNameArray);
            String name = (nameCommon != null) ? nameCommon : "";
            if (name != null) {
                this.mNameLabel.setText(name);
                this.mNameLabel.setToolTipText(name);
            }
            
            String[] unitArray = new String[num];
            for (int ii = 0; ii < num; ii++) {
            	SGIDataAnimation dataAnimation = (SGIDataAnimation) animations[ii];
            	unitArray[ii] = dataAnimation.getDataSourceUnitString();;
            }
            final String unit = SGUtility.checkEquality(unitArray);
            final String unitText;
            final String unitToolTipText;
            if (unit != null && !"".equals(unit)) {
                StringBuffer sb = new StringBuffer();
                sb.append('[');
                sb.append(unit);
                sb.append(']');
                unitText = sb.toString();
                unitToolTipText = unit;
            } else {
            	unitText = "";
            	unitToolTipText = null;
            }
            this.mUnitLabel.setText(unitText);
            this.mUnitLabel.setToolTipText(unitToolTipText);

            Number[] valueArray = new Number[num];
            for (int ii = 0; ii < num; ii++) {
            	SGIDataAnimation dataAnimation = (SGIDataAnimation) animations[ii];
            	valueArray[ii] = dataAnimation.getCurrentValue();
            }
            Number value = (Number) SGUtility.checkEquality(valueArray);
            this.setCurrentValue(value);
        }

        //
        // set values to the components
        //

        // range
        final int initFrameIndex = this.mAnimationThread.getCurrentFrameIndex();
        final int frameEnd = frameNumber - 1;
        this.mSliderPanel.setRange(0, frameEnd, initFrameIndex);

        // frame index
        SGIntegerSeriesSet indices = this.mAnimationThread.getFrameIndices();
        this.mFrameIndexPanel.setLength(frameNumber);
        this.mFrameIndexPanel.setIndices(indices);
        this.updateFrameIndices(indices);

        // frame rate
        final double frameRate = this.mAnimationThread.getFrameRate();
        this.mFrameRateSpinner.setValue(frameRate);

        // loop playback
        final boolean loopPlayback = this.mAnimationThread.isLoopPlaybackEnabled();
        this.mLoopPlaybackToggleButton.setSelected(loopPlayback);

        // set to attribute
        this.mInitFrameIndex = initFrameIndex;
        this.mInitStride = (SGIntegerSeriesSet) indices.clone();
        this.mFrameRate = frameRate;
        this.mLoopPlaybackFlag = loopPlayback;
        this.mDataArray = dataArray;
        
        // set to initial values
        this.mInitFrameRate = this.mFrameRate;
        this.mInitLoopPlayback = this.mLoopPlaybackFlag;

        // packs this dialog
        this.pack();
    }

    /**
     * Called when a thread cycle is looped.
     *
     * @param th
     *          an animation thread
     */
    public void updated(final SGAnimationThread th) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                final int index = th.getCurrentFrameIndex();
                setSliderValue(index);
                mWindow.repaint();
                notifyToListener(ANIMATION_FRAME_CHANGED);
            }
        });
    }
    
    public static final String ANIMATION_FRAME_CHANGED = "Animation Frame Changed";
    
    /**
     * Sets the current value to the components.
     *
     */
    private void setCurrentValue(Number value) {
        final String strValue = (value != null) ? value.toString() : "";
        this.mValueTextField.setText(strValue);
        this.mValueTextField.setToolTipText(strValue);
        this.mValueTextField.setCaretPosition(0);
    }

    public void mouseClicked(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }

    // a temporary flag
    private boolean mTempPlaying = false;

    private SGButton mPressedButton = null;

    /**
     * Called when the mouse press event is invoked.
     *
     * @param e
     *          the mouse event
     */
    public void mousePressed(MouseEvent e) {
        Object source = e.getSource();
        if (source.equals(this.getSlider())) {
            // set to an attribute
            this.mTempPlaying = this.mAnimationThread.isPlaying();

            // pause the animation
            this.pauseAnimation();
        } else if (source.equals(this.mPrevButton) || source.equals(this.mNextButton)) {
        	this.mPressedButton = (SGButton) source;
        	this.mFrameTimer.stop();
        	this.mFrameTimer.start();
        }
    }

    /**
     * Called when the mouse release event is invoked.
     *
     * @param e
     *          the mouse event
     */
    public void mouseReleased(MouseEvent e) {
        Object source = e.getSource();
        if (source.equals(this.getSlider())) {
            if (this.mTempPlaying) {
                // restart the animation
                this.startAnimation(this.mAnimationThread.isPlayingForward());
            }
        } else if (source.equals(this.mPrevButton) || source.equals(this.mNextButton)) {
        	this.mFrameTimer.stop();
        	this.mPressedButton = null;
        }
    }

    /**
     * Called when the window is closing.
     *
     * @param e
     *          the window event
     */
    public void windowClosing(WindowEvent e) {
        super.windowClosing(e);
        this.cancelAndClose();
    }

	@Override
	public void insertUpdate(DocumentEvent e) {
		this.onDocumentUpdated(e);
	}

	@Override
	public void removeUpdate(DocumentEvent e) {
		this.onDocumentUpdated(e);
	}

	@Override
	public void changedUpdate(DocumentEvent e) {
		this.onDocumentUpdated(e);
	}

	private void onDocumentUpdated(DocumentEvent e) {
		Document doc = e.getDocument();
		String text = null;
		try {
			text = doc.getText(0, doc.getLength());
		} catch (BadLocationException e1) {
			return;
		}

		boolean exportEnabled = true;
		Document frameRateDoc = this.mFrameRateSpinner.getFormattedTextField().getDocument();
		if (doc.equals(frameRateDoc)) {
	        this.updateFrameRate(text);
		} else if (this.mFrameIndexPanel.hasDocument(doc)) {
			SGIntegerSeriesSet indices = this.mFrameIndexPanel.getIndices();
			this.updateFrameIndices(indices);
		} else if (doc.equals(this.mFolderTextField.getDocument())) {
			File f = new File(text);
			if (!f.exists()) {
				exportEnabled = false;
			}
			this.mFolderPath = this.mFolderTextField.getText();
		} else if (doc.equals(this.mResolutionTextField.getDocument())) {
			Double res = SGUtilityText.getDouble(text);
			if (res != null) {
				if (res <= 0.0) {
					exportEnabled = false;
				}
			} else {
				exportEnabled = false;
			}
		}
		
		this.mExportButton.setEnabled(exportEnabled);
	}

	private void updateFrameIndices(SGIntegerSeriesSet indices) {
        Color cl = (indices != null) ? Color.BLACK : Color.LIGHT_GRAY;
        this.mFrameIndexPanel.setTextFieldForeground(cl);

		if (indices == null) {
			return;
		}

		// updates the frame indices
		final int len = this.mAnimationThread.getFrameNumber();
		List<Integer> indexList = new ArrayList<Integer>();
		int[] numbers = indices.getNumbers();
		for (int ii = 0; ii < numbers.length; ii++) {
			final int num = numbers[ii];
			if (num < 0 || num >= len) {
				continue;
			}
			indexList.add(numbers[ii]);
		}
		this.mFrameIndexArray = new int[indexList.size()];
		for (int ii = 0; ii < this.mFrameIndexArray.length; ii++) {
			this.mFrameIndexArray[ii] = indexList.get(ii);
		}

		// sets available indices
		this.mSliderPanel.setAvailableIndices(this.mFrameIndexArray);
		this.mAnimationThread.setAvailableFrameIndices(this.mFrameIndexArray);

		// updates the slider value
		final int index = SGUtility.findNearestValue(
				this.mAnimationThread.getCurrentFrameIndex(),
				this.mFrameIndexArray);
		if (index != -1) {
			this.setSliderValue(index);
		}

		// sets to the data
		SGIAnimation[] animations = this.mAnimationThread.getAnimations();
		SGIDataAnimation dataAnimation = (SGIDataAnimation) animations[0];
		SGData data = dataAnimation.getData();
		if (SGDataUtility.isNetCDFData(data)) {
			SGNetCDFData ncData = (SGNetCDFData) data;
			ncData.setTimeStride(indices);
		} else if (SGDataUtility.isMDArrayData(data)) {
			SGMDArrayData mdData = (SGMDArrayData) data;
			mdData.setTimeStride(indices);
		}
	}

	private void setSliderValue(final int index) {
		this.getSlider().setValue(index);
	}
	
	@Override
	public void itemStateChanged(ItemEvent e) {
		
	}
    
    public void setFilePath(String folderPath, String fileName) {
    	this.mFolderPath = folderPath;
    	this.mFolderTextField.setText(folderPath);
    	this.mFileNameTextField.setText(fileName);
    }
    
    public String getFolderPath() {
    	return this.mFolderPath;
    }
    
    public String getFileName() {
    	return this.mFileNameTextField.getText();
    }
    
    private void setCurrentFrameIndex(final int index) {
        this.mAnimationThread.setCurrentFrameIndex(index);
        this.mWindow.repaint();
        this.notifyToListener(ANIMATION_FRAME_CHANGED);
    }

    public SGData[] getDataArray() {
    	return this.mDataArray.clone();
    }
}
