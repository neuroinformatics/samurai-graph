package jp.riken.brain.ni.samuraigraph.figure;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;

import jp.riken.brain.ni.samuraigraph.base.SGAxis;
import jp.riken.brain.ni.samuraigraph.base.SGAxisDateStepValue;
import jp.riken.brain.ni.samuraigraph.base.SGAxisDateValue;
import jp.riken.brain.ni.samuraigraph.base.SGAxisStepValue;
import jp.riken.brain.ni.samuraigraph.base.SGAxisValue;
import jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGDate;
import jp.riken.brain.ni.samuraigraph.base.SGDateInputDialog;
import jp.riken.brain.ni.samuraigraph.base.SGDateUtility;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGPeriodInputDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyDialog;
import jp.riken.brain.ni.samuraigraph.base.SGSpinner;
import jp.riken.brain.ni.samuraigraph.base.SGTextField;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;

import org.joda.time.Period;

/**
 * A dialog to set the properties of axes.
 */
public class SGAxisDialog extends SGPropertyDialog implements SGIAxisConstants, SGIStringConstants {

    // serialVersionUID
    private static final long serialVersionUID = 7038049338687502580L;

    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Axis Properties";

    /**
     * Builds a new dialog.
     * 
     * @param parent
     *           the parent of this dialog
     * @param modal
     *           true to set modal
     */
    public SGAxisDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.initialize();
        
        SwingUtilities.invokeLater(new Runnable() {
        	public void run() {
                setupTab();
            	pack();
        	}
        });
    }
    
    protected void setupTab() {
    	this.mTabbedPane.addTab("Axis Line", this.mAxisLineTabPanel);
    	this.mTabbedPane.addTab("Title", this.mTitleTabPanel);
//    	this.mTabbedPane.addTab("Scale", this.mScaleTabPanel);
    	this.mTabbedPane.addTab("Number", this.mNumberTabPanel);
    	this.mTabbedPane.addTab("Tick Mark", this.mTickMarkTabPanel);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mAxisLineTabPanel = new javax.swing.JPanel();
        mAxisLineSubPanel = new javax.swing.JPanel();
        mAxisLinePanel2 = new javax.swing.JPanel();
        mSpaceAxisLineAndNumbersLabel = new javax.swing.JLabel();
        mSpaceAxisLineAndNumbersSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mAxisLineVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mAxisLinePanel1 = new javax.swing.JPanel();
        mAxisLineWidthLabel = new javax.swing.JLabel();
        mAxisLineWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mAxisLineColorLabel = new javax.swing.JLabel();
        mAxisLineColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mTitleTabPanel = new javax.swing.JPanel();
        mTitleSubPanel = new javax.swing.JPanel();
        mTitleVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mTitleShiftFromCenterLabel = new javax.swing.JLabel();
        mTitleShiftFromCenterSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mSpaceTitleAndNumbersLabel = new javax.swing.JLabel();
        mSpaceTitleAndNumbersSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mTitleFontPanel = new javax.swing.JPanel();
        mTitleFontFamilyNameLabel = new javax.swing.JLabel();
        mTitleFontNameComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mTitleFontStyleLabel = new javax.swing.JLabel();
        mTitleFontStyleComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mTitleFontSizeLabel = new javax.swing.JLabel();
        mTitleFontSizeSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mTitleFontColorLabel = new javax.swing.JLabel();
        mTitleFontColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mTitleTextPanel = new javax.swing.JPanel();
        mTextLabel = new javax.swing.JLabel();
        mTitleTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mNumberTabPanel = new javax.swing.JPanel();
        mNumberSubPanel = new javax.swing.JPanel();
        mNumberFontPanel = new javax.swing.JPanel();
        mNumberFontFamilyNameLabel = new javax.swing.JLabel();
        mNumberFontNameComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mNumberFontStyleLabel = new javax.swing.JLabel();
        mNumberFontStyleComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mNumberFontSizeLabel = new javax.swing.JLabel();
        mNumberFontSizeSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mNumberFontColorLabel = new javax.swing.JLabel();
        mNumberFontColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mNumberVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mNumberExponentPanel = new javax.swing.JPanel();
        mNumberExponentLocationXLabel = new javax.swing.JLabel();
        mNumberExponentLocationXSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mNumberExponentLocationYLabel = new javax.swing.JLabel();
        mNumberExponentLocationYSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mNumberExponentLocationLabel = new javax.swing.JLabel();
        mNumberExponentLabel = new javax.swing.JLabel();
        mNumberExponentSeparator = new javax.swing.JSeparator();
        mNumberAnglePanel = new javax.swing.JPanel();
        mNumberAngleSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mNumberAngleLabel = new javax.swing.JLabel();
        mNumberDatePanel = new javax.swing.JPanel();
        mNumberDateFormatLabel = new javax.swing.JLabel();
        mNumberDateLabel = new javax.swing.JLabel();
        mNumberDateSeparator = new javax.swing.JSeparator();
        mNumberDateFormatComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mTickMarkTabPanel = new javax.swing.JPanel();
        mTickMarkSubPanel = new javax.swing.JPanel();
        mMinorTickMarkPanel = new javax.swing.JPanel();
        mMinorTickMarkNumberLabel = new javax.swing.JLabel();
        mMinorTickMarkNumberSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mMinorTickMarkLengthLabel = new javax.swing.JLabel();
        mMinorTickMarkLengthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mTickMarkCommonPanel = new javax.swing.JPanel();
        mTickMarkColorLabel = new javax.swing.JLabel();
        mTickMarkColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mTickMarkWidthLabel = new javax.swing.JLabel();
        mTickMarkWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mTickMarkBothsidesCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mTickMarkVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mMajorTickMarkPanel = new javax.swing.JPanel();
        mTickMarkLengthLabel = new javax.swing.JLabel();
        mTickMarkLengthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mMainPanel = new jp.riken.brain.ni.samuraigraph.base.SGPropertyPanel();
        mTabbedPane = new javax.swing.JTabbedPane();
        mPropertyHeaderPanel = new javax.swing.JPanel();
        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mScalePanel = new javax.swing.JPanel();
        mScaleMinMaxPanel = new javax.swing.JPanel();
        mMinValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mMaxValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mMinLabel = new javax.swing.JLabel();
        mMaxLabel = new javax.swing.JLabel();
        mMinDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mMaxDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mScaleStepBasePanel = new javax.swing.JPanel();
        mStepLabel = new javax.swing.JLabel();
        mStepTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mBaselineTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mBaselineLabel = new javax.swing.JLabel();
        mAutoTickMarkCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mBaselineDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mStepDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mScalePanel2 = new javax.swing.JPanel();
        mExpSymbolPanel = new javax.swing.JPanel();
        mExponentSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mExponentBaseLabel = new javax.swing.JLabel();
        mExponentCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mIntegerCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mScalePanel1 = new javax.swing.JPanel();
        mLinearRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mLogRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mInvertCoordinatesCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mFigureAxisPanel = new javax.swing.JPanel();
        mAxisVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mAxisShiftLabel = new javax.swing.JLabel();
        mAxisShiftSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mDateModeCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();

        mAxisLineTabPanel.setLayout(new java.awt.GridBagLayout());

        mAxisLineSubPanel.setLayout(new java.awt.GridBagLayout());

        mAxisLinePanel2.setLayout(new java.awt.GridBagLayout());

        mSpaceAxisLineAndNumbersLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSpaceAxisLineAndNumbersLabel.setText("Space between Line and Numbers");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mAxisLinePanel2.add(mSpaceAxisLineAndNumbersLabel, gridBagConstraints);

        mSpaceAxisLineAndNumbersSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSpaceAxisLineAndNumbersSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mAxisLinePanel2.add(mSpaceAxisLineAndNumbersSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        mAxisLineSubPanel.add(mAxisLinePanel2, gridBagConstraints);

        mAxisLineVisibleCheckBox.setText("Visible");
        mAxisLineVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mAxisLineSubPanel.add(mAxisLineVisibleCheckBox, gridBagConstraints);

        mAxisLinePanel1.setLayout(new java.awt.GridBagLayout());

        mAxisLineWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mAxisLineWidthLabel.setText("Line Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mAxisLinePanel1.add(mAxisLineWidthLabel, gridBagConstraints);

        mAxisLineWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mAxisLineWidthSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mAxisLinePanel1.add(mAxisLineWidthSpinner, gridBagConstraints);

        mAxisLineColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mAxisLineColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mAxisLinePanel1.add(mAxisLineColorLabel, gridBagConstraints);

        mAxisLineColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mAxisLinePanel1.add(mAxisLineColorButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        mAxisLineSubPanel.add(mAxisLinePanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        mAxisLineTabPanel.add(mAxisLineSubPanel, gridBagConstraints);

        mTitleTabPanel.setLayout(new java.awt.GridBagLayout());

        mTitleSubPanel.setLayout(new java.awt.GridBagLayout());

        mTitleVisibleCheckBox.setText("Visible");
        mTitleVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mTitleSubPanel.add(mTitleVisibleCheckBox, gridBagConstraints);

        mTitleShiftFromCenterLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTitleShiftFromCenterLabel.setText("Shift from the Center");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 0, 0);
        mTitleSubPanel.add(mTitleShiftFromCenterLabel, gridBagConstraints);

        mTitleShiftFromCenterSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTitleShiftFromCenterSpinner.setMinimumSize(new java.awt.Dimension(72, 22));
        mTitleShiftFromCenterSpinner.setPreferredSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        mTitleSubPanel.add(mTitleShiftFromCenterSpinner, gridBagConstraints);

        mSpaceTitleAndNumbersLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSpaceTitleAndNumbersLabel.setText("Space between Title and Numbers");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mTitleSubPanel.add(mSpaceTitleAndNumbersLabel, gridBagConstraints);

        mSpaceTitleAndNumbersSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSpaceTitleAndNumbersSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        mTitleSubPanel.add(mSpaceTitleAndNumbersSpinner, gridBagConstraints);

        mTitleFontPanel.setLayout(new java.awt.GridBagLayout());

        mTitleFontFamilyNameLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTitleFontFamilyNameLabel.setText("Family");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mTitleFontPanel.add(mTitleFontFamilyNameLabel, gridBagConstraints);

        mTitleFontNameComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mTitleFontPanel.add(mTitleFontNameComboBox, gridBagConstraints);

        mTitleFontStyleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTitleFontStyleLabel.setText("Style");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        mTitleFontPanel.add(mTitleFontStyleLabel, gridBagConstraints);

        mTitleFontStyleComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 0, 0);
        mTitleFontPanel.add(mTitleFontStyleComboBox, gridBagConstraints);

        mTitleFontSizeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTitleFontSizeLabel.setText("Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mTitleFontPanel.add(mTitleFontSizeLabel, gridBagConstraints);

        mTitleFontSizeSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTitleFontSizeSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mTitleFontPanel.add(mTitleFontSizeSpinner, gridBagConstraints);

        mTitleFontColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTitleFontColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 0);
        mTitleFontPanel.add(mTitleFontColorLabel, gridBagConstraints);

        mTitleFontColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 0, 0);
        mTitleFontPanel.add(mTitleFontColorButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mTitleSubPanel.add(mTitleFontPanel, gridBagConstraints);

        mTitleTextPanel.setLayout(new java.awt.GridBagLayout());

        mTextLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTextLabel.setText("Text");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mTitleTextPanel.add(mTextLabel, gridBagConstraints);

        mTitleTextField.setColumns(8);
        mTitleTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTitleTextField.setPreferredSize(new java.awt.Dimension(300, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 300;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mTitleTextPanel.add(mTitleTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mTitleSubPanel.add(mTitleTextPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        mTitleTabPanel.add(mTitleSubPanel, gridBagConstraints);

        mNumberTabPanel.setLayout(new java.awt.GridBagLayout());

        mNumberSubPanel.setLayout(new java.awt.GridBagLayout());

        mNumberFontPanel.setLayout(new java.awt.GridBagLayout());

        mNumberFontFamilyNameLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberFontFamilyNameLabel.setText("Family");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mNumberFontPanel.add(mNumberFontFamilyNameLabel, gridBagConstraints);

        mNumberFontNameComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mNumberFontPanel.add(mNumberFontNameComboBox, gridBagConstraints);

        mNumberFontStyleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberFontStyleLabel.setText("Style");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mNumberFontPanel.add(mNumberFontStyleLabel, gridBagConstraints);

        mNumberFontStyleComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        mNumberFontPanel.add(mNumberFontStyleComboBox, gridBagConstraints);

        mNumberFontSizeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberFontSizeLabel.setText("Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        mNumberFontPanel.add(mNumberFontSizeLabel, gridBagConstraints);

        mNumberFontSizeSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberFontSizeSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mNumberFontPanel.add(mNumberFontSizeSpinner, gridBagConstraints);

        mNumberFontColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberFontColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 0, 0);
        mNumberFontPanel.add(mNumberFontColorLabel, gridBagConstraints);

        mNumberFontColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        mNumberFontPanel.add(mNumberFontColorButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mNumberSubPanel.add(mNumberFontPanel, gridBagConstraints);

        mNumberVisibleCheckBox.setText("Visible");
        mNumberVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mNumberSubPanel.add(mNumberVisibleCheckBox, gridBagConstraints);

        mNumberExponentPanel.setLayout(new java.awt.GridBagLayout());

        mNumberExponentLocationXLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberExponentLocationXLabel.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        mNumberExponentPanel.add(mNumberExponentLocationXLabel, gridBagConstraints);

        mNumberExponentLocationXSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberExponentLocationXSpinner.setMinimumSize(new java.awt.Dimension(72, 22));
        mNumberExponentLocationXSpinner.setPreferredSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mNumberExponentPanel.add(mNumberExponentLocationXSpinner, gridBagConstraints);

        mNumberExponentLocationYLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberExponentLocationYLabel.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        mNumberExponentPanel.add(mNumberExponentLocationYLabel, gridBagConstraints);

        mNumberExponentLocationYSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberExponentLocationYSpinner.setMinimumSize(new java.awt.Dimension(72, 22));
        mNumberExponentLocationYSpinner.setPreferredSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mNumberExponentPanel.add(mNumberExponentLocationYSpinner, gridBagConstraints);

        mNumberExponentLocationLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberExponentLocationLabel.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mNumberExponentPanel.add(mNumberExponentLocationLabel, gridBagConstraints);

        mNumberExponentLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mNumberExponentLabel.setText("Exponent ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mNumberExponentPanel.add(mNumberExponentLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mNumberExponentPanel.add(mNumberExponentSeparator, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mNumberSubPanel.add(mNumberExponentPanel, gridBagConstraints);

        mNumberAnglePanel.setLayout(new java.awt.GridBagLayout());

        mNumberAngleSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberAngleSpinner.setMinimumSize(new java.awt.Dimension(72, 22));
        mNumberAngleSpinner.setPreferredSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mNumberAnglePanel.add(mNumberAngleSpinner, gridBagConstraints);

        mNumberAngleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberAngleLabel.setText("Angle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mNumberAnglePanel.add(mNumberAngleLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mNumberSubPanel.add(mNumberAnglePanel, gridBagConstraints);

        mNumberDatePanel.setLayout(new java.awt.GridBagLayout());

        mNumberDateFormatLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberDateFormatLabel.setText("Format");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mNumberDatePanel.add(mNumberDateFormatLabel, gridBagConstraints);

        mNumberDateLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mNumberDateLabel.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mNumberDatePanel.add(mNumberDateLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        mNumberDatePanel.add(mNumberDateSeparator, gridBagConstraints);

        mNumberDateFormatComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNumberDateFormatComboBox.setPreferredSize(new java.awt.Dimension(170, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        mNumberDatePanel.add(mNumberDateFormatComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mNumberSubPanel.add(mNumberDatePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        mNumberTabPanel.add(mNumberSubPanel, gridBagConstraints);

        mTickMarkTabPanel.setLayout(new java.awt.GridBagLayout());

        mTickMarkSubPanel.setLayout(new java.awt.GridBagLayout());

        mMinorTickMarkPanel.setLayout(new java.awt.GridBagLayout());

        mMinorTickMarkNumberLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMinorTickMarkNumberLabel.setText("Number of Minor Tick");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mMinorTickMarkPanel.add(mMinorTickMarkNumberLabel, gridBagConstraints);

        mMinorTickMarkNumberSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMinorTickMarkNumberSpinner.setMinimumSize(new java.awt.Dimension(72, 22));
        mMinorTickMarkNumberSpinner.setPreferredSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mMinorTickMarkPanel.add(mMinorTickMarkNumberSpinner, gridBagConstraints);

        mMinorTickMarkLengthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMinorTickMarkLengthLabel.setText("Length of Minor Tick");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        mMinorTickMarkPanel.add(mMinorTickMarkLengthLabel, gridBagConstraints);

        mMinorTickMarkLengthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMinorTickMarkLengthSpinner.setMinimumSize(new java.awt.Dimension(72, 22));
        mMinorTickMarkLengthSpinner.setPreferredSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mMinorTickMarkPanel.add(mMinorTickMarkLengthSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mTickMarkSubPanel.add(mMinorTickMarkPanel, gridBagConstraints);

        mTickMarkCommonPanel.setLayout(new java.awt.GridBagLayout());

        mTickMarkColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTickMarkColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        mTickMarkCommonPanel.add(mTickMarkColorLabel, gridBagConstraints);

        mTickMarkColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mTickMarkCommonPanel.add(mTickMarkColorButton, gridBagConstraints);

        mTickMarkWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTickMarkWidthLabel.setText("Line Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mTickMarkCommonPanel.add(mTickMarkWidthLabel, gridBagConstraints);

        mTickMarkWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTickMarkWidthSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mTickMarkCommonPanel.add(mTickMarkWidthSpinner, gridBagConstraints);

        mTickMarkBothsidesCheckBox.setText("Bothsides");
        mTickMarkBothsidesCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        mTickMarkCommonPanel.add(mTickMarkBothsidesCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mTickMarkSubPanel.add(mTickMarkCommonPanel, gridBagConstraints);

        mTickMarkVisibleCheckBox.setText("Visible");
        mTickMarkVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mTickMarkSubPanel.add(mTickMarkVisibleCheckBox, gridBagConstraints);

        mMajorTickMarkPanel.setLayout(new java.awt.GridBagLayout());

        mTickMarkLengthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTickMarkLengthLabel.setText("Length of Major Tick");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mMajorTickMarkPanel.add(mTickMarkLengthLabel, gridBagConstraints);

        mTickMarkLengthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTickMarkLengthSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mMajorTickMarkPanel.add(mTickMarkLengthSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mTickMarkSubPanel.add(mMajorTickMarkPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        mTickMarkTabPanel.add(mTickMarkSubPanel, gridBagConstraints);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mMainPanel.setLayout(new java.awt.GridBagLayout());

        mTabbedPane.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mMainPanel.add(mTabbedPane, gridBagConstraints);

        mPropertyHeaderPanel.setLayout(new java.awt.GridLayout(1, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mMainPanel.add(mPropertyHeaderPanel, gridBagConstraints);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mMainPanel.add(mButtonPanel, gridBagConstraints);

        mScalePanel.setLayout(new java.awt.GridBagLayout());

        mScaleMinMaxPanel.setLayout(new java.awt.GridBagLayout());

        mMinValueTextField.setColumns(27);
        mMinValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMinValueTextField.setMinimumSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mScaleMinMaxPanel.add(mMinValueTextField, gridBagConstraints);

        mMaxValueTextField.setColumns(27);
        mMaxValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMaxValueTextField.setMinimumSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 0);
        mScaleMinMaxPanel.add(mMaxValueTextField, gridBagConstraints);

        mMinLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMinLabel.setText("Min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        mScaleMinMaxPanel.add(mMinLabel, gridBagConstraints);

        mMaxLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMaxLabel.setText("Max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 0, 0);
        mScaleMinMaxPanel.add(mMaxLabel, gridBagConstraints);

        mMinDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mScaleMinMaxPanel.add(mMinDateButton, gridBagConstraints);

        mMaxDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mScaleMinMaxPanel.add(mMaxDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mScalePanel.add(mScaleMinMaxPanel, gridBagConstraints);

        mScaleStepBasePanel.setLayout(new java.awt.GridBagLayout());

        mStepLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mStepLabel.setText("Step");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 0, 0);
        mScaleStepBasePanel.add(mStepLabel, gridBagConstraints);

        mStepTextField.setColumns(26);
        mStepTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mStepTextField.setMinimumSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 0);
        mScaleStepBasePanel.add(mStepTextField, gridBagConstraints);

        mBaselineTextField.setColumns(26);
        mBaselineTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBaselineTextField.setMinimumSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 0);
        mScaleStepBasePanel.add(mBaselineTextField, gridBagConstraints);

        mBaselineLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBaselineLabel.setText("Base");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 0, 0);
        mScaleStepBasePanel.add(mBaselineLabel, gridBagConstraints);

        mAutoTickMarkCheckBox.setText("Auto");
        mAutoTickMarkCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mScaleStepBasePanel.add(mAutoTickMarkCheckBox, gridBagConstraints);

        mBaselineDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mScaleStepBasePanel.add(mBaselineDateButton, gridBagConstraints);

        mStepDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mScaleStepBasePanel.add(mStepDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mScalePanel.add(mScaleStepBasePanel, gridBagConstraints);

        mScalePanel2.setLayout(new java.awt.GridBagLayout());

        mExpSymbolPanel.setLayout(new java.awt.GridBagLayout());

        mExponentSpinner.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        mExponentSpinner.setPreferredSize(new java.awt.Dimension(40, 20));
        mExponentSpinner.setValue(new Integer(0));
        mExponentSpinner.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mExpSymbolPanel.add(mExponentSpinner, gridBagConstraints);

        mExponentBaseLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        mExponentBaseLabel.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mExpSymbolPanel.add(mExponentBaseLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mScalePanel2.add(mExpSymbolPanel, gridBagConstraints);

        mExponentCheckBox.setText("Exponent");
        mExponentCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mScalePanel2.add(mExponentCheckBox, gridBagConstraints);

        mIntegerCheckBox.setText("Integer");
        mIntegerCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mScalePanel2.add(mIntegerCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mScalePanel.add(mScalePanel2, gridBagConstraints);

        mScalePanel1.setLayout(new java.awt.GridBagLayout());

        mLinearRadioButton.setText("Linear");
        mLinearRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mScalePanel1.add(mLinearRadioButton, gridBagConstraints);

        mLogRadioButton.setText("Log");
        mLogRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mScalePanel1.add(mLogRadioButton, gridBagConstraints);

        mInvertCoordinatesCheckBox.setText("Inverted Coordinates");
        mInvertCoordinatesCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mScalePanel1.add(mInvertCoordinatesCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mScalePanel.add(mScalePanel1, gridBagConstraints);

        mFigureAxisPanel.setLayout(new java.awt.GridBagLayout());

        mAxisVisibleCheckBox.setText("Visible");
        mAxisVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 15);
        mFigureAxisPanel.add(mAxisVisibleCheckBox, gridBagConstraints);

        mAxisShiftLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mAxisShiftLabel.setText("Shift");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 0);
        mFigureAxisPanel.add(mAxisShiftLabel, gridBagConstraints);

        mAxisShiftSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mAxisShiftSpinner.setMinimumSize(new java.awt.Dimension(72, 22));
        mAxisShiftSpinner.setPreferredSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        mFigureAxisPanel.add(mAxisShiftSpinner, gridBagConstraints);

        mDateModeCheckBox.setText("Date");
        mDateModeCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 0);
        mFigureAxisPanel.add(mDateModeCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mScalePanel.add(mFigureAxisPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mMainPanel.add(mScalePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(mMainPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mAutoTickMarkCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mAxisLineColorButton;
    private javax.swing.JLabel mAxisLineColorLabel;
    private javax.swing.JPanel mAxisLinePanel1;
    private javax.swing.JPanel mAxisLinePanel2;
    private javax.swing.JPanel mAxisLineSubPanel;
    protected javax.swing.JPanel mAxisLineTabPanel;
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mAxisLineVisibleCheckBox;
    private javax.swing.JLabel mAxisLineWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mAxisLineWidthSpinner;
    javax.swing.JLabel mAxisShiftLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mAxisShiftSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mAxisVisibleCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mBaselineDateButton;
    javax.swing.JLabel mBaselineLabel;
    jp.riken.brain.ni.samuraigraph.base.SGTextField mBaselineTextField;
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mDateModeCheckBox;
    private javax.swing.JPanel mExpSymbolPanel;
    javax.swing.JLabel mExponentBaseLabel;
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mExponentCheckBox;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mExponentSpinner;
    private javax.swing.JPanel mFigureAxisPanel;
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mIntegerCheckBox;
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mInvertCoordinatesCheckBox;
    jp.riken.brain.ni.samuraigraph.base.SGRadioButton mLinearRadioButton;
    jp.riken.brain.ni.samuraigraph.base.SGRadioButton mLogRadioButton;
    protected jp.riken.brain.ni.samuraigraph.base.SGPropertyPanel mMainPanel;
    private javax.swing.JPanel mMajorTickMarkPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mMaxDateButton;
    javax.swing.JLabel mMaxLabel;
    jp.riken.brain.ni.samuraigraph.base.SGTextField mMaxValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mMinDateButton;
    javax.swing.JLabel mMinLabel;
    jp.riken.brain.ni.samuraigraph.base.SGTextField mMinValueTextField;
    private javax.swing.JLabel mMinorTickMarkLengthLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mMinorTickMarkLengthSpinner;
    private javax.swing.JLabel mMinorTickMarkNumberLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mMinorTickMarkNumberSpinner;
    private javax.swing.JPanel mMinorTickMarkPanel;
    private javax.swing.JLabel mNumberAngleLabel;
    private javax.swing.JPanel mNumberAnglePanel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mNumberAngleSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mNumberDateFormatComboBox;
    private javax.swing.JLabel mNumberDateFormatLabel;
    private javax.swing.JLabel mNumberDateLabel;
    private javax.swing.JPanel mNumberDatePanel;
    private javax.swing.JSeparator mNumberDateSeparator;
    private javax.swing.JLabel mNumberExponentLabel;
    private javax.swing.JLabel mNumberExponentLocationLabel;
    private javax.swing.JLabel mNumberExponentLocationXLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mNumberExponentLocationXSpinner;
    private javax.swing.JLabel mNumberExponentLocationYLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mNumberExponentLocationYSpinner;
    private javax.swing.JPanel mNumberExponentPanel;
    private javax.swing.JSeparator mNumberExponentSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mNumberFontColorButton;
    private javax.swing.JLabel mNumberFontColorLabel;
    private javax.swing.JLabel mNumberFontFamilyNameLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mNumberFontNameComboBox;
    private javax.swing.JPanel mNumberFontPanel;
    private javax.swing.JLabel mNumberFontSizeLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mNumberFontSizeSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mNumberFontStyleComboBox;
    private javax.swing.JLabel mNumberFontStyleLabel;
    private javax.swing.JPanel mNumberSubPanel;
    protected javax.swing.JPanel mNumberTabPanel;
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mNumberVisibleCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    protected javax.swing.JPanel mPropertyHeaderPanel;
    private javax.swing.JPanel mScaleMinMaxPanel;
    private javax.swing.JPanel mScalePanel;
    private javax.swing.JPanel mScalePanel1;
    private javax.swing.JPanel mScalePanel2;
    private javax.swing.JPanel mScaleStepBasePanel;
    private javax.swing.JLabel mSpaceAxisLineAndNumbersLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mSpaceAxisLineAndNumbersSpinner;
    private javax.swing.JLabel mSpaceTitleAndNumbersLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mSpaceTitleAndNumbersSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mStepDateButton;
    javax.swing.JLabel mStepLabel;
    jp.riken.brain.ni.samuraigraph.base.SGTextField mStepTextField;
    protected javax.swing.JTabbedPane mTabbedPane;
    javax.swing.JLabel mTextLabel;
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mTickMarkBothsidesCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mTickMarkColorButton;
    private javax.swing.JLabel mTickMarkColorLabel;
    private javax.swing.JPanel mTickMarkCommonPanel;
    private javax.swing.JLabel mTickMarkLengthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mTickMarkLengthSpinner;
    private javax.swing.JPanel mTickMarkSubPanel;
    protected javax.swing.JPanel mTickMarkTabPanel;
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mTickMarkVisibleCheckBox;
    private javax.swing.JLabel mTickMarkWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mTickMarkWidthSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mTitleFontColorButton;
    private javax.swing.JLabel mTitleFontColorLabel;
    private javax.swing.JLabel mTitleFontFamilyNameLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mTitleFontNameComboBox;
    private javax.swing.JPanel mTitleFontPanel;
    private javax.swing.JLabel mTitleFontSizeLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mTitleFontSizeSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mTitleFontStyleComboBox;
    private javax.swing.JLabel mTitleFontStyleLabel;
    private javax.swing.JLabel mTitleShiftFromCenterLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mTitleShiftFromCenterSpinner;
    private javax.swing.JPanel mTitleSubPanel;
    protected javax.swing.JPanel mTitleTabPanel;
    jp.riken.brain.ni.samuraigraph.base.SGTextField mTitleTextField;
    private javax.swing.JPanel mTitleTextPanel;
    jp.riken.brain.ni.samuraigraph.base.SGCheckBox mTitleVisibleCheckBox;
    // End of variables declaration//GEN-END:variables

    private JRadioButton mScaleNoSelectedRadioButton = new JRadioButton();

//    private JRadioButton mDirectionNoSelectedRadioButton = new JRadioButton();

    private SGComponentGroup mAxisLineComponentGroup = new SGComponentGroup();

    private SGComponentGroup mTitleComponentGroup = new SGComponentGroup();

    private SGComponentGroup mTickMarkComponentGroup = new SGComponentGroup();

    private SGComponentGroup mScaleTypeComponentGroup = new SGComponentGroup();

    private SGComponentGroup mNumberDateComponentGroup = new SGComponentGroup();

    private SGComponentGroup mExponentComponentGroup = new SGComponentGroup();

    private SGComponentGroup mNumberComponentGroup = new SGComponentGroup();

    private SGComponentGroup mNoNumberDateComponentGroup = new SGComponentGroup();

    private SGComponentGroup mAxisVisibleComponentGroup = new SGComponentGroup();
    
    private SGComponentGroup mAutoScaleComponentGroup = new SGComponentGroup();

    private boolean initProperty() {

        // set the title
        this.setTitle(SGAxisDialog.TITLE);

        // create button groups
        ButtonGroup scaleButtonGroup = new ButtonGroup();
        scaleButtonGroup.add(this.mLinearRadioButton);
        scaleButtonGroup.add(this.mLogRadioButton);
        scaleButtonGroup.add(this.mScaleNoSelectedRadioButton);

        // add an action listener
        this.addActionListener(this);
        
        // axis line width
        this.mAxisLineWidthSpinner.initProperties(SGUtility.getLineWidthSpinnerNumberModel(),
                LINE_WIDTH_UNIT, LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);
        
        // space between axis line and numbers
        this.mSpaceAxisLineAndNumbersSpinner.initProperties(new SpinnerNumberModel(
                0.0, SPACE_BETWEEN_LINE_AND_NUMBERS_MIN, SPACE_BETWEEN_LINE_AND_NUMBERS_MAX,
                SPACE_STEP), SPACE_UNIT,
                SPACE_FRAC_DIGIT_MIN, SPACE_FRAC_DIGIT_MAX);

        // space between title and numbers
        this.mSpaceTitleAndNumbersSpinner.initProperties(new SpinnerNumberModel(
                0.0, SPACE_BETWEEN_TITLE_AND_NUMBERS_MIN, SPACE_BETWEEN_TITLE_AND_NUMBERS_MAX,
                SPACE_STEP), SPACE_UNIT,
                SPACE_FRAC_DIGIT_MIN, SPACE_FRAC_DIGIT_MAX);
        
        // shift from the center
        this.mTitleShiftFromCenterSpinner.initProperties(new SpinnerNumberModel(
                0.0, TITLE_SHIFT_MIN, TITLE_SHIFT_MAX,
                TITLE_SHIFT_STEP), TITLE_SHIFT_UNIT,
                TITLE_SHIFT_FRAC_DIGIT_MIN, TITLE_SHIFT_FRAC_DIGIT_MAX);
        
        // title font size
        this.mTitleFontSizeSpinner.initProperties(SGUtility.getFontSizeSpinnerNumberModel(),
        		FONT_SIZE_UNIT, FONT_SIZE_FRAC_DIGIT_MIN, FONT_SIZE_FRAC_DIGIT_MAX);

        // angle
        this.mNumberAngleSpinner.initProperties(new SpinnerNumberModel(0.0,
                STRING_ANGLE_MIN, STRING_ANGLE_MAX, STRING_ANGLE_STEP), degree,
                STRING_ANGLE_FRAC_DIFIT_MIN, STRING_ANGLE_FRAC_DIFIT_MAX);

        // exponent
		this.mExponentSpinner.initProperties(new SpinnerNumberModel(0.0,
				AXIS_EXPONENT_MIN, AXIS_EXPONENT_MAX, AXIS_EXPONENT_STEP),
				null, 0, 0);

        // exponent location
        this.mNumberExponentLocationXSpinner.initProperties(new SpinnerNumberModel(
                0.0, EXPONENT_LOCATION_MIN, EXPONENT_LOCATION_MAX,
                EXPONENT_LOCATION_STEP), EXPONENT_LOCATION_UNIT,
                EXPONENT_LOCATION_FRAC_DIGIT_MIN, EXPONENT_LOCATION_FRAC_DIGIT_MAX);
        this.mNumberExponentLocationYSpinner.initProperties(new SpinnerNumberModel(
                0.0, EXPONENT_LOCATION_MIN, EXPONENT_LOCATION_MAX,
                EXPONENT_LOCATION_STEP), EXPONENT_LOCATION_UNIT,
                EXPONENT_LOCATION_FRAC_DIGIT_MIN, EXPONENT_LOCATION_FRAC_DIGIT_MAX);
        
        // number font size
        this.mNumberFontSizeSpinner.initProperties(SGUtility.getFontSizeSpinnerNumberModel(),
        		FONT_SIZE_UNIT, FONT_SIZE_FRAC_DIGIT_MIN, FONT_SIZE_FRAC_DIGIT_MAX);
        
        // tick mark width
        this.mTickMarkWidthSpinner.initProperties(SGUtility.getLineWidthSpinnerNumberModel(),
                LINE_WIDTH_UNIT, LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);
        
        // tick mark length
        this.mTickMarkLengthSpinner.initProperties(new SpinnerNumberModel(
                0.10, TICK_MARK_LENGTH_MIN, TICK_MARK_LENGTH_MAX,
                TICK_MARK_LENGTH_STEP), TICK_MARK_LENGTH_UNIT,
                TICK_MARK_LENGTH_FRAC_DIFIT_MIN,
                TICK_MARK_LENGTH_FRAC_DIFIT_MAX);
        
        // minor tick mark number
        this.mMinorTickMarkNumberSpinner.initProperties(new SpinnerNumberModel(0.0, 
        		MINOR_TICK_MARK_NUMBER_MIN, MINOR_TICK_MARK_NUMBER_MAX, MINOR_TICK_MARK_NUMBER_STEP),
        		null, 0, 0);

		// minor tick mark length
		this.mMinorTickMarkLengthSpinner.initProperties(new SpinnerNumberModel(
				0.10, MINOR_TICK_MARK_LENGTH_MIN, MINOR_TICK_MARK_LENGTH_MAX,
				MINOR_TICK_MARK_LENGTH_STEP), TICK_MARK_LENGTH_UNIT,
				MINOR_TICK_MARK_LENGTH_FRAC_DIGIT_MIN,
				MINOR_TICK_MARK_LENGTH_FRAC_DIGIT_MAX);
        
        // shift
        this.mAxisShiftSpinner.initProperties(new SpinnerNumberModel(0.0,
        		AXIS_SHIFT_MIN, AXIS_SHIFT_MAX, AXIS_SHIFT_STEP), AXIS_SHIFT_UNIT, 
        		AXIS_SHIFT_FRAC_DIGIT_MIN, AXIS_SHIFT_FRAC_DIGIT_MAX);
        
        // set up the combo boxes
        this.initFontFamilyNameComboBox(this.mTitleFontNameComboBox);
        this.initFontFamilyNameComboBox(this.mNumberFontNameComboBox);
        this.initFontStyleComboBox(this.mTitleFontStyleComboBox);
        this.initFontStyleComboBox(this.mNumberFontStyleComboBox);
        this.initDateFormatComboBox(this.mNumberDateFormatComboBox);

        // sets the description
        this.mAxisShiftSpinner.setDescription("Shift");
        this.mAxisLineWidthSpinner.setDescription("Axis Line-> " + this.mAxisLineWidthLabel.getText());
        this.mSpaceAxisLineAndNumbersSpinner.setDescription("Axis Line-> " + this.mSpaceAxisLineAndNumbersLabel.getText());
        this.mTitleTextField.setDescription("Title-> " + this.mTextLabel.getText());
        this.mSpaceTitleAndNumbersSpinner.setDescription("Title-> " + this.mSpaceTitleAndNumbersLabel.getText());
        this.mTitleShiftFromCenterSpinner.setDescription("Title-> " + this.mTitleShiftFromCenterLabel.getText());
        this.mTitleFontSizeSpinner.setDescription("Title-> " + this.mTitleFontSizeLabel.getText());
        this.mMinValueTextField.setDescription("Scale-> " + this.mMinLabel.getText());
        this.mMaxValueTextField.setDescription("Scale-> " + this.mMaxLabel.getText());
        this.mStepTextField.setDescription("Scale-> " + this.mStepLabel.getText());
        this.mBaselineTextField.setDescription("Scale-> " + this.mBaselineLabel.getText());
        this.mExponentSpinner.setDescription("Scale-> " + this.mExponentCheckBox.getText());
        this.mNumberAngleSpinner.setDescription("Number-> " + this.mNumberAngleLabel.getText());
        this.mNumberExponentLocationXSpinner.setDescription("Number-> Exponent " + this.mNumberExponentLocationXLabel.getText());
        this.mNumberExponentLocationYSpinner.setDescription("Number-> Exponent " + this.mNumberExponentLocationYLabel.getText());
        this.mNumberFontSizeSpinner.setDescription("Number-> " + this.mNumberFontSizeLabel.getText());
        this.mNumberDateFormatComboBox.setDescription("Number-> " + this.mNumberDateFormatLabel.getText());
        this.mTickMarkWidthSpinner.setDescription("Tick Mark-> " + this.mTickMarkWidthLabel.getText());
        this.mTickMarkLengthSpinner.setDescription("Tick Mark-> " + this.mTickMarkLengthLabel.getText());
        this.mMinorTickMarkNumberSpinner.setDescription("Tick Mark-> " + this.mMinorTickMarkNumberLabel.getText());
        this.mMinorTickMarkLengthSpinner.setDescription("Tick Mark-> " + this.mMinorTickMarkLengthLabel.getText());

        // creates a map of component groups
        Map<Component, SGComponentGroupElement> compMap = new HashMap<Component, SGComponentGroupElement>();

        this.addComponentGroupMap(this.mAxisVisibleCheckBox, compMap);

        // shift
        this.addComponentGroupMap(this.mAxisShiftLabel, compMap);
        this.addComponentGroupMap(this.mAxisShiftSpinner, compMap);
        
        // axis line
        this.addComponentGroupMap(this.mAxisLineVisibleCheckBox, compMap);
        this.addComponentGroupMap(this.mAxisLineWidthLabel, compMap);
        this.addComponentGroupMap(this.mAxisLineWidthSpinner, compMap);
        this.addComponentGroupMap(this.mAxisLineColorLabel, compMap);
        this.addComponentGroupMap(this.mAxisLineColorButton, compMap);
        this.addComponentGroupMap(this.mSpaceAxisLineAndNumbersLabel, compMap);
        this.addComponentGroupMap(this.mSpaceAxisLineAndNumbersSpinner, compMap);
        
        // title
        this.addComponentGroupMap(this.mTitleVisibleCheckBox, compMap);
        this.addComponentGroupMap(this.mTextLabel, compMap);
        this.addComponentGroupMap(this.mTitleTextField, compMap);
        this.addComponentGroupMap(this.mSpaceTitleAndNumbersLabel, compMap);
        this.addComponentGroupMap(this.mSpaceTitleAndNumbersSpinner, compMap);
        this.addComponentGroupMap(this.mTitleShiftFromCenterLabel, compMap);
        this.addComponentGroupMap(this.mTitleShiftFromCenterSpinner, compMap);
        this.addComponentGroupMap(this.mTitleFontFamilyNameLabel, compMap);
        this.addComponentGroupMap(this.mTitleFontNameComboBox, compMap);
        this.addComponentGroupMap(this.mTitleFontSizeLabel, compMap);
        this.addComponentGroupMap(this.mTitleFontSizeSpinner, compMap);
        this.addComponentGroupMap(this.mTitleFontStyleLabel, compMap);
        this.addComponentGroupMap(this.mTitleFontStyleComboBox, compMap);
        this.addComponentGroupMap(this.mTitleFontColorLabel, compMap);
        this.addComponentGroupMap(this.mTitleFontColorButton, compMap);

        // scale
        this.addComponentGroupMap(this.mIntegerCheckBox, compMap);
        this.addComponentGroupMap(this.mLinearRadioButton, compMap);
        this.addComponentGroupMap(this.mLogRadioButton, compMap);
        this.addComponentGroupMap(this.mInvertCoordinatesCheckBox, compMap);
        this.addComponentGroupMap(this.mMinLabel, compMap);
        this.addComponentGroupMap(this.mMinValueTextField, compMap);
        this.addComponentGroupMap(this.mMaxLabel, compMap);
        this.addComponentGroupMap(this.mMaxValueTextField, compMap);
        this.addComponentGroupMap(this.mAutoTickMarkCheckBox, compMap);
        this.addComponentGroupMap(this.mBaselineLabel, compMap);
        this.addComponentGroupMap(this.mBaselineTextField, compMap);
        this.addComponentGroupMap(this.mBaselineDateButton, compMap);
        this.addComponentGroupMap(this.mStepLabel, compMap);
        this.addComponentGroupMap(this.mStepTextField, compMap);
        this.addComponentGroupMap(this.mStepDateButton, compMap);
        this.addComponentGroupMap(this.mExponentCheckBox, compMap);
        this.addComponentGroupMap(this.mExponentBaseLabel, compMap);
        this.addComponentGroupMap(this.mExponentSpinner, compMap);
        this.addComponentGroupMap(this.mMinDateButton, compMap);
        this.addComponentGroupMap(this.mMaxDateButton, compMap);
        this.addComponentGroupMap(this.mBaselineDateButton, compMap);
        this.addComponentGroupMap(this.mStepDateButton, compMap);

        // number
        this.addComponentGroupMap(this.mNumberVisibleCheckBox, compMap);
        this.addComponentGroupMap(this.mNumberAngleLabel, compMap);
        this.addComponentGroupMap(this.mNumberAngleSpinner, compMap);
        this.addComponentGroupMap(this.mNumberExponentLabel, compMap);
        this.addComponentGroupMap(this.mNumberExponentLocationLabel, compMap);
        this.addComponentGroupMap(this.mNumberExponentLocationXLabel, compMap);
        this.addComponentGroupMap(this.mNumberExponentLocationXSpinner, compMap);
        this.addComponentGroupMap(this.mNumberExponentLocationYLabel, compMap);
        this.addComponentGroupMap(this.mNumberExponentLocationYSpinner, compMap);
        this.addComponentGroupMap(this.mNumberFontFamilyNameLabel, compMap);
        this.addComponentGroupMap(this.mNumberFontNameComboBox, compMap);
        this.addComponentGroupMap(this.mNumberFontSizeLabel, compMap);
        this.addComponentGroupMap(this.mNumberFontSizeSpinner, compMap);
        this.addComponentGroupMap(this.mNumberFontStyleLabel, compMap);
        this.addComponentGroupMap(this.mNumberFontStyleComboBox, compMap);
        this.addComponentGroupMap(this.mNumberFontColorLabel, compMap);
        this.addComponentGroupMap(this.mNumberFontColorButton, compMap);
        this.addComponentGroupMap(this.mNumberDateLabel, compMap);
        this.addComponentGroupMap(this.mNumberDateFormatLabel, compMap);
        this.addComponentGroupMap(this.mNumberDateFormatComboBox, compMap);

        // tick mark
        this.addComponentGroupMap(this.mTickMarkVisibleCheckBox, compMap);
        this.addComponentGroupMap(this.mTickMarkBothsidesCheckBox, compMap);
        this.addComponentGroupMap(this.mTickMarkWidthLabel, compMap);
        this.addComponentGroupMap(this.mTickMarkWidthSpinner, compMap);
        this.addComponentGroupMap(this.mTickMarkLengthLabel, compMap);
        this.addComponentGroupMap(this.mTickMarkLengthSpinner, compMap);
        this.addComponentGroupMap(this.mMinorTickMarkLengthLabel, compMap);
        this.addComponentGroupMap(this.mMinorTickMarkLengthSpinner, compMap);
        this.addComponentGroupMap(this.mMinorTickMarkNumberLabel, compMap);
        this.addComponentGroupMap(this.mMinorTickMarkNumberSpinner, compMap);
        this.addComponentGroupMap(this.mTickMarkColorLabel, compMap);
        this.addComponentGroupMap(this.mTickMarkColorButton, compMap);

        List<SGComponentGroupElement> axisLineComponents = new ArrayList<SGComponentGroupElement>();
        axisLineComponents.add(compMap.get(this.mAxisLineWidthLabel));
        axisLineComponents.add(compMap.get(this.mAxisLineWidthSpinner));
        axisLineComponents.add(compMap.get(this.mAxisLineColorLabel));
        axisLineComponents.add(compMap.get(this.mAxisLineColorButton));
        axisLineComponents.add(compMap.get(this.mSpaceAxisLineAndNumbersLabel));
        axisLineComponents.add(compMap.get(this.mSpaceAxisLineAndNumbersSpinner));

        List<SGComponentGroupElement> titleComponents = new ArrayList<SGComponentGroupElement>();
        titleComponents.add(compMap.get(this.mTextLabel));
        titleComponents.add(compMap.get(this.mTitleTextField));
        titleComponents.add(compMap.get(this.mSpaceTitleAndNumbersLabel));
        titleComponents.add(compMap.get(this.mSpaceTitleAndNumbersSpinner));
        titleComponents.add(compMap.get(this.mTitleShiftFromCenterLabel));
        titleComponents.add(compMap.get(this.mTitleShiftFromCenterSpinner));
        titleComponents.add(compMap.get(this.mTitleFontFamilyNameLabel));
        titleComponents.add(compMap.get(this.mTitleFontNameComboBox));
        titleComponents.add(compMap.get(this.mTitleFontSizeLabel));
        titleComponents.add(compMap.get(this.mTitleFontSizeSpinner));
        titleComponents.add(compMap.get(this.mTitleFontStyleLabel));
        titleComponents.add(compMap.get(this.mTitleFontStyleComboBox));
        titleComponents.add(compMap.get(this.mTitleFontColorLabel));
        titleComponents.add(compMap.get(this.mTitleFontColorButton));

        List<SGComponentGroupElement> exponentComponents = new ArrayList<SGComponentGroupElement>();
        exponentComponents.add(compMap.get(this.mExponentBaseLabel));
        exponentComponents.add(compMap.get(this.mExponentSpinner));

        List<SGComponentGroupElement> numberComponents = new ArrayList<SGComponentGroupElement>();
        numberComponents.add(compMap.get(this.mNumberAngleLabel));
        numberComponents.add(compMap.get(this.mNumberAngleSpinner));
        numberComponents.add(compMap.get(this.mNumberExponentLabel));
        numberComponents.add(compMap.get(this.mNumberExponentLocationLabel));
        numberComponents.add(compMap.get(this.mNumberExponentLocationXLabel));
        numberComponents.add(compMap.get(this.mNumberExponentLocationXSpinner));
        numberComponents.add(compMap.get(this.mNumberExponentLocationYLabel));
        numberComponents.add(compMap.get(this.mNumberExponentLocationYSpinner));
        numberComponents.add(compMap.get(this.mNumberFontFamilyNameLabel));
        numberComponents.add(compMap.get(this.mNumberFontNameComboBox));
        numberComponents.add(compMap.get(this.mNumberFontSizeLabel));
        numberComponents.add(compMap.get(this.mNumberFontSizeSpinner));
        numberComponents.add(compMap.get(this.mNumberFontStyleLabel));
        numberComponents.add(compMap.get(this.mNumberFontStyleComboBox));
        numberComponents.add(compMap.get(this.mNumberFontColorLabel));
        numberComponents.add(compMap.get(this.mNumberFontColorButton));
        numberComponents.add(compMap.get(this.mNumberDateLabel));
        numberComponents.add(compMap.get(this.mNumberDateFormatLabel));
        numberComponents.add(compMap.get(this.mNumberDateFormatComboBox));

        List<SGComponentGroupElement> tickMarkComponents = new ArrayList<SGComponentGroupElement>();
        tickMarkComponents.add(compMap.get(this.mTickMarkBothsidesCheckBox));
        tickMarkComponents.add(compMap.get(this.mTickMarkWidthLabel));
        tickMarkComponents.add(compMap.get(this.mTickMarkWidthSpinner));
        tickMarkComponents.add(compMap.get(this.mTickMarkLengthLabel));
        tickMarkComponents.add(compMap.get(this.mTickMarkLengthSpinner));
        tickMarkComponents.add(compMap.get(this.mMinorTickMarkLengthLabel));
        tickMarkComponents.add(compMap.get(this.mMinorTickMarkLengthSpinner));
        tickMarkComponents.add(compMap.get(this.mMinorTickMarkNumberLabel));
        tickMarkComponents.add(compMap.get(this.mMinorTickMarkNumberSpinner));
        tickMarkComponents.add(compMap.get(this.mTickMarkColorLabel));
        tickMarkComponents.add(compMap.get(this.mTickMarkColorButton));

        List<SGComponentGroupElement> scaleComponents = new ArrayList<SGComponentGroupElement>();
        scaleComponents.add(compMap.get(this.mAutoTickMarkCheckBox));
        scaleComponents.add(compMap.get(this.mBaselineLabel));
        scaleComponents.add(compMap.get(this.mBaselineTextField));
        scaleComponents.add(compMap.get(this.mBaselineDateButton));
        scaleComponents.add(compMap.get(this.mStepLabel));
        scaleComponents.add(compMap.get(this.mStepTextField));
        scaleComponents.add(compMap.get(this.mStepDateButton));

        List<SGComponentGroupElement> dateComponents = new ArrayList<SGComponentGroupElement>();
        dateComponents.add(compMap.get(this.mNumberDateLabel));
        dateComponents.add(compMap.get(this.mNumberDateFormatLabel));
        dateComponents.add(compMap.get(this.mNumberDateFormatComboBox));
        dateComponents.add(compMap.get(this.mMinDateButton));
        dateComponents.add(compMap.get(this.mMaxDateButton));
        dateComponents.add(compMap.get(this.mBaselineDateButton));
        dateComponents.add(compMap.get(this.mStepDateButton));

        List<SGComponentGroupElement> noDateComponents = new ArrayList<SGComponentGroupElement>();
//        noDateComponents.add(compMap.get(this.mLinearRadioButton));
//        noDateComponents.add(compMap.get(this.mLogRadioButton));
        noDateComponents.add(compMap.get(this.mIntegerCheckBox));
        noDateComponents.add(compMap.get(this.mExponentCheckBox));
        noDateComponents.add(compMap.get(this.mExponentBaseLabel));
        noDateComponents.add(compMap.get(this.mExponentSpinner));

        List<SGComponentGroupElement> axisVisibleComponents = new ArrayList<SGComponentGroupElement>();
        axisVisibleComponents.add(compMap.get(this.mAxisShiftLabel));
        axisVisibleComponents.add(compMap.get(this.mAxisShiftSpinner));
        axisVisibleComponents.add(compMap.get(this.mAxisLineWidthLabel));
        axisVisibleComponents.add(compMap.get(this.mAxisLineWidthSpinner));
        axisVisibleComponents.add(compMap.get(this.mAxisLineColorLabel));
        axisVisibleComponents.add(compMap.get(this.mAxisLineColorButton));
        axisVisibleComponents.add(compMap.get(this.mSpaceAxisLineAndNumbersLabel));
        axisVisibleComponents.add(compMap.get(this.mSpaceAxisLineAndNumbersSpinner));
        axisVisibleComponents.add(compMap.get(this.mTitleVisibleCheckBox));
        axisVisibleComponents.addAll(titleComponents);
        axisVisibleComponents.add(compMap.get(this.mMinLabel));
        axisVisibleComponents.add(compMap.get(this.mMinValueTextField));
        axisVisibleComponents.add(compMap.get(this.mMaxLabel));
        axisVisibleComponents.add(compMap.get(this.mMaxValueTextField));
        axisVisibleComponents.add(compMap.get(this.mLinearRadioButton));
        axisVisibleComponents.add(compMap.get(this.mLogRadioButton));
        axisVisibleComponents.add(compMap.get(this.mInvertCoordinatesCheckBox));
        axisVisibleComponents.add(compMap.get(this.mAutoTickMarkCheckBox));
        axisVisibleComponents.add(compMap.get(this.mStepLabel));
        axisVisibleComponents.add(compMap.get(this.mStepTextField));
        axisVisibleComponents.add(compMap.get(this.mBaselineLabel));
        axisVisibleComponents.add(compMap.get(this.mBaselineTextField));
        axisVisibleComponents.add(compMap.get(this.mNumberVisibleCheckBox));
        axisVisibleComponents.addAll(numberComponents);
        axisVisibleComponents.add(compMap.get(this.mTickMarkVisibleCheckBox));
        axisVisibleComponents.addAll(tickMarkComponents);
        
        List<SGComponentGroupElement> autoScaleComponents = new ArrayList<SGComponentGroupElement>();
        autoScaleComponents.add(compMap.get(this.mBaselineLabel));
        autoScaleComponents.add(compMap.get(this.mBaselineTextField));
        autoScaleComponents.add(compMap.get(this.mBaselineDateButton));
        autoScaleComponents.add(compMap.get(this.mStepLabel));
        autoScaleComponents.add(compMap.get(this.mStepTextField));
        autoScaleComponents.add(compMap.get(this.mStepDateButton));

        // add elements to component groups
        this.mAxisLineComponentGroup.addElement(axisLineComponents);
        this.mTitleComponentGroup.addElement(titleComponents);
        this.mTickMarkComponentGroup.addElement(tickMarkComponents);
        this.mScaleTypeComponentGroup.addElement(scaleComponents);
        this.mExponentComponentGroup.addElement(exponentComponents);
        this.mNumberComponentGroup.addElement(numberComponents);
        this.mAxisVisibleComponentGroup.addElement(axisVisibleComponents);
        this.mAutoScaleComponentGroup.addElement(autoScaleComponents);
        this.mNumberDateComponentGroup.addElement(dateComponents);
        this.mNoNumberDateComponentGroup.addElement(noDateComponents);
        
        // sets the calendar icon
        this.setCalendarIcon(this.mMinDateButton);
        this.setCalendarIcon(this.mMaxDateButton);
        this.setCalendarIcon(this.mBaselineDateButton);
        this.setCalendarIcon(this.mStepDateButton);

        return true;
    }

    // The flag whether this object is already disposed of.
    private boolean mDisposed = false;

    // an error message for invalid axis range
    static final String MSG_RANGE_ERROR = "Axis range is invalid.";

    // an error message for zero step value
    static final String MSG_STEP_ERROR = "Zero value is set to the step value.";

    /**
     * Returns whether this object is already disposed of.
     * 
     * @return true if this object is already disposed of
     */
    public boolean isDisposed() {
    	return this.mDisposed;
    }

    /**
     * Returns the OK button.
     * @return
     *        the OK button
     */
    protected JButton getOKButton() {
        return this.mOKButton;
    }
    
    /**
     * Returns the cancel button.
     * @return
     *        the cancel button
     */
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    /**
     * Returns the preview button.
     * @return
     *        the preview button
     */
    protected JButton getPreviewButton() {
        return this.mPreviewButton;
    }

    /**
     * Returns a list of color selection buttons.
     * 
     * @return a list of color selection buttons
     */
	@Override
	public List<SGColorSelectionButton> getColorSelectionButtonsList() {
		List<SGColorSelectionButton> list = new ArrayList<SGColorSelectionButton>();
		list.add(this.mAxisLineColorButton);
		list.add(this.mTitleFontColorButton);
		list.add(this.mNumberFontColorButton);
		list.add(this.mTickMarkColorButton);
		return list;
	}

    /**
     * Returns a list of text field components.
     * 
     * @return a list of text field components
     */
	@Override
	public List<JTextField> getTextFieldComponentsList() {
        List<JTextField> list = new ArrayList<JTextField>(this.getFormattedTextFieldsListFromSpinners());
        list.addAll(this.getAxisNumberTextFieldList());
        list.add(this.mTitleTextField);
		return list;
	}

    /**
     * Returns a list of text fields components to input axis number.
     * 
     * @return a list of text field components to input axis number
     */
	@Override
	public List<SGTextField> getAxisNumberTextFieldList() {
		List<SGTextField> list = new ArrayList<SGTextField>();
        list.add(this.mMinValueTextField);
        list.add(this.mMaxValueTextField);
        list.add(this.mBaselineTextField);
        list.add(this.mStepTextField);
		return list;
	}
	
	public List<SGTextField> getDateNumberTextFieldList() {
		List<SGTextField> list = new ArrayList<SGTextField>();
        list.add(this.mMinValueTextField);
        list.add(this.mMaxValueTextField);
        list.add(this.mBaselineTextField);
		return list;
	}
	
    /**
     * Returns a list of spinner components.
     * 
     * @return a list of spinner components
     */
	@Override
	public List<SGSpinner> getSpinnerList() {
		List<SGSpinner> list = new ArrayList<SGSpinner>();
        list.add(this.mAxisShiftSpinner);
		list.add(this.mAxisLineWidthSpinner);
		list.add(this.mSpaceAxisLineAndNumbersSpinner);
		list.add(this.mSpaceTitleAndNumbersSpinner);
		list.add(this.mTitleShiftFromCenterSpinner);
		list.add(this.mTitleFontSizeSpinner);
		list.add(this.mNumberAngleSpinner);
        list.add(this.mExponentSpinner);
        list.add(this.mNumberExponentLocationXSpinner);
        list.add(this.mNumberExponentLocationYSpinner);
        list.add(this.mNumberFontSizeSpinner);
        list.add(this.mTickMarkWidthSpinner);
        list.add(this.mTickMarkLengthSpinner);
        list.add(this.mMinorTickMarkNumberSpinner);
        list.add(this.mMinorTickMarkLengthSpinner);
		return list;
	}

    /**
     * Overrode this method to check the input values.
     * 
     * @return true if all input values are valid
     */
    protected boolean hasValidInputValues() {
        boolean valid = true;
        if (super.hasValidInputValues() == false) {
            valid = false;
        }
        
        List<SGTextField> dateNumberTextFieldList = this.getDateNumberTextFieldList();
        for (int ii = 0; ii < dateNumberTextFieldList.size(); ii++) {
        	SGTextField tf = dateNumberTextFieldList.get(ii);
            if (this.hasValidNumber(tf, false) == false) {
            	if (this.hasValidDate(tf, true) == false) {
            		valid = false;
            	}
            }
        }
        
        if (this.hasValidNumber(this.mStepTextField, false) == false) {
    		if (this.hasValidPeriod(this.mStepTextField, true) == false) {
        		valid = false;
    		}
        }
        
        // text fields
        List<JTextField> tList = this.getTextFieldComponentsList();
        for (int ii = 0; ii < tList.size(); ii++) {
        	Object obj = tList.get(ii);
        	if (!(obj instanceof SGTextField)) {
        		continue;
        	}
        	SGTextField tf = (SGTextField) obj;
        	if (tf.hasValidText() == false) {
                this.addInputErrorDescription(tf.getDescription());
                valid = false;
        	}
        }
        
        // combo box for date format
    	if (!SGDateUtility.checkDateComboBoxInputValidatity(
    			this.mNumberDateFormatComboBox)) {
        	String desc = this.mNumberDateFormatComboBox.getDescription();
        	this.addInputErrorDescription(desc);
        	valid = false;
    	}

    	return valid;
    }
	
    public void actionPerformed(final ActionEvent e) {
    	super.actionPerformed(e);
        Object source = e.getSource();
        if (source.equals(this.mAxisVisibleCheckBox)) {
            this.setAxisVisible(this.mAxisVisibleCheckBox.getSelected());
        } else if (source.equals(this.mAxisLineVisibleCheckBox)) {
        	this.setAxisLineVisible(this.mAxisLineVisibleCheckBox.getSelected());
        } else if (source.equals(this.mTitleVisibleCheckBox)) {
            this.setTitleVisible(this.mTitleVisibleCheckBox.getSelected());
        } else if (source.equals(this.mNumberVisibleCheckBox)) {
            this.setNumberVisible(this.mNumberVisibleCheckBox.getSelected());
        } else if (source.equals(this.mTickMarkVisibleCheckBox)) {
            this.setTickMarkVisible(this.mTickMarkVisibleCheckBox.getSelected());
        } else if (source.equals(this.mLinearRadioButton)
                || source.equals(this.mLogRadioButton)) {
            final boolean b = (this.getScaleType().intValue() == SGAxis.LINEAR_SCALE);
            this.mScaleTypeComponentGroup.setEnabled(b);
        } else if (source.equals(this.mAutoTickMarkCheckBox)) {
            final boolean flag = this.mAutoTickMarkCheckBox.isSelected();
            this.mAutoScaleComponentGroup.setEnabled(!flag);
        } else if (source.equals(this.mExponentCheckBox)) {
            this.setExponentVisible(this.mExponentCheckBox.getSelected());
        } else if (source.equals(this.mDateModeCheckBox)) {
        	this.setDateMode(this.mDateModeCheckBox.getSelected());
        } else if (source.equals(this.mMinDateButton)) {
        	this.onAxisDateButtonPressed(this.mMinValueTextField);
        } else if (source.equals(this.mMaxDateButton)) {
        	this.onAxisDateButtonPressed(this.mMaxValueTextField);
        } else if (source.equals(this.mBaselineDateButton)) {
        	this.onAxisDateButtonPressed(this.mBaselineTextField);
        } else if (source.equals(this.mStepDateButton)) {
        	this.onAxisPeriodButtonPressed(this.mStepTextField);
        }
    }
    
    private void onAxisDateButtonPressed(SGTextField field) {
    	SGDateInputDialog dg = new SGDateInputDialog(this, true);
    	String str = field.getText();
    	Double d = SGUtilityText.getDouble(str);
    	if (d != null) {
    		dg.setDate(d.doubleValue());
    	} else {
    		SGDate date = SGUtilityText.getDate(str);
    		if (date == null) {
    			return;
    		}
    		dg.setDate(date.getDateValue());
    	}
    	dg.setCenter(this);
    	dg.setVisible(true);
    	
    	final int closeOption = dg.getCloseOption();
    	if (closeOption == OK_OPTION) {
    		SGDate date = dg.getDate();
    		if (this.isDateMode()) {
    			field.setText(date.toString());
    		} else {
        		field.setText(Double.toString(date.getDateValue()));
    		}
    	}
    }

    private void onAxisPeriodButtonPressed(SGTextField field) {
    	SGPeriodInputDialog dg = new SGPeriodInputDialog(this, true);
    	String str = field.getText();
    	Double d = SGUtilityText.getDouble(str);
    	if (d != null) {
        	dg.setPeriod(d.doubleValue());
    	} else {
    		Period p = SGUtilityText.getPeriod(str);
    		if (p == null) {
    			return;
    		}
    		dg.setPeriod(p);
    	}
    	dg.setCenter(this);
    	dg.setVisible(true);
    	
    	final int closeOption = dg.getCloseOption();
    	if (closeOption == OK_OPTION) {
    		Period p = dg.getPeriod();
    		if (this.isDateMode()) {
        		field.setText(p.toString());
    		} else {
    			field.setText(Double.toString(SGDateUtility.toApproximateDateValue(p)));
    		}
    	}
    }

    public Integer getScaleType() {
        Integer type = null;
        if (this.mLinearRadioButton.isSelected()) {
            type = Integer.valueOf(SGAxis.LINEAR_SCALE);
        } else if (this.mLogRadioButton.isSelected()) {
            type = Integer.valueOf(SGAxis.LOG_SCALE);
        }

        return type;
    }

    public SGAxisValue getMinValue() throws ParseException {
        final String str = this.mMinValueTextField.getText();
        return SGUtility.getAxisValue(str, this.isDateMode());
    }

    public SGAxisValue getMaxValue() throws ParseException {
        final String str = this.mMaxValueTextField.getText();
        return SGUtility.getAxisValue(str, this.isDateMode());
    }
    
    public SGAxisValue getBaseValue() throws ParseException {
        String str = this.mBaselineTextField.getText();
        return SGUtility.getAxisValue(str, this.isDateMode());
    }

    public SGAxisStepValue getStepValue() throws ParseException{
        String str = this.mStepTextField.getText();
        return SGUtility.getAxisStepValue(str, this.isDateMode());
    }

    /**
     * 
     */
    public Boolean isInvertedCoordinates() {
        return this.mInvertCoordinatesCheckBox.getSelected();
    }

    /**
     * 
     */
    public Boolean getAutoCalcFlag() {
        return this.mAutoTickMarkCheckBox.getSelected();
    }

    /**
     * 
     */
    public String getTitleString() {
        return this.mTitleTextField.getText();
    }

    /**
     * 
     */
    public Boolean isAxisVisible() {
        return this.mAxisVisibleCheckBox.getSelected();
    }

    /**
     * 
     */
    public Boolean isTitleVisible() {
        return this.mTitleVisibleCheckBox.getSelected();
    }

    /**
     * 
     */
    public Boolean isNumberVisible() {
        return this.mNumberVisibleCheckBox.getSelected();
    }

    /**
     * 
     */
    public Boolean isTickMarkVisible() {
        return this.mTickMarkVisibleCheckBox.getSelected();
    }

    public Boolean isTickMarkBothsides() {
    	return this.mTickMarkBothsidesCheckBox.getSelected();
    }
    /**
     * 
     */
    public Boolean isNumberInteger() {
        return this.mIntegerCheckBox.getSelected();
    }

    /**
     * 
     */
    public Boolean isExponentVisible() {
        return this.mExponentCheckBox.getSelected();
    }

    /**
     * 
     */
    public Number getExponentValue() {
        return this.mExponentSpinner.getNumber();
    }
    
    public Number getExponentLocationX() {
    	return this.mNumberExponentLocationXSpinner.getNumber();
    }

    public Number getExponentLocationY() {
    	return this.mNumberExponentLocationYSpinner.getNumber();
    }

    /**
     * 
     */
    public Number getFormatAngle() {
        return this.mNumberAngleSpinner.getNumber();
    }

    /**
     * Returns the shift of axis line.
     * 
     * @return the shift of axis line
     */
    public Number getShift() {
    	return this.mAxisShiftSpinner.getNumber();
    }

    /**
     * Returns the number of minor tick marks.
     * 
     * @return the number of minor tick marks
     */
    public Number getMinorTickMarkNumber() {
    	return this.mMinorTickMarkNumberSpinner.getNumber();
    }

    /**
     * Returns the length of minor tick marks.
     * 
     * @return the length of minor tick marks
     */
    public Number getMinorTickMarkLength() {
    	return this.mMinorTickMarkLengthSpinner.getNumber();
    }
    
    /**
     * 
     */
    public boolean setTitleText(final String str) {
        this.mTitleTextField.setText(str);
        return true;
    }

    /**
     * 
     */
    public boolean setScaleType(final Integer value) {
    	final boolean scaleTypeComponentEnabled;
        if (value == null) {
            this.mScaleNoSelectedRadioButton.setSelected(true);
            scaleTypeComponentEnabled = true;
        } else {
            final int type = value.intValue();
            switch (type) {
            case SGAxis.LINEAR_SCALE: {
                this.mLinearRadioButton.setSelected(true);
                break;
            }

            case SGAxis.LOG_SCALE: {
                this.mLogRadioButton.setSelected(true);
                break;
            }

            default: {
                throw new IllegalArgumentException("The scale type is illegal.");
            }
            }
            scaleTypeComponentEnabled = (type == SGAxis.LINEAR_SCALE);
        }
        this.mScaleTypeComponentGroup.setEnabled(scaleTypeComponentEnabled);
        return true;
    }

    /**
     * 
     */
    public boolean setAxisVisible(final Boolean b) {
        this.mAxisVisibleCheckBox.setSelected(b);
        boolean flag = true;
        if (b != null) {
            flag = b.booleanValue();
        }

        this.mAxisVisibleComponentGroup.setEnabled(flag);
        return true;
    }

    /**
     * 
     */
    public boolean setTitleVisible(final Boolean b) {
        this.mTitleVisibleCheckBox.setSelected(b);
        boolean flag = true;
        if (b != null) {
            flag = b.booleanValue();
        }
        this.mTitleComponentGroup.setEnabled(flag);

        return true;
    }

    /**
     * 
     */
    public boolean setTickMarkVisible(final Boolean visible) {
        this.mTickMarkVisibleCheckBox.setSelected(visible);
        boolean flag = true;
        if (visible != null) {
            flag = visible.booleanValue();
        }
        this.mTickMarkComponentGroup.setEnabled(flag);
        return true;
    }

    public boolean setTickMarkBothsides(final Boolean b) {
    	this.mTickMarkBothsidesCheckBox.setSelected(b);
        return true;
    }

    /**
     * 
     */
    public boolean setNumberVisible(final Boolean visible) {
        this.mNumberVisibleCheckBox.setSelected(visible);
        boolean flag = true;
        if (visible != null) {
            flag = visible.booleanValue();
        }

        this.mNumberComponentGroup.setEnabled(flag);
        return true;
    }

    /**
     * 
     */
    public boolean setNumberInteger(final Boolean b) {
        this.mIntegerCheckBox.setSelected(b);
        return true;
    }

    public boolean setMinValue(final Object value) {
    	if (value instanceof SGAxisDateValue) {
            return SGDateUtility.setDateValue(this.mMinValueTextField, value,
            		SGDateUtility.getUTCTimeZoneInstance());
    	} else {
            return SGUtility.setDoubleValue(this.mMinValueTextField, value);
    	}
    }

    public boolean setMaxValue(final Object value) {
    	if (value instanceof SGAxisDateValue) {
            return SGDateUtility.setDateValue(this.mMaxValueTextField, value,
            		SGDateUtility.getUTCTimeZoneInstance());
    	} else {
            return SGUtility.setDoubleValue(this.mMaxValueTextField, value);
    	}
    }

    public boolean setBaseValue(final Object value) {
    	if (value instanceof SGAxisDateValue) {
            return SGDateUtility.setDateValue(this.mBaselineTextField, value,
            		SGDateUtility.getUTCTimeZoneInstance());
    	} else {
            return SGUtility.setDoubleValue(this.mBaselineTextField, value);
    	}
    }

    public boolean setStepValue(final Object value) {
    	if (value instanceof SGAxisDateStepValue) {
            return SGDateUtility.setPeriodValue(this.mStepTextField, value);
    	} else {
            return SGUtility.setDoubleValue(this.mStepTextField, value);
    	}
    }

    /**
     * 
     */
    public boolean setInvertedCoordinates(final Boolean b) {
        this.mInvertCoordinatesCheckBox.setSelected(b);
        return true;
    }

    /**
     * 
     */
    public boolean setAutoCalcFlag(final Boolean b) {
        this.mAutoTickMarkCheckBox.setSelected(b);
        boolean flag = true;
        if (b != null) {
            flag = b.booleanValue();
        }
//        this.mBaseTextField.setEditable(!flag);
//        this.mStepTextField.setEditable(!flag);
        this.mAutoScaleComponentGroup.setEnabled(!flag);
        return true;
    }

    /**
     * 
     * @param b
     * @return
     */
    public boolean setExponentVisible(final Boolean b) {
        this.mExponentCheckBox.setSelected(b);
        boolean flag = true;
        if (b != null) {
            flag = b.booleanValue();
        }
        this.mExponentComponentGroup.setEnabled(flag);
        return true;
    }

    /**
     * 
     * @param value
     * @return
     */
    public boolean setExponentValue(final Object value) {
        return SGUtility.setIntValue(this.mExponentSpinner, value);
    }

    public boolean setExponentLocationX(final Object value) {
        return this.setValue(this.mNumberExponentLocationXSpinner, value);
    }

    public boolean setExponentLocationY(final Object value) {
        return this.setValue(this.mNumberExponentLocationYSpinner, value);
    }

    /**
     * Sets the angle of the numbers.
     * 
     * @param value
     *           the value to set
     * @return true if succeeded
     */
    public boolean setNumberAngle(final Object value) {
        return SGUtility.setValue(this.mNumberAngleSpinner, value);
    }
    
    /**
     * Sets the shift of axis line.
     * 
     * @param value
     *           the value to set
     * @return true if succeeded
     */
    public boolean setShift(final Object value) {
        return SGUtility.setValue(this.mAxisShiftSpinner, value);
    }

    /**
     * Sets the number of minor tick marks.
     * 
     * @param value
     *           the value to set
     * @return true if succeeded
     */
    public boolean setMinorTickMarkNumber(final Object value) {
        return SGUtility.setIntValue(this.mMinorTickMarkNumberSpinner, value);
    }

    /**
     * Sets the length of minor tick marks.
     * 
     * @param value
     *           the value to set
     * @return true if succeeded
     */
    public boolean setMinorTickMarkLength(final Object value) {
        return SGUtility.setValue(this.mMinorTickMarkLengthSpinner, value);
    }

    /**
     * Sets the axis line width.
     * 
     * @param value
     *           the value to set
     * @return true if succeeded
     */
    public boolean setAxisLineWidth(final Object value) {
        return SGUtility.setValue(this.mAxisLineWidthSpinner, value);
    }

    /**
     * 
     * @return
     */
    public boolean setDialogProperty() {

        List<SGIPropertyDialogObserver> list = this.mPropertyDialogObserverList;

        final int num = list.size();

        final boolean[] axisVisibleArray = new boolean[num];
        final float[] shiftArray = new float[num];
        final boolean[] dateModeFlagArray = new boolean[num];

        // Axis Line
        final boolean[] axisLineVisibleArray = new boolean[num];
        final float[] axisLineWidthArray = new float[num];
        final Color[] axisLineColorArray = new Color[num];
        final float[] spaceLineAndNumbersArray = new float[num];
        
        // Title
        final boolean[] titleVisibleArray = new boolean[num];
        final String[] titleTextArray = new String[num];
        final float[] spaceTitleAndNumbersArray = new float[num];
        final float[] titleShiftFromCenterArray = new float[num];
        final String[] titleFontNameArray = new String[num];
        final int[] titleFontStyleArray = new int[num];
        final float[] titleFontSizeArray = new float[num];
        final Color[] titleFontColorArray = new Color[num];

        // Number
        final boolean[] numberVisibleArray = new boolean[num];
        final float[] numberAngleArray = new float[num];
        final float[] exponentXArray = new float[num];
        final float[] exponentYArray = new float[num];
        final String[] numberFontNameArray = new String[num];
        final int[] numberFontStyleArray = new int[num];
        final float[] numberFontSizeArray = new float[num];
        final Color[] numberFontColorArray = new Color[num];
        final String[] dateFormatArray = new String[num];
        
        // Tick Mark
        final boolean[] tickMarkVisibleArray = new boolean[num];
        final boolean[] tickMarkBothsidesArray = new boolean[num];
        final float[] tickMarkWidthArray = new float[num];
        final float[] tickMarkLengthArray = new float[num];
        final int[] minorTickMarkNumberArray = new int[num];
        final float[] minorTickMarkLengthArray = new float[num];
        final Color[] tickMarkColorArray = new Color[num];

        for (int ii = 0; ii < num; ii++) {
        	SGIAxisDialogObserver l = (SGIAxisDialogObserver) list.get(ii);
        	
        	axisVisibleArray[ii] = l.isVisible();
        	shiftArray[ii] = l.getShift(AXIS_SHIFT_UNIT);
            dateModeFlagArray[ii] = l.getDateMode();
        	
        	// axis line
        	axisLineVisibleArray[ii] = l.isAxisLineVisible();
        	axisLineWidthArray[ii] = l.getAxisLineWidth(LINE_WIDTH_UNIT);
        	axisLineColorArray[ii] = l.getAxisLineColor();
        	spaceLineAndNumbersArray[ii] = l.getSpaceAxisLineAndNumbers(SPACE_UNIT);
        	
        	// title
        	titleVisibleArray[ii] = l.isTitleVisible();
        	titleTextArray[ii] = l.getTitleString();
            spaceTitleAndNumbersArray[ii] = l.getSpaceTitleAndNumbers(SPACE_UNIT);
            titleShiftFromCenterArray[ii] = l.getTitleShiftFromCenter(TITLE_SHIFT_UNIT);
            titleFontNameArray[ii] = l.getTitleFontName();
            titleFontStyleArray[ii] = l.getTitleFontStyle();
            titleFontSizeArray[ii] = l.getTitleFontSize(FONT_SIZE_UNIT);
            titleFontColorArray[ii] = l.getTitleFontColor();
            
            numberVisibleArray[ii] = l.isNumbersVisible();
            numberAngleArray[ii] = l.getNumberAngle();
            exponentXArray[ii] = l.getExponentLocationX(EXPONENT_LOCATION_UNIT);
            exponentYArray[ii] = l.getExponentLocationY(EXPONENT_LOCATION_UNIT);
            numberFontNameArray[ii] = l.getNumberFontName();
            numberFontStyleArray[ii] = l.getNumberFontStyle();
            numberFontSizeArray[ii] = l.getNumberFontSize(FONT_SIZE_UNIT);
            numberFontColorArray[ii] = l.getNumberFontColor();
            dateFormatArray[ii] = l.getNumberDateFormat();
            
            tickMarkVisibleArray[ii] = l.isTickMarkVisible();
            tickMarkBothsidesArray[ii] = l.isTickMarkBothsides();
            tickMarkWidthArray[ii] = l.getTickMarkWidth(LINE_WIDTH_UNIT);
            tickMarkLengthArray[ii] = l.getMajorTickMarkLength(TICK_MARK_LENGTH_UNIT);
            minorTickMarkNumberArray[ii] = l.getMinorTickMarkNumber();
            minorTickMarkLengthArray[ii] = l.getMinorTickMarkLength(TICK_MARK_LENGTH_UNIT);
            tickMarkColorArray[ii] = l.getTickMarkColor();
        }

        //
        // Checks the equality.
        //
        
        Boolean axisVisible = SGUtility.checkEquality(axisVisibleArray);
        Float shift = SGUtility.checkEquality(shiftArray);
        Boolean dateModeFlag = SGUtility.checkEquality(dateModeFlagArray);
        
        // axis line
        Boolean axisLineVisible = SGUtility.checkEquality(axisLineVisibleArray);
        Float axisLineWidth = SGUtility.checkEquality(axisLineWidthArray);
        Color axisLineColor = SGUtility.checkEquality(axisLineColorArray);
        Float spaceLineAndNumbers = SGUtility.checkEquality(spaceLineAndNumbersArray);

        // title
        Boolean titleVisible = SGUtility.checkEquality(titleVisibleArray);
        String titleText = SGUtility.checkEquality(titleTextArray);
        Float spaceTitleAndNumbers = SGUtility.checkEquality(spaceTitleAndNumbersArray);
        Float titleShiftFromCenter = SGUtility.checkEquality(titleShiftFromCenterArray);
        String titleFontName = SGUtility.checkEquality(titleFontNameArray);
        Float titleFontSize = SGUtility.checkEquality(titleFontSizeArray);
        Integer titleFontStyle = SGUtility.checkEquality(titleFontStyleArray);
        Color titleFontColor = SGUtility.checkEquality(titleFontColorArray);

        // number
        Boolean numberVisible = SGUtility.checkEquality(numberVisibleArray);
        Float numberAngle = SGUtility.checkEquality(numberAngleArray);
        Float exponentX = SGUtility.checkEquality(exponentXArray);
        Float exponentY = SGUtility.checkEquality(exponentYArray);
        String numberFontName = SGUtility.checkEquality(numberFontNameArray);
        Float numberFontSize = SGUtility.checkEquality(numberFontSizeArray);
        Integer numberFontStyle = SGUtility.checkEquality(numberFontStyleArray);
        Color numberFontColor = SGUtility.checkEquality(numberFontColorArray);
        String dateFormat = SGUtility.checkEquality(dateFormatArray);
        
        // tick mark
        Boolean tickMarkVisible = SGUtility.checkEquality(tickMarkVisibleArray);
        Boolean tickMarkBothsides = SGUtility.checkEquality(tickMarkBothsidesArray);
        Float tickMarkWidth = SGUtility.checkEquality(tickMarkWidthArray);
        Float tickMarkLength = SGUtility.checkEquality(tickMarkLengthArray);
        Integer minorTickMarkNumber = SGUtility.checkEquality(minorTickMarkNumberArray);
        Float minorTickMarkLength = SGUtility.checkEquality(minorTickMarkLengthArray);
        Color tickMarkColor = SGUtility.checkEquality(tickMarkColorArray);

        //
        // Sets parameters to the components.
        //
        
        this.setShift(shift);

        final boolean dateMode = (dateModeFlag != null) ? dateModeFlag.booleanValue() : false;
        this.setDateMode(dateMode);

        // axis line
        this.setAxisLineVisible(axisLineVisible);
        this.setAxisLineWidth(axisLineWidth);
        this.setAxisLineColor(axisLineColor);
        this.setSpaceAxisLineAndNumbers(spaceLineAndNumbers);
        
        // title
        this.setTitleVisible(titleVisible);
        this.setTitleText(titleText);
        this.setSpaceTitleAndNumbers(spaceTitleAndNumbers);
        this.setTitleShiftFromCenter(titleShiftFromCenter);
        this.setTitleFontName(titleFontName);
        this.setTitleFontStyle(titleFontStyle);
        this.setTitleFontSize(titleFontSize);
        this.setTitleFontColor(titleFontColor);
        
        // number
        this.setNumberVisible(numberVisible);
        this.setNumberAngle(numberAngle);
        this.setExponentLocationX(exponentX);
        this.setExponentLocationY(exponentY);
        this.setNumberFontName(numberFontName);
        this.setNumberFontStyle(numberFontStyle);
        this.setNumberFontSize(numberFontSize);
        this.setNumberFontColor(numberFontColor);
        this.setNumberDateFormat(dateFormat);
        
        // tick mark
        this.setTickMarkVisible(tickMarkVisible);
        this.setTickMarkBothsides(tickMarkBothsides);
        this.setTickMarkWidth(tickMarkWidth);
        this.setTickMarkLength(tickMarkLength);
        this.setMinorTickMarkNumber(minorTickMarkNumber);
        this.setMinorTickMarkLength(minorTickMarkLength);
        this.setTickMarkColor(tickMarkColor);

        // set visible at the end of this method
        this.setAxisVisible(axisVisible);

        // sets up the title
        this.setupTitle();
        
        // sets up the scale
        this.setUpScaleComponents();

        return true;
    }
    
    private void setUpScaleComponents() {
        List<SGIPropertyDialogObserver> list = this.mPropertyDialogObserverList;
        final int num = list.size();
        
        final SGAxisValue[] minValueArray = new SGAxisValue[num];
        final SGAxisValue[] maxValueArray = new SGAxisValue[num];
        final SGAxisValue[] baselineValueArray = new SGAxisValue[num];
        final SGAxisStepValue[] stepValueArray = new SGAxisStepValue[num];
        final int[] scaleTypeArray = new int[num];
        final boolean[] invertedCoordinateArray = new boolean[num];
        final boolean[] autoCalcArray = new boolean[num];
        final boolean[] numberIntegerArray = new boolean[num];
        final boolean[] exponentVisibleArray = new boolean[num];
        final int[] exponentArray = new int[num];
        for (int ii = 0; ii < num; ii++) {
        	SGIAxisDialogObserver l = (SGIAxisDialogObserver) list.get(ii);
            minValueArray[ii] = l.getMinValue();
            maxValueArray[ii] = l.getMaxValue();
            baselineValueArray[ii] = l.getScaleBase();
            stepValueArray[ii] = l.getScaleStep();
            scaleTypeArray[ii] = l.getScaleType();
            invertedCoordinateArray[ii] = l.isInvertCoordinates();
            autoCalcArray[ii] = l.isScaleAuto();
            numberIntegerArray[ii] = l.isNumbersInteger();
            exponentVisibleArray[ii] = l.isExponentVisible();
            exponentArray[ii] = l.getExponentValue();
        }
        
        // Checks the equality.
        Object minValue = SGUtility.checkEquality(minValueArray);
        Object maxValue = SGUtility.checkEquality(maxValueArray);
        Object baselineValue = SGUtility.checkEquality(baselineValueArray);
        Object stepValue = SGUtility.checkEquality(stepValueArray);
        Integer scaleType = SGUtility.checkEquality(scaleTypeArray);
        Boolean invertedCoordinate = SGUtility.checkEquality(invertedCoordinateArray);
        Boolean autoCalc = SGUtility.checkEquality(autoCalcArray);
        Boolean numberInteger = SGUtility.checkEquality(numberIntegerArray);
        Boolean exponentVisible = SGUtility.checkEquality(exponentVisibleArray);
        Integer exponent = SGUtility.checkEquality(exponentArray);

        // Sets parameters to the components.
        this.setMinValue(minValue);
        this.setMaxValue(maxValue);
        this.setBaseValue(baselineValue);
        this.setStepValue(stepValue);
        this.setScaleType(scaleType);
        this.setInvertedCoordinates(invertedCoordinate);
        this.setAutoCalcFlag(autoCalc);
        this.setNumberInteger(numberInteger);
        this.setExponentVisible(exponentVisible);
        this.setExponentValue(exponent);
    }

    // Sets up the title.
    protected void setupTitle() {
        Set<String> locationSet = new HashSet<String>();
        for (int ii = 0; ii < this.mPropertyDialogObserverList.size(); ii++) {
        	SGIAxisDialogObserver l = (SGIAxisDialogObserver) this.mPropertyDialogObserverList.get(ii);
        	locationSet.add(l.getLocationName());
        }
        List<String> locationList = new ArrayList<String>(locationSet);
        StringBuffer sb = new StringBuffer();
        sb.append(SGAxisDialog.TITLE);
        sb.append(" (");
        for (int ii = 0; ii < locationList.size(); ii++) {
        	String location = locationList.get(ii);
        	if (ii > 0) {
        		sb.append(", ");
        	}
        	sb.append(location);
        }
        sb.append(')');
        this.setTitle(sb.toString());
    }
    
    protected boolean setValue(final SGSpinner sp, final Object obj) {
        return SGUtility.setValue(sp, obj);
    }

    public boolean setAxisLineColor(final Color cl) {
    	this.mAxisLineColorButton.setColor(cl);
    	return true;
    }
    
    public boolean setSpaceAxisLineAndNumbers(final Object value) {
    	return this.setValue(this.mSpaceAxisLineAndNumbersSpinner, value);
    }

    public boolean setSpaceTitleAndNumbers(final Object value) {
    	return this.setValue(this.mSpaceTitleAndNumbersSpinner, value);
    }

    public boolean setTitleShiftFromCenter(final Object value) {
    	return this.setValue(this.mTitleShiftFromCenterSpinner, value);
    }

    /**
     * Sets the font name of title.
     * 
     * @param name
     *           the font name to set
     * @return true if succeeded
     */
    public boolean setTitleFontName(final String name) {
    	final String fName = SGUtility.findFontFamilyName(name);
        this.mTitleFontNameComboBox.setSelectedItem(fName);
        return true;
    }

    /**
     * Sets the font size of title.
     * 
     * @param value
     *           font size to set
     * @return true if succeeded
     */
    public boolean setTitleFontSize(final Object value) {
        return this.setValue(this.mTitleFontSizeSpinner, value);
    }

    /**
     * Sets the font style of title.
     * 
     * @param style
     *           font style to set
     * @return true if succeeded
     */
    public boolean setTitleFontStyle(final Integer style) {
        String styleName = null;
        if (style != null) {
            styleName = SGUtilityText.getFontStyleName(style.intValue());
        }
        this.mTitleFontStyleComboBox.setSelectedItem(styleName);
        return true;
    }
    
    /**
     * Sets the color of title.
     * 
     * @param cl
     *          the color to set
     * @return true if succeeded
     */
    public boolean setTitleFontColor(final Color cl) {
    	this.mTitleFontColorButton.setColor(cl);
    	return true;
    }

    /**
     * Sets the font name of numbers.
     * 
     * @param name
     *           the font name to set
     * @return true if succeeded
     */
    public boolean setNumberFontName(final String name) {
    	final String fName = SGUtility.findFontFamilyName(name);
        this.mNumberFontNameComboBox.setSelectedItem(fName);
        return true;
    }

    /**
     * Sets the font size of numbers.
     * 
     * @param value
     *           font size to set
     * @return true if succeeded
     */
    public boolean setNumberFontSize(final Object value) {
        return this.setValue(this.mNumberFontSizeSpinner, value);
    }

    /**
     * Sets the font style of numbers.
     * 
     * @param style
     *           font style to set
     * @return true if succeeded
     */
    public boolean setNumberFontStyle(final Integer style) {
        String styleName = null;
        if (style != null) {
            styleName = SGUtilityText.getFontStyleName(style.intValue());
        }
        this.mNumberFontStyleComboBox.setSelectedItem(styleName);
        return true;
    }
    
    /**
     * Sets the color of numbers.
     * 
     * @param cl
     *          the color to set
     * @return true if succeeded
     */
    public boolean setNumberFontColor(final Color cl) {
    	this.mNumberFontColorButton.setColor(cl);
    	return true;
    }

    /**
     * Sets the width of tick marks.
     * 
     * @param value
     *           font size to set
     * @return true if succeeded
     */
    public boolean setTickMarkWidth(final Object value) {
        return this.setValue(this.mTickMarkWidthSpinner, value);
    }

    /**
     * Sets the length of tick marks.
     * 
     * @param value
     *           font size to set
     * @return true if succeeded
     */
    public boolean setTickMarkLength(final Object value) {
        return this.setValue(this.mTickMarkLengthSpinner, value);
    }
    
    public boolean setTickMarkColor(final Color cl) {
    	this.mTickMarkColorButton.setColor(cl);
    	return true;
    }
    
    public Number getAxisLineWidth() {
        return this.mAxisLineWidthSpinner.getNumber();
    }
    
    public Color getAxisLineColor() {
    	return this.mAxisLineColorButton.getColor();
    }
    
    public Number getSpaceAxisLineAndNumbers() {
    	return this.mSpaceAxisLineAndNumbersSpinner.getNumber();
    }

    public Number getSpaceTitleAndNumbers() {
    	return this.mSpaceTitleAndNumbersSpinner.getNumber();
    }

    public Number getTitleShiftFromCenter() {
    	return this.mTitleShiftFromCenterSpinner.getNumber();
    }
    
    public String getTitleFontName() {
    	return (String) this.mTitleFontNameComboBox.getSelectedItem();
    }
    
    public Number getTitleFontSize() {
    	return this.mTitleFontSizeSpinner.getNumber();
    }
    
    public Integer getTitleFontStyle() {
        final String item = (String) this.mTitleFontStyleComboBox.getSelectedItem();
        return SGUtilityText.getFontStyle(item);
    }
    
    public Color getTitleFontColor() {
    	return this.mTitleFontColorButton.getColor();
    }
    
    public String getNumberFontName() {
    	return (String) this.mNumberFontNameComboBox.getSelectedItem();
    }
    
    public Number getNumberFontSize() {
    	return this.mNumberFontSizeSpinner.getNumber();
    }
    
    public Integer getNumberFontStyle() {
        final String item = (String) this.mNumberFontStyleComboBox.getSelectedItem();
        return SGUtilityText.getFontStyle(item);
    }
    
    public Color getNumberFontColor() {
    	return this.mNumberFontColorButton.getColor();
    }
    
    public Number getTickMarkWidth() {
    	return this.mTickMarkWidthSpinner.getNumber();
    }
    
    public Number getTickMarkLength() {
    	return this.mTickMarkLengthSpinner.getNumber();
    }

    public Color getTickMarkColor() {
    	return this.mTickMarkColorButton.getColor();
    }

    /**
     * Set properties to all listeners.
     * 
     * @param l
     * @return
     */
    public boolean setPropertiesToObserver(SGIPropertyDialogObserver l) {

    	SGIAxisDialogObserver axis = (SGIAxisDialogObserver) l;
    	
        final Boolean axisVisible = this.isAxisVisible();
        final Number shift = this.getShift();
        final Boolean dateMode = this.getDateMode();
        final Boolean axisLineVisible = this.isAxisLineVisible();
        final Number axisLineWidth = this.getAxisLineWidth();
        final Color axisLineColor = this.getAxisLineColor();
        final Number spaceLineAndNumbers = this.getSpaceAxisLineAndNumbers();
        final Boolean titleVisible = this.isTitleVisible();
        final String titleText = this.getTitleString();
        final Number spaceTitleAndNumbers = this.getSpaceTitleAndNumbers();
        final Number titleShiftFromCenter = this.getTitleShiftFromCenter();
        final String titleFontName = this.getTitleFontName();
        final Number titleFontSize = this.getTitleFontSize();
        final Integer titleFontStyle = this.getTitleFontStyle();
        final Color titleFontColor = this.getTitleFontColor();
        final Boolean numberInteger = this.isNumberInteger();
        final Integer scaleType = this.getScaleType();
        final Boolean invertedCoordinates = this.isInvertedCoordinates();
        final Boolean autoCalc = this.getAutoCalcFlag();
        final Boolean exponentVisible = this.isExponentVisible();
        final Number exponent = this.getExponentValue();
        final Number exponentLocationX = this.getExponentLocationX();
        final Number exponentLocationY = this.getExponentLocationY();
        final Boolean numberVisible = this.isNumberVisible();
        final Number numberAngle = this.getFormatAngle();
        final String numberFontName = this.getNumberFontName();
        final Number numberFontSize = this.getNumberFontSize();
        final Integer numberFontStyle = this.getNumberFontStyle();
        final Color numberFontColor = this.getNumberFontColor();
        final String numberDateFormat = this.getNumberDateFormat();
        final Boolean tickMarkVisible = this.isTickMarkVisible();
        final Boolean tickMarkBothsides = this.isTickMarkBothsides();
        final Number tickMarkWidth = this.getTickMarkWidth();
        final Number tickMarkLength = this.getTickMarkLength();
        final Number minorTickMarkNumber = this.getMinorTickMarkNumber();
        final Number minorTickMarkLength = this.getMinorTickMarkLength();
        final Color tickMarkColor = this.getTickMarkColor();

        boolean validAxisValue = true;
        SGAxisValue minValue = null;
        try {
			minValue = this.getMinValue();
		} catch (ParseException e) {
			this.addInputErrorDescription(
					this.mMinValueTextField.getDescription());
			validAxisValue = false;
		}
        SGAxisValue maxValue = null;
        try {
			maxValue = this.getMaxValue();
		} catch (ParseException e) {
			this.addInputErrorDescription(
					this.mMaxValueTextField.getDescription());
			validAxisValue = false;
		}
        SGAxisValue baselineValue = null;
        try {
			baselineValue = this.getBaseValue();
		} catch (ParseException e) {
			if (autoCalc != null && !autoCalc) {
				this.addInputErrorDescription(
						this.mBaselineTextField.getDescription());
				validAxisValue = false;
			}
		}
        SGAxisStepValue stepValue = null;
        try {
			stepValue = this.getStepValue();
		} catch (ParseException e) {
			if (autoCalc != null && !autoCalc) {
				this.addInputErrorDescription(
						this.mStepTextField.getDescription());
				validAxisValue = false;
			}
		}
        if (!validAxisValue) {
        	return false;
        }

        // check values
        if (axis.hasValidAxisRange(minValue, maxValue, scaleType) == false) {
            final String msg = MSG_RANGE_ERROR;
            this.setInputErrorMessage(msg);
            return false;
        }

        if (axis.hasValidAxisValues(baselineValue, stepValue, scaleType) == false) {
            final String msg = MSG_STEP_ERROR;
            this.setInputErrorMessage(msg);
            return false;
        }

        if (axisVisible != null) {
            axis.setVisible(axisVisible.booleanValue());
        }

        if (shift != null) {
        	axis.setShift(shift.floatValue(), AXIS_SHIFT_UNIT);
        }
        
        if (dateMode != null) {
        	axis.setDateMode(dateMode.booleanValue());
        }
        
        if (axisLineVisible != null) {
        	axis.setAxisLineVisible(axisLineVisible.booleanValue());
        }
        
        if (axisLineWidth != null) {
        	axis.setAxisLineWidth(axisLineWidth.floatValue(), LINE_WIDTH_UNIT);
        }
        
        if (axisLineColor != null) {
        	axis.setAxisLineColor(axisLineColor);
        }
        
        if (spaceLineAndNumbers != null) {
        	axis.setSpaceAxisLineAndNumbers(spaceLineAndNumbers.floatValue(), SPACE_UNIT);
        }
        
        if (titleVisible != null) {
            axis.setTitleVisible(titleVisible.booleanValue());
        }

        if (titleText != null) {
            axis.setTitleText(titleText);
        }
        
        if (spaceTitleAndNumbers != null) {
        	axis.setSpaceTitleAndNumbers(spaceTitleAndNumbers.floatValue(), SPACE_UNIT);
        }
        
        if (titleShiftFromCenter != null) {
        	axis.setTitleShiftFromCenter(titleShiftFromCenter.floatValue(), TITLE_SHIFT_UNIT);
        }
        
        if (titleFontName != null) {
        	axis.setTitleFontName(titleFontName);
        }
        
        if (titleFontSize != null) {
        	axis.setTitleFontSize(titleFontSize.floatValue(), FONT_SIZE_UNIT);
        }

        if (titleFontStyle != null) {
        	axis.setTitleFontStyle(titleFontStyle.intValue());
        }
        
        if (titleFontColor != null) {
        	axis.setTitleFontColor(titleFontColor);
        }
        
        if (numberInteger != null) {
            axis.setNumbersInteger(numberInteger.booleanValue());
        }

        if (minValue != null || maxValue != null || scaleType != null) {
            axis.setScale(minValue, maxValue, scaleType);
        }

        if (invertedCoordinates != null) {
            axis.setInvertedCoordinates(invertedCoordinates.booleanValue());
        }

        if (autoCalc != null) {
            axis.setCalculateAutomatically(autoCalc.booleanValue());
        }

        if (stepValue != null) {
            axis.setStepValue(stepValue);
        }

        if (baselineValue != null) {
            axis.setBaselineValue(baselineValue);
        }

        if (exponentVisible != null) {
            axis.setExponentVisible(exponentVisible.booleanValue());
        }
        
        if (exponentLocationX != null) {
        	axis.setExponentLocationX(exponentLocationX.floatValue(), EXPONENT_LOCATION_UNIT);
        }

        if (exponentLocationY != null) {
        	axis.setExponentLocationY(exponentLocationY.floatValue(), EXPONENT_LOCATION_UNIT);
        }

        if (exponent != null) {
            axis.setExponent(exponent.intValue());
        }
        
        if (numberVisible != null) {
            axis.setNumbersVisible(numberVisible.booleanValue());
        }

        if (numberAngle != null) {
            axis.setNumbersAngle(numberAngle.floatValue());
        }
        
        if (numberFontName != null) {
        	axis.setNumberFontName(numberFontName);
        }
        
        if (numberFontSize != null) {
        	axis.setNumberFontSize(numberFontSize.floatValue(), FONT_SIZE_UNIT);
        }

        if (numberFontStyle != null) {
        	axis.setNumberFontStyle(numberFontStyle.intValue());
        }
        
        if (numberFontColor != null) {
        	axis.setNumberFontColor(numberFontColor);
        }
        
        if (numberDateFormat != null) {
        	axis.setNumberDateFormat(numberDateFormat);
        }
        
        if (tickMarkVisible != null) {
            axis.setTickMarkVisible(tickMarkVisible.booleanValue());
        }

        if (tickMarkBothsides != null) {
            axis.setTickMarkBothsides(tickMarkBothsides.booleanValue());
        }
        
        if (tickMarkWidth != null) {
        	axis.setTickMarkWidth(tickMarkWidth.floatValue(), LINE_WIDTH_UNIT);
        }
        
        if (tickMarkLength != null) {
        	axis.setMajorTickMarkLength(tickMarkLength.floatValue(), TICK_MARK_LENGTH_UNIT);
        }
        
        if (minorTickMarkNumber != null) {
        	axis.setMinorTickMarkNumber(minorTickMarkNumber.intValue());
        }
        
        if (minorTickMarkLength != null) {
        	axis.setMinorTickMarkLength(minorTickMarkLength.floatValue(), TICK_MARK_LENGTH_UNIT);
        }
        
        if (tickMarkColor != null) {
        	axis.setTickMarkColor(tickMarkColor);
        }

        return true;
    }

    public void addActionListener(ActionListener l) {
        this.mAxisVisibleCheckBox.addActionListener(l);
    	this.mAxisLineVisibleCheckBox.addActionListener(l);
        this.mLinearRadioButton.addActionListener(l);
        this.mLogRadioButton.addActionListener(l);
        this.mTickMarkBothsidesCheckBox.addActionListener(l);
        this.mAutoTickMarkCheckBox.addActionListener(l);
        this.mExponentCheckBox.addActionListener(l);
        this.mNumberVisibleCheckBox.addActionListener(l);
        this.mIntegerCheckBox.addActionListener(l);
        this.mInvertCoordinatesCheckBox.addActionListener(l);
        this.mTickMarkVisibleCheckBox.addActionListener(l);
        this.mTitleVisibleCheckBox.addActionListener(l);
        this.mDateModeCheckBox.addActionListener(l);
        this.mMinDateButton.addActionListener(l);
        this.mMaxDateButton.addActionListener(l);
        this.mBaselineDateButton.addActionListener(l);
        this.mStepDateButton.addActionListener(l);
    }
    
    public void removeActionListener(ActionListener l) {
        this.mAxisVisibleCheckBox.removeActionListener(l);
        this.mAxisLineVisibleCheckBox.removeActionListener(l);
        this.mLinearRadioButton.removeActionListener(l);
        this.mLogRadioButton.removeActionListener(l);
        this.mTickMarkBothsidesCheckBox.removeActionListener(l);
        this.mAutoTickMarkCheckBox.removeActionListener(l);
        this.mExponentCheckBox.removeActionListener(l);
        this.mNumberVisibleCheckBox.removeActionListener(l);
        this.mIntegerCheckBox.removeActionListener(l);
        this.mInvertCoordinatesCheckBox.removeActionListener(l);
        this.mTickMarkVisibleCheckBox.removeActionListener(l);
        this.mTitleVisibleCheckBox.removeActionListener(l);
        this.mDateModeCheckBox.removeActionListener(l);
        this.mMinDateButton.removeActionListener(l);
        this.mMaxDateButton.removeActionListener(l);
        this.mBaselineDateButton.removeActionListener(l);
        this.mStepDateButton.removeActionListener(l);
    }

    /**
     * Sets the text string for the check box of visibility.
     * 
     * @param name
     *          a text string to set to the name of check box
     */
    public void setVisibleName(final String name) {
        if (name == null) {
            throw new IllegalArgumentException("name == null");
        }
        this.mAxisVisibleCheckBox.setText(name);
    }
    
    /**
     * Sets the visibility of the components related to the shift value.
     * 
     * @param visible
     *           true to set visible
     */
    protected void setShiftComponentsVisible(final boolean visible) {
    	this.mAxisShiftLabel.setVisible(visible);
    	this.mAxisShiftSpinner.setVisible(visible);
    }
    
    public boolean isDateMode() {
    	Boolean b = this.mDateModeCheckBox.getSelected();
    	if (b == null) {
    		return false;
    	} else {
    		return b.booleanValue();
    	}
    }
    
    public Boolean getDateMode() {
    	return this.mDateModeCheckBox.getSelected();
    }
    
    public boolean setDateMode(final Boolean b) {
        this.mDateModeCheckBox.setSelected(b);
        boolean dateMode = false;
        if (b != null) {
            dateMode = b.booleanValue();
        }
        this.mNumberDateComponentGroup.setEnabled(dateMode);
        this.mNoNumberDateComponentGroup.setEnabled(!dateMode);
        
        // convert values
        SGDateUtility.convertDateValue(this.mMinValueTextField, dateMode);
        SGDateUtility.convertDateValue(this.mMaxValueTextField, dateMode);
        SGDateUtility.convertDateValue(this.mBaselineTextField, dateMode);
        SGDateUtility.convertPeriodValue(this.mStepTextField, dateMode);
        
        return true;
    }
    
    public Boolean isAxisLineVisible() {
        return this.mAxisLineVisibleCheckBox.getSelected();
    }

    public boolean setAxisLineVisible(final Boolean b) {
        this.mAxisLineVisibleCheckBox.setSelected(b);
        boolean flag = true;
        if (b != null) {
            flag = b.booleanValue();
        }
        this.mAxisLineComponentGroup.setEnabled(flag);
        return true;
    }

    public String getNumberDateFormat() {
        return (String) this.mNumberDateFormatComboBox.getSelectedItem();
    }

    public boolean setNumberDateFormat(final String format) {
        this.mNumberDateFormatComboBox.setSelectedItem(format);
        return true;
    }

    /**
     * Sets the visibility of the components related to the date mode.
     * 
     * @param visible
     *           true to set visible
     */
    protected void setDateComponentsVisible(final boolean b) {
    	this.mDateModeCheckBox.setVisible(b);
    	this.mMinDateButton.setVisible(b);
    	this.mMaxDateButton.setVisible(b);
    	this.mBaselineDateButton.setVisible(b);
    	this.mStepDateButton.setVisible(b);
    	this.mNumberDatePanel.setVisible(b);
    }
}
