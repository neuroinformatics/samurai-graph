package jp.riken.brain.ni.samuraigraph.figure.java2d;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;

import jp.riken.brain.ni.samuraigraph.base.SGAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGFillPaint;
import jp.riken.brain.ni.samuraigraph.base.SGGradationPaint;
import jp.riken.brain.ni.samuraigraph.base.SGGradationPaintDialog;
import jp.riken.brain.ni.samuraigraph.base.SGIConstants;
import jp.riken.brain.ni.samuraigraph.base.SGIPaint;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGITwoAxesDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPatternPaint;
import jp.riken.brain.ni.samuraigraph.base.SGPatternPaintDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyDialog;
import jp.riken.brain.ni.samuraigraph.base.SGSelectablePaint;
import jp.riken.brain.ni.samuraigraph.base.SGSpinner;
import jp.riken.brain.ni.samuraigraph.base.SGTransparentPaint;
import jp.riken.brain.ni.samuraigraph.base.SGTwoAxesSelectionPanel;
import jp.riken.brain.ni.samuraigraph.figure.SGDrawingElementLine;
import jp.riken.brain.ni.samuraigraph.figure.SGILineConstants;
import jp.riken.brain.ni.samuraigraph.figure.SGPaintConstants;

/**
 * A dialog to set the properties of rectangular shapes.
 */
public class SGRectangularShapeDialog extends SGPropertyDialog 
		implements SGILineConstants, SGITwoAxesDialog {
    
    // serialVersionUID
    private static final long serialVersionUID = 1791114777174503450L;

    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Rectangular Shape Properties";

    /** Creates new form SGRectangularShapeDialog */
    public SGRectangularShapeDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.initialize();
        this.pack();
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mPanel = new javax.swing.JPanel();
        mEdgeLineLabel = new javax.swing.JLabel();
        mEdgeLineSeparator = new javax.swing.JSeparator();
        mLeftSpaceLabel = new javax.swing.JLabel();
        mRightSpaceLabel = new javax.swing.JLabel();
        mBoundsLabel = new javax.swing.JLabel();
        mBoundsSeparator = new javax.swing.JSeparator();
        mLeftXValueLabel = new javax.swing.JLabel();
        mTopYValueLabel = new javax.swing.JLabel();
        mRightXValueLabel = new javax.swing.JLabel();
        mBottomYValueLabel = new javax.swing.JLabel();
        mBoundsAnchoredCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mBackgroundLabel = new javax.swing.JLabel();
        mBackgroundSeparator = new javax.swing.JSeparator();
        mLineColorLabel = new javax.swing.JLabel();
        mLineColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mInnerColorLabel = new javax.swing.JLabel();
        mInnerFillPaintButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mInnerPatternPaintButton = new jp.riken.brain.ni.samuraigraph.base.SGPatternPaintSelectionButton();
        mInnerGradationPaintButton = new jp.riken.brain.ni.samuraigraph.base.SGGradationPaintSelectionButton();
        mInnerFillPaintRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mInnerPatternPaintRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mInnerGradationPaintRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mEdgeLineWidthLabel = new javax.swing.JLabel();
        mEdgeLineWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mBackgroundTransparentLabel = new javax.swing.JLabel();
        mBackgroundTransparentSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mEdgeLineVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mEdgeLineTypeLabel = new javax.swing.JLabel();
        mEdgeLineTypeComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mLeftXPanel = new javax.swing.JPanel();
        mLeftXValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mLeftXDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mRightXPanel = new javax.swing.JPanel();
        mRightXValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mRightXDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mLeftYPanel = new javax.swing.JPanel();
        mBottomYValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mBottomYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mRightYPanel = new javax.swing.JPanel();
        mTopYValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mTopYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mHeadPanel = new javax.swing.JPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mPanel.setLayout(new java.awt.GridBagLayout());

        mEdgeLineLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mEdgeLineLabel.setText("Edge Line ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mEdgeLineLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 5);
        mPanel.add(mEdgeLineSeparator, gridBagConstraints);

        mLeftSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mPanel.add(mLeftSpaceLabel, gridBagConstraints);

        mRightSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        mPanel.add(mRightSpaceLabel, gridBagConstraints);

        mBoundsLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mBoundsLabel.setText("Bounds ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        mPanel.add(mBoundsLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 5, 5);
        mPanel.add(mBoundsSeparator, gridBagConstraints);

        mLeftXValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLeftXValueLabel.setText("Left X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mLeftXValueLabel, gridBagConstraints);

        mTopYValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTopYValueLabel.setText("Top Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        mPanel.add(mTopYValueLabel, gridBagConstraints);

        mRightXValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mRightXValueLabel.setText("Right X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        mPanel.add(mRightXValueLabel, gridBagConstraints);

        mBottomYValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBottomYValueLabel.setText("Bottom Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mBottomYValueLabel, gridBagConstraints);

        mBoundsAnchoredCheckBox.setText("Anchored");
        mBoundsAnchoredCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 0);
        mPanel.add(mBoundsAnchoredCheckBox, gridBagConstraints);

        mBackgroundLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mBackgroundLabel.setText("Background");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mBackgroundLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mPanel.add(mBackgroundSeparator, gridBagConstraints);

        mLineColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 10);
        mPanel.add(mLineColorLabel, gridBagConstraints);

        mLineColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 7, 5);
        mPanel.add(mLineColorButton, gridBagConstraints);

        mInnerColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mInnerColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        mPanel.add(mInnerColorLabel, gridBagConstraints);

        mInnerFillPaintButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mPanel.add(mInnerFillPaintButton, gridBagConstraints);

        mInnerPatternPaintButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mPanel.add(mInnerPatternPaintButton, gridBagConstraints);

        mInnerGradationPaintButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        mPanel.add(mInnerGradationPaintButton, gridBagConstraints);

        mInnerFillPaintRadioButton.setText("Fill");
        mInnerFillPaintRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mPanel.add(mInnerFillPaintRadioButton, gridBagConstraints);

        mInnerPatternPaintRadioButton.setText("Pattern");
        mInnerPatternPaintRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 3, 0);
        mPanel.add(mInnerPatternPaintRadioButton, gridBagConstraints);

        mInnerGradationPaintRadioButton.setText("Gradation");
        mInnerGradationPaintRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 10, 0);
        mPanel.add(mInnerGradationPaintRadioButton, gridBagConstraints);

        mEdgeLineWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mEdgeLineWidthLabel.setText("Line Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mEdgeLineWidthLabel, gridBagConstraints);

        mEdgeLineWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mEdgeLineWidthSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mEdgeLineWidthSpinner, gridBagConstraints);

        mBackgroundTransparentLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBackgroundTransparentLabel.setText("Transparency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 10);
        mPanel.add(mBackgroundTransparentLabel, gridBagConstraints);

        mBackgroundTransparentSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBackgroundTransparentSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mBackgroundTransparentSpinner, gridBagConstraints);

        mEdgeLineVisibleCheckBox.setText("Visible");
        mEdgeLineVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 5);
        mPanel.add(mEdgeLineVisibleCheckBox, gridBagConstraints);

        mEdgeLineTypeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mEdgeLineTypeLabel.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mEdgeLineTypeLabel, gridBagConstraints);

        mEdgeLineTypeComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mEdgeLineTypeComboBox.setPreferredSize(new java.awt.Dimension(140, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mEdgeLineTypeComboBox, gridBagConstraints);

        mLeftXPanel.setLayout(new java.awt.GridBagLayout());

        mLeftXValueTextField.setColumns(6);
        mLeftXValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mLeftXPanel.add(mLeftXValueTextField, gridBagConstraints);

        mLeftXDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mLeftXPanel.add(mLeftXDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mLeftXPanel, gridBagConstraints);

        mRightXPanel.setLayout(new java.awt.GridBagLayout());

        mRightXValueTextField.setColumns(6);
        mRightXValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mRightXPanel.add(mRightXValueTextField, gridBagConstraints);

        mRightXDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mRightXPanel.add(mRightXDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mRightXPanel, gridBagConstraints);

        mLeftYPanel.setLayout(new java.awt.GridBagLayout());

        mBottomYValueTextField.setColumns(6);
        mBottomYValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mLeftYPanel.add(mBottomYValueTextField, gridBagConstraints);

        mBottomYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mLeftYPanel.add(mBottomYDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mLeftYPanel, gridBagConstraints);

        mRightYPanel.setLayout(new java.awt.GridBagLayout());

        mTopYValueTextField.setColumns(6);
        mTopYValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mRightYPanel.add(mTopYValueTextField, gridBagConstraints);

        mTopYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mRightYPanel.add(mTopYDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mRightYPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(mPanel, gridBagConstraints);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(mHeadPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel mBackgroundLabel;
    private javax.swing.JSeparator mBackgroundSeparator;
    private javax.swing.JLabel mBackgroundTransparentLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mBackgroundTransparentSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mBottomYDateButton;
    private javax.swing.JLabel mBottomYValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mBottomYValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mBoundsAnchoredCheckBox;
    private javax.swing.JLabel mBoundsLabel;
    private javax.swing.JSeparator mBoundsSeparator;
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JLabel mEdgeLineLabel;
    private javax.swing.JSeparator mEdgeLineSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mEdgeLineTypeComboBox;
    private javax.swing.JLabel mEdgeLineTypeLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mEdgeLineVisibleCheckBox;
    private javax.swing.JLabel mEdgeLineWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mEdgeLineWidthSpinner;
    private javax.swing.JPanel mHeadPanel;
    private javax.swing.JLabel mInnerColorLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mInnerFillPaintButton;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mInnerFillPaintRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGGradationPaintSelectionButton mInnerGradationPaintButton;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mInnerGradationPaintRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGPatternPaintSelectionButton mInnerPatternPaintButton;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mInnerPatternPaintRadioButton;
    private javax.swing.JLabel mLeftSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mLeftXDateButton;
    private javax.swing.JPanel mLeftXPanel;
    private javax.swing.JLabel mLeftXValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mLeftXValueTextField;
    private javax.swing.JPanel mLeftYPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mLineColorButton;
    private javax.swing.JLabel mLineColorLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JPanel mPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    private javax.swing.JLabel mRightSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mRightXDateButton;
    private javax.swing.JPanel mRightXPanel;
    private javax.swing.JLabel mRightXValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mRightXValueTextField;
    private javax.swing.JPanel mRightYPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mTopYDateButton;
    private javax.swing.JLabel mTopYValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mTopYValueTextField;
    // End of variables declaration//GEN-END:variables

    private SGTwoAxesSelectionPanel mAxisPanel = new SGTwoAxesSelectionPanel();

    protected SGComponentGroup mDateXComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateYComponentGroup = new SGComponentGroup();

    private void initProperty() {
    	
    	this.mHeadPanel.add(this.mAxisPanel);
    	this.mAxisPanel.addAxisSelectionListener(this);

        // set the title
        this.setTitle(TITLE);

        // set up the combo box for the line type
        for (int ii = 0; ii < LINE_NAME_ARRAY.length; ii++) {
            this.mEdgeLineTypeComboBox.addItem(LINE_NAME_ARRAY[ii]);
        }
        
        {
            // create a button group for the radio buttons of inner paint types
            this.mNoInnerPaintStyleRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
            final ButtonGroup group  = new ButtonGroup();
            group.add(this.mInnerFillPaintRadioButton);
            group.add(this.mInnerPatternPaintRadioButton);
            group.add(this.mInnerGradationPaintRadioButton);
            group.add(this.mNoInnerPaintStyleRadioButton);
            this.mNoInnerPaintStyleRadioButton.setVisible(false);
        }

        //
        // spinner model
        //

        // edge line width
        this.mEdgeLineWidthSpinner.initProperties(
                getLineWidthSpinnerNumberModel(), LINE_WIDTH_UNIT,
                LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);

        // inner paint transparency
        this.mBackgroundTransparentSpinner.initProperties(
                new SpinnerNumberModel(100.0,
                        (float)SGPaintConstants.TRANSPARENCY_MIN,
                        (float)SGPaintConstants.TRANSPARENCY_MAX,
                        (float)SGPaintConstants.TRANSPARENCY_STEP),
                SGIConstants.percent,
                SGPaintConstants.TRANSPARENCY_FRAC_DIGIT_MIN,
                SGPaintConstants.TRANSPARENCY_FRAC_DIGIT_MAX);
        
        SGComponentGroupElement[] array = {
                new SGComponentGroupElement(this.mInnerColorLabel),
                new SGComponentGroupElement(this.mInnerFillPaintButton),
                new SGComponentGroupElement(this.mInnerFillPaintRadioButton),
                new SGComponentGroupElement(this.mInnerPatternPaintButton),
                new SGComponentGroupElement(this.mInnerPatternPaintRadioButton),
                new SGComponentGroupElement(this.mInnerGradationPaintButton),
                new SGComponentGroupElement(this.mInnerGradationPaintRadioButton)
        };

        this.mTransparentComponentGroup.addElement(array);

        // set the name
        this.mLeftXValueTextField.setDescription("Bounds-> LeftX");
        this.mRightXValueTextField.setDescription("Bounds-> RightX");
        this.mBottomYValueTextField.setDescription("Bounds-> BottomY");
        this.mTopYValueTextField.setDescription("Bounds-> TopY");
        this.mEdgeLineWidthSpinner.setDescription("Edge Line-> Line Width");
        this.mBackgroundTransparentSpinner.setDescription("Background-> Transparency");

        // add an action event listener
        this.mEdgeLineTypeComboBox.addActionListener(this);
        this.mEdgeLineVisibleCheckBox.addActionListener(this);
        this.mAxisPanel.addActionListener(this);
        this.mInnerPatternPaintButton.addActionListener(this);
        this.mInnerGradationPaintButton.addActionListener(this);
        this.mLeftXDateButton.addActionListener(this);
        this.mRightXDateButton.addActionListener(this);
        this.mTopYDateButton.addActionListener(this);
        this.mBottomYDateButton.addActionListener(this);
        
        this.mBackgroundTransparentSpinner.addChangeListener(this);
        
        // setup pattern paint dialog.
        this.mPatternPaintDialog = new SGPatternPaintDialog(this, "Pattern Paint Dialog", false);
        this.mPatternPaintDialog.pack();
        this.mPatternPaintDialog.setResizable(false);
        this.mPatternPaintDialog.addModelChangeListener(this);
        
        // setup gradation paint dialog.
        this.mGradationPaintDialog = new SGGradationPaintDialog(this, "Gradation Paint Dialog", false);
        this.mGradationPaintDialog.pack();
        this.mGradationPaintDialog.setResizable(false);
        this.mGradationPaintDialog.addModelChangeListener(this);
        
        SGComponentGroupElement[] dateXComponents = {
                new SGComponentGroupElement(this.mLeftXDateButton),
                new SGComponentGroupElement(this.mRightXDateButton) };
        SGComponentGroupElement[] dateYComponents = {
                new SGComponentGroupElement(this.mTopYDateButton),
                new SGComponentGroupElement(this.mBottomYDateButton) };
        this.mDateXComponentGroup.addElement(dateXComponents);
        this.mDateYComponentGroup.addElement(dateYComponents);
        
        // sets the calendar icon
        this.setCalendarIcon(this.mLeftXDateButton);
        this.setCalendarIcon(this.mRightXDateButton);
        this.setCalendarIcon(this.mTopYDateButton);
        this.setCalendarIcon(this.mBottomYDateButton);
    }
    
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mNoInnerPaintStyleRadioButton;
    
    /**
     * Pattern paint dialog.
     */
    private SGPatternPaintDialog mPatternPaintDialog;
    
    /**
     * Gradation paint dialog.
     */
    private SGGradationPaintDialog mGradationPaintDialog;

    /**
     * 
     */
    private SGComponentGroup mTransparentComponentGroup = new SGComponentGroup();

    // /**
    // *
    // *
    // */
    // public void dispose()
    // {
    // if( this.mAxisPanel!=null )
    // {
    // this.mAxisPanel.dispose();
    // this.mAxisPanel = null;
    // }
    //		
    // this.mTransparentComponentGroup.dispose();
    // this.mTransparentComponentGroup = null;
    //
    // super.dispose();
    // }
    
    @Override
    public void stateChanged(final ChangeEvent e) {
        Object source = e.getSource();
        if (source==this.mGradationPaintDialog) {
            SGGradationPaint gradation = this.mGradationPaintDialog.getGradationPaint();
            this.mInnerGradationPaintButton.setGradationPaint(gradation);
            return;
        } else if (source==this.mPatternPaintDialog) {
            SGPatternPaint patternPaint = this.mPatternPaintDialog.getPatternPaint();
            this.mInnerPatternPaintButton.setPatternPaint(patternPaint);
            return;
        } else if (source==this.mBackgroundTransparentSpinner) {
            if (null!=this.getTransparency()) {
                this.setTransparentComponentEnabled(Integer.valueOf(this.getTransparency().intValue()));
            }
        }
        super.stateChanged(e);
    }

    /**
     * 
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        super.actionPerformed(e);
        Object source = e.getSource();
        if (this.isVisible()) {
            if (source.equals(this.mInnerFillPaintButton)) {
                this.mInnerFillPaintRadioButton.setSelected(true);
            } else if (source.equals(this.mInnerPatternPaintButton)) {
                this.mInnerPatternPaintRadioButton.setSelected(true);
            } else if (source.equals(this.mInnerGradationPaintButton)) {
                this.mInnerGradationPaintRadioButton.setSelected(true);
            }
        }        
        if (source.equals(this.mInnerGradationPaintButton)) {
            if (!this.mGradationPaintDialog.isVisible()) {
                this.mGradationPaintDialog.setSelectedGradationPaint(
                		this.mInnerGradationPaintButton.getGradationPaint());
                this.mGradationPaintDialog.setLocation(
                        this.mInnerGradationPaintButton.getX() + 20,
                        this.mInnerGradationPaintButton.getY() + 20);
                this.mGradationPaintDialog.setVisible(true);
            }
        } else if (source.equals(this.mInnerPatternPaintButton)) {
            if (!this.mPatternPaintDialog.isVisible()) {
                this.mPatternPaintDialog.setSelectedPatternPaint(
                		this.mInnerPatternPaintButton.getPatternPaint());
                this.mPatternPaintDialog.setLocation(
                        this.mInnerPatternPaintButton.getX() + 20,
                        this.mInnerPatternPaintButton.getY() + 20);
                this.mPatternPaintDialog.setVisible(true);
            }
        } else if (source.equals(this.mEdgeLineVisibleCheckBox)) {
            this.setLineVisible(this.getLineVisible());
        } else if (source.equals(this.mLeftXDateButton)) {
        	this.onDateButtonPressed(this.mLeftXValueTextField);
        } else if (source.equals(this.mRightXDateButton)) {
        	this.onDateButtonPressed(this.mRightXValueTextField);
        } else if (source.equals(this.mTopYDateButton)) {
        	this.onDateButtonPressed(this.mTopYValueTextField);
        } else if (source.equals(this.mBottomYDateButton)) {
        	this.onDateButtonPressed(this.mBottomYValueTextField);
        }
    }

    /**
     * 
     */
    public List getColorSelectionButtonsList() {
        final List list = new ArrayList();
        list.add(this.mLineColorButton);
        list.add(this.mInnerFillPaintButton);
        return list;
    }

    /**
     * 
     */
    public List getTextFieldComponentsList() {
        final List list = this.getFormattedTextFieldsListFromSpinners();
        list.addAll(this.getAxisNumberTextFieldList());
        return list;
    }

    /**
     * Returns a list of text fields to set number.
     * 
     * @return
     */
    public List getAxisNumberTextFieldList() {
        final List list = new ArrayList();
        list.add(this.mLeftXValueTextField);
        list.add(this.mRightXValueTextField);
        list.add(this.mTopYValueTextField);
        list.add(this.mBottomYValueTextField);
        return list;
    }

    /**
     * 
     */
    public List<SGSpinner> getSpinnerList() {
        List<SGSpinner> list = new ArrayList<SGSpinner>();
        list.add(this.mEdgeLineWidthSpinner);
        list.add(this.mBackgroundTransparentSpinner);
        return list;
    }

    /**
     * 
     * @return
     */
    public boolean setDialogProperty() {
        List<SGIPropertyDialogObserver> list = this.mPropertyDialogObserverList;
        
        // select axis panel
        selectAxisPanel(this, this.mAxisPanel, list);

        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, list);

        SGIRectangularShapeDialogObserver rect0 = (SGIRectangularShapeDialogObserver) list
                .get(0);

        final double leftXValue0 = rect0.getLeftXValue();
        final double leftYValue0 = rect0.getTopYValue();
        final double rightXValue0 = rect0.getRightXValue();
        final double rightYValue0 = rect0.getBottomYValue();
        final float lineWidth0 = rect0.getLineWidth(pt);
        final int lineType0 = rect0.getLineType();
        final SGIPaint innerPaint0 = rect0.getInnerPaint();
        final Color lineColor0 = rect0.getLineColor();
        final boolean anchored0 = rect0.isAnchored();
        final boolean lineVisible0 = rect0.isLineVisible();

        Double leftXValue = Double.valueOf(leftXValue0);
        Double leftYValue = Double.valueOf(leftYValue0);
        Double rightXValue = Double.valueOf(rightXValue0);
        Double rightYValue = Double.valueOf(rightYValue0);
        Float lineWidth = Float.valueOf(lineWidth0);
        Integer lineType = Integer.valueOf(lineType0);
        SGIPaint innerPaint = innerPaint0;
        Color lineColor = lineColor0;
        Boolean anchored = Boolean.valueOf(anchored0);
        Boolean lineVisible = Boolean.valueOf(lineVisible0);

        if (list.size() > 1) {
            for (int ii = 1; ii < list.size(); ii++) {
                SGIRectangularShapeDialogObserver rect1 = (SGIRectangularShapeDialogObserver) list
                        .get(ii);
                final double xValue1 = rect1.getLeftXValue();
                if (leftXValue0 != xValue1) {
                    leftXValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIRectangularShapeDialogObserver rect1 = (SGIRectangularShapeDialogObserver) list
                        .get(ii);
                final double yValue1 = rect1.getTopYValue();
                if (leftYValue0 != yValue1) {
                    leftYValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIRectangularShapeDialogObserver rect1 = (SGIRectangularShapeDialogObserver) list
                        .get(ii);
                final double xValue1 = rect1.getRightXValue();
                if (rightXValue0 != xValue1) {
                    rightXValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIRectangularShapeDialogObserver rect1 = (SGIRectangularShapeDialogObserver) list
                        .get(ii);
                final double yValue1 = rect1.getBottomYValue();
                if (rightYValue0 != yValue1) {
                    rightYValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIRectangularShapeDialogObserver rect1 = (SGIRectangularShapeDialogObserver) list
                        .get(ii);
                final float lineWidth1 = rect1.getLineWidth(pt);
                if (lineWidth0 != lineWidth1) {
                    lineWidth = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIRectangularShapeDialogObserver rect1 = (SGIRectangularShapeDialogObserver) list
                        .get(ii);
                final int lineType1 = rect1.getLineType();
                if (lineType0 != lineType1) {
                    lineType = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIRectangularShapeDialogObserver rect1 = (SGIRectangularShapeDialogObserver) list
                        .get(ii);
                final SGIPaint paint1 = rect1.getInnerPaint();
                if (innerPaint0.equals(paint1) == false) {
                    innerPaint = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIRectangularShapeDialogObserver rect1 = (SGIRectangularShapeDialogObserver) list
                        .get(ii);
                final Color color1 = rect1.getLineColor();
                if (lineColor0.equals(color1) == false) {
                    lineColor = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIRectangularShapeDialogObserver rect1 = (SGIRectangularShapeDialogObserver) list
                        .get(ii);
                final boolean anchored1 = rect1.isAnchored();
                if (anchored0 != anchored1) {
                    anchored = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGIRectangularShapeDialogObserver rect1 = (SGIRectangularShapeDialogObserver) list
                        .get(ii);
                final boolean lineVisible1 = rect1.isLineVisible();
                if (lineVisible0 != lineVisible1) {
                    lineVisible = null;
                    break;
                }
            }
        }

        //
        this.setLeftXValue(leftXValue);
        this.setTopYValue(leftYValue);
        this.setRightXValue(rightXValue);
        this.setBottomYValue(rightYValue);

        this.setLineWidth(lineWidth);
        this.setLineType(lineType);
        this.setInnerPaint(innerPaint);
        this.setLineColor(lineColor);
        
        this.setAnchored(anchored);
        this.setLineVisible(lineVisible);

//        this.setColorButtonBorder(true);

        return true;
    }

    /**
     * 
     */
    public boolean setPropertiesToObserver(SGIPropertyDialogObserver l) {
        SGIRectangularShapeDialogObserver rect = (SGIRectangularShapeDialogObserver) l;

        // get values
        final int xConfig = this.mAxisPanel.getXAxisLocation();
        final int yConfig = this.mAxisPanel.getYAxisLocation();
        final Number leftX = this.getLeftXValue();
        final Number topY = this.getTopYValue();
        final Number rightX = this.getRightXValue();
        final Number bottomY = this.getBottomYValue();
        final Number lineWidth = this.getLineWidth();
        final int lineType = this.getLineType();
        final SGIPaint innerPaint = this.getInnerPaint();
        final Color lineColor = this.getLineColor();
        final Boolean anchored = this.getBoundsAnchored();
        final Boolean lineVisible = this.getLineVisible();

        // check values
        ArrayList<String> list = new ArrayList<String>();
        if (rect.hasValidLeftXValue(xConfig, leftX) == false) {
            list.add("LeftX");
        }
        if (rect.hasValidTopYValue(yConfig, topY) == false) {
            list.add("TopY");
        }
        if (rect.hasValidRightXValue(xConfig, rightX) == false) {
            list.add("RightX");
        }
        if (rect.hasValidBottomYValue(yConfig, bottomY) == false) {
            list.add("BottomY");
        }
        if (list.size() != 0) {
            StringBuffer sb = new StringBuffer();
            sb.append(ERRMSG_AXIS_VALUE_INVALID);
            sb.append(":\n");
            for (int ii = 0; ii < list.size(); ii++) {
                String str = (String) list.get(ii);
                sb.append('-');
                sb.append(str);
                sb.append('\n');
            }
            this.setInputErrorMessage(sb.toString());
            return false;
        }

        // set the related axes
        if (xConfig != -1) {
            rect.setXAxisLocation(xConfig);
        }

        if (yConfig != -1) {
            rect.setYAxisLocation(yConfig);
        }

        if (leftX != null) {
            rect.setLeftXValue(leftX.doubleValue());
        }

        if (topY != null) {
            rect.setTopYValue(topY.doubleValue());
        }

        if (rightX != null) {
            rect.setRightXValue(rightX.doubleValue());
        }

        if (bottomY != null) {
            rect.setBottomYValue(bottomY.doubleValue());
        }

        if (lineWidth != null) {
            rect.setLineWidth(lineWidth.floatValue(), pt);
        }

        // line type
        if (lineType != -1) {
            rect.setLineType(lineType);
        }

        if (innerPaint != null) {
            rect.setInnerPaint(innerPaint);
        }

        if (lineColor != null) {
            rect.setLineColor(lineColor);
        }
        
        if (lineVisible != null) {
            rect.setLineVisible(lineVisible);
        }
        
        if (anchored != null) {
            rect.setAnchored(anchored.booleanValue());
        }

        return true;
    }

    /**
     * 
     * @return
     */
    public Number getLeftXValue() {
        return this.getNumber(this.mLeftXValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getRightXValue() {
        return this.getNumber(this.mRightXValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getTopYValue() {
        return this.getNumber(this.mTopYValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getBottomYValue() {
        return this.getNumber(this.mBottomYValueTextField);
    }

    /**
     * 
     * @return
     */
    public Color getLineColor() {
        return this.mLineColorButton.getColor();
    }
    
    public Boolean getLineVisible() {
        return this.mEdgeLineVisibleCheckBox.getSelected();
    }
    
    public Boolean getBoundsAnchored() {
        return this.mBoundsAnchoredCheckBox.getSelected();
    }

    /**
     * 
     */
    public Color getInnerFillPaintColor() {
        return this.mInnerFillPaintButton.getColor();
    }
    
    public SGPatternPaint getInnerPatternPaint() {
        return this.mInnerPatternPaintButton.getPatternPaint();
    }
    
    public SGGradationPaint getInnerGradationPaint() {
        return this.mInnerGradationPaintButton.getGradationPaint();
    }
    
    public Integer getInnerColorStyle() {
        int style;
        if (this.mInnerFillPaintRadioButton.isSelected()) {
            style = SGSelectablePaint.STYLE_INDEX_FILL;
        } else if (this.mInnerPatternPaintRadioButton.isSelected()) {
            style = SGSelectablePaint.STYLE_INDEX_PATTERN;
        } else if (this.mInnerGradationPaintRadioButton.isSelected()) {
            style = SGSelectablePaint.STYLE_INDEX_GRADATION;
        } else {
            return null;
        }
        return Integer.valueOf(style);
    }
    
    public SGIPaint getInnerPaint() {
        SGSelectablePaint selectablePaint = new SGSelectablePaint();
        selectablePaint.setFillColor(this.getInnerFillPaintColor());
        selectablePaint.setPatternPaint(this.getInnerPatternPaint());
        selectablePaint.setGradationPaint(this.getInnerGradationPaint());
        selectablePaint.setSelectedPaintStyle(this.getInnerColorStyle().intValue());
        selectablePaint.setTransparency(this.getTransparency().intValue());
        return selectablePaint;
    }

    /**
     * 
     */
    public Number getLineWidth() {
        return this.mEdgeLineWidthSpinner.getNumber();
    }

    /**
     * 
     */
    public int getLineType() {
        final String typeName = (String) this.mEdgeLineTypeComboBox
                .getSelectedItem();
        if (typeName == null) {
            return -1;
        }
        final Integer num = SGDrawingElementLine.getLineTypeFromName(typeName);
        return num.intValue();
    }

    /**
     * 
     * @return
     */
    public Number getTransparency() {
        return this.mBackgroundTransparentSpinner.getNumber();
    }

    /**
     * 
     * @param value
     */
    public boolean setLeftXValue(final Object obj) {
        return this.setValue(this.mLeftXValueTextField, obj);
    }

    /**
     * 
     * @param value
     */
    public boolean setRightXValue(final Object obj) {
        return this.setValue(this.mRightXValueTextField, obj);
    }

    /**
     * 
     * @param value
     */
    public boolean setTopYValue(final Object obj) {
        return this.setValue(this.mTopYValueTextField, obj);
    }

    /**
     * 
     * @param value
     */
    public boolean setBottomYValue(final Object obj) {
        return this.setValue(this.mBottomYValueTextField, obj);
    }

    /**
     * 
     */
    public boolean setLineColor(final Color cl) {
        this.mLineColorButton.setColor(cl);
        return true;
    }
    
    public boolean setLineVisible(final Boolean b) {
        this.mEdgeLineVisibleCheckBox.setSelected(b);
        this.setEdgeLineComponentsEnabled(b);
        return true;
    }
    
    private void setEdgeLineComponentsEnabled(Boolean flag) {
        boolean b = true;
        if (flag != null) {
            b = flag.booleanValue();
        }
        this.mEdgeLineTypeLabel.setEnabled(b);
        this.mEdgeLineTypeComboBox.setEnabled(b);
        this.mEdgeLineWidthLabel.setEnabled(b);
        this.mEdgeLineWidthSpinner.setEnabled(b);
        this.mLineColorLabel.setEnabled(b);
        this.mLineColorButton.setEnabled(b);
    }
    
    public boolean setAnchored(final Boolean b) {
        this.mBoundsAnchoredCheckBox.setSelected(b);
        return true;
    }

    /**
     * 
     */
    public boolean setInnerPaint(final SGIPaint paint) {
        if (paint instanceof SGSelectablePaint) {
            SGSelectablePaint selectablePaint = (SGSelectablePaint)paint;
            this.setInnerPaintStyle(selectablePaint.getSelectedStyle());
            this.setInnerFillPaintColor(SGFillPaint.getOpaqueColor(selectablePaint.getFillColor()));
            this.setInnerPatternPaint(selectablePaint.getPatternPaint());
            this.setInnerGradationPaint(selectablePaint.getGradationPaint());
            this.setTransparent(Integer.valueOf(selectablePaint.getTransparencyPercent()));
            return true;
        } else if (paint instanceof SGFillPaint) {
            SGFillPaint fpaint = (SGFillPaint)paint;
            this.setInnerPaintStyle(SGSelectablePaint.STYLE_INDEX_FILL);
            this.setInnerFillPaintColor(SGFillPaint.getOpaqueColor((Color)fpaint.getPaint(null)));
            this.setTransparent(Integer.valueOf(fpaint.getTransparencyPercent()));
            return true;
        } else if (paint instanceof SGPatternPaint) {
            SGPatternPaint ppaint = (SGPatternPaint)paint;
            this.setInnerPaintStyle(SGSelectablePaint.STYLE_INDEX_PATTERN);
            this.setInnerPatternPaint(ppaint);
            this.setTransparent(Integer.valueOf(ppaint.getTransparencyPercent()));
            return true;
        } else if (paint instanceof SGGradationPaint) {
            SGGradationPaint gpaint = (SGGradationPaint)paint;
            this.setInnerPaintStyle(SGSelectablePaint.STYLE_INDEX_GRADATION);
            this.setInnerGradationPaint(gpaint);
            this.setTransparent(Integer.valueOf(gpaint.getTransparencyPercent()));
            return true;
        } else {
            return false;
        }
    }
    
    public boolean setInnerFillPaintColor(final Color color) {
        this.mInnerFillPaintButton.setColor(color);
        return true;
    }
    
    public boolean setInnerPatternPaint(final SGPatternPaint paint) {
        if (paint != null) {
            this.mInnerPatternPaintButton.setPatternPaint(paint);
            return true;
        } else {
            return false;
        }
    }
    
    public boolean setInnerGradationPaint(final SGGradationPaint paint) {
        if (paint != null) {
            this.mInnerGradationPaintButton.setGradationPaint(paint);
            return true;
        } else {
            return false;
        }
    }
    
    public boolean setInnerPaintStyle(final Object obj) {
        if (obj == null) {
            this.mNoInnerPaintStyleRadioButton.setSelected(true);
            return false;
        }
        Integer style = null;
        try {
            style = Integer.valueOf(obj.toString());
        } catch (NumberFormatException ex) {
            return false;
        }

        switch (style.intValue()) {
        case SGSelectablePaint.STYLE_INDEX_FILL :
            this.mInnerFillPaintRadioButton.setSelected(true);
            break;
        case SGSelectablePaint.STYLE_INDEX_PATTERN :
            this.mInnerPatternPaintRadioButton.setSelected(true);
            break;
        case SGSelectablePaint.STYLE_INDEX_GRADATION : 
            this.mInnerGradationPaintRadioButton.setSelected(true);
            break;
        default:
            throw new Error();
        }
        return true;
    }

    /**
     * 
     */
    public boolean setLineWidth(Object obj) {
        return this.setValue(this.mEdgeLineWidthSpinner, obj);
    }

    /**
     * 
     */
    public boolean setLineType(final Integer type) {
        if (type != null) {
            final String typeName = SGDrawingElementLine.getLineTypeName(type
                    .intValue());
            this.mEdgeLineTypeComboBox.setSelectedItem(typeName);
        } else {
            this.mEdgeLineTypeComboBox.setSelectedItem(null);
        }

        return true;
    }

    /**
     * 
     * @param alpha
     * @return
     */
    public boolean setTransparent(final Integer alpha) {
        setTransparentComponentEnabled(alpha);
        return this.setValue(this.mBackgroundTransparentSpinner, Float.valueOf(alpha.floatValue()));
    }
    
    private boolean setTransparentComponentEnabled(final Integer alpha) {
        if (alpha.equals(Integer.valueOf(SGTransparentPaint.ALL_TRANSPARENT_VALUE))) {
            return setTransparentComponentEnabled(Boolean.FALSE);
        } else {
            return setTransparentComponentEnabled(Boolean.TRUE);
        }
    }

    /**
     * 
     * @param b
     * @return
     */
    private boolean setTransparentComponentEnabled(final Boolean flag) {
        if (this.mTransparentComponentGroup.isEnabled()!=flag.booleanValue()) {
            this.mTransparentComponentGroup.setEnabled(flag.booleanValue());
        }

        return true;
    }

    /**
     * Returns the OK button.
     * @return
     *        the OK button
     */
    protected JButton getOKButton() {
        return this.mOKButton;
    }
    
    /**
     * Returns the cancel button.
     * @return
     *        the cancel button
     */
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    /**
     * Returns the preview button.
     * @return
     *        the preview button
     */
    protected JButton getPreviewButton() {
        return this.mPreviewButton;
    }

    /**
     * Overrode this method to check the input values.
     * 
     * @return true if all input values are valid
     */
    protected boolean hasValidInputValues() {
        boolean valid = true;
        if (super.hasValidInputValues() == false) {
            valid = false;
        }
        if (this.hasValidNumber(this.mLeftXValueTextField) == false) {
        	valid = false;
        }
        if (this.hasValidNumber(this.mRightXValueTextField) == false) {
        	valid = false;
        }
        if (this.hasValidNumber(this.mTopYValueTextField) == false) {
        	valid = false;
        }
        if (this.hasValidNumber(this.mBottomYValueTextField) == false) {
        	valid = false;
        }
    	return valid;
    }

	@Override
	public void onXAxisDateSelected(boolean selected) {
		this.mDateXComponentGroup.setEnabled(selected);
	}

	@Override
	public void onYAxisDateSelected(boolean selected) {
		this.mDateYComponentGroup.setEnabled(selected);
	}
	
	@Override
	public void onAxisSelectionStateChanged(SGAxisSelectionPanel axisPanel) {
        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, 
        		this.mPropertyDialogObserverList);
	}

}
