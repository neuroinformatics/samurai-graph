package jp.riken.brain.ni.samuraigraph.data;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.text.Document;

import jp.riken.brain.ni.samuraigraph.base.SGAttribute;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGDataColumnInfo;
import jp.riken.brain.ni.samuraigraph.base.SGDataColumnInfoSet;
import jp.riken.brain.ni.samuraigraph.base.SGIntegerSeriesSet;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;

/**
 * A panel to setup the properties of netCDF data.
 * 
 */
public class SGNetCDFDataSetupPanel extends SGDataSetupPanel implements DocumentListener, 
		SGINetCDFConstants {

    private static final long serialVersionUID = -7931773969660601629L;

    /** Creates new form SGNetCDFDataSetupPanel */
    public SGNetCDFDataSetupPanel() {
        super();
        initComponents();
        this.initProperty();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mSXYZDataStridePanel = new javax.swing.JPanel();
        mSXYZDataXStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mSXYZDataYStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mSXYZDataIndexStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mVXYDataStridePanel = new javax.swing.JPanel();
        mVXYDataXStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mVXYDataYStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mVXYDataIndexStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mSXYDataStridePanel = new javax.swing.JPanel();
        mSXYDataStrideMainPanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mSXYDataTickLabelStrideParentPanel = new javax.swing.JPanel();
        mSXYDataTickLabelStrideSyncCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mSXYDataTickLabelStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mSXYDataIndexStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mDataColumnSelectionPanel = new jp.riken.brain.ni.samuraigraph.data.SGNetCDFDataColumnSelectionPanel();
        mTabbedPane = new javax.swing.JTabbedPane();
        mOriginTabPanel = new javax.swing.JPanel();
        mOriginScrollPane = new javax.swing.JScrollPane();
        mOriginPanel = new javax.swing.JPanel();
        mStrideTabPanel = new javax.swing.JPanel();
        mStrideSubPanel = new javax.swing.JPanel();
        mStrideAvailableCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mStrideContainerPanel = new javax.swing.JPanel();
        mPickUpTabPanel = new javax.swing.JPanel();
        mPickUpSubPanel = new javax.swing.JPanel();
        mPickUpDimensionPanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mAttributeTabPanel = new javax.swing.JPanel();
        mAttributePanel = new jp.riken.brain.ni.samuraigraph.data.SGAttributePanel();
        mAttributeNorthLabel = new javax.swing.JLabel();
        mAttributeSouthLabel = new javax.swing.JLabel();
        mAttributeWestLabel = new javax.swing.JLabel();
        mAttributeEastLabel = new javax.swing.JLabel();
        mGlobalAttributeTabPanel = new javax.swing.JPanel();
        mGlobalAttributePanel = new jp.riken.brain.ni.samuraigraph.data.SGAttributePanel();
        mGlobalAttributeNorthLabel = new javax.swing.JLabel();
        mGlobalAttributeSouthLabel = new javax.swing.JLabel();
        mGlobalAttributeWestLabel = new javax.swing.JLabel();
        mGlobalAttributeEastLabel = new javax.swing.JLabel();

        mSXYZDataStridePanel.setLayout(new java.awt.GridBagLayout());

        mSXYZDataXStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "X", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYZDataStridePanel.add(mSXYZDataXStridePanel, gridBagConstraints);

        mSXYZDataYStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Y", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYZDataStridePanel.add(mSXYZDataYStridePanel, gridBagConstraints);

        mSXYZDataIndexStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Index", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYZDataStridePanel.add(mSXYZDataIndexStridePanel, gridBagConstraints);

        mVXYDataStridePanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataXStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "X", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mVXYDataStridePanel.add(mVXYDataXStridePanel, gridBagConstraints);

        mVXYDataYStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Y", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mVXYDataStridePanel.add(mVXYDataYStridePanel, gridBagConstraints);

        mVXYDataIndexStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Index", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mVXYDataStridePanel.add(mVXYDataIndexStridePanel, gridBagConstraints);

        mSXYDataStridePanel.setLayout(new java.awt.GridBagLayout());

        mSXYDataStrideMainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Line and Bar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        mSXYDataStridePanel.add(mSXYDataStrideMainPanel, gridBagConstraints);

        mSXYDataTickLabelStrideParentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tick Label", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mSXYDataTickLabelStrideParentPanel.setLayout(new java.awt.GridBagLayout());

        mSXYDataTickLabelStrideSyncCheckBox.setText("Sync");
        mSXYDataTickLabelStrideSyncCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mSXYDataTickLabelStrideParentPanel.add(mSXYDataTickLabelStrideSyncCheckBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYDataTickLabelStrideParentPanel.add(mSXYDataTickLabelStridePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        mSXYDataStridePanel.add(mSXYDataTickLabelStrideParentPanel, gridBagConstraints);

        mSXYDataIndexStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Index", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mSXYDataStridePanel.add(mSXYDataIndexStridePanel, gridBagConstraints);

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(mDataColumnSelectionPanel, gridBagConstraints);

        mTabbedPane.setFont(new java.awt.Font("Dialog", 1, 12));

        mOriginTabPanel.setLayout(new java.awt.BorderLayout());

        mOriginScrollPane.setBorder(null);
        mOriginScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        mOriginScrollPane.setHorizontalScrollBar(null);
        mOriginScrollPane.setPreferredSize(new java.awt.Dimension(0, 220));

        mOriginPanel.setLayout(new javax.swing.BoxLayout(mOriginPanel, javax.swing.BoxLayout.Y_AXIS));
        mOriginScrollPane.setViewportView(mOriginPanel);

        mOriginTabPanel.add(mOriginScrollPane, java.awt.BorderLayout.CENTER);

        mTabbedPane.addTab("Origin", mOriginTabPanel);

        mStrideTabPanel.setLayout(new java.awt.BorderLayout());

        mStrideSubPanel.setLayout(new java.awt.GridBagLayout());

        mStrideAvailableCheckBox.setText("Available");
        mStrideAvailableCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mStrideSubPanel.add(mStrideAvailableCheckBox, gridBagConstraints);

        mStrideContainerPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mStrideSubPanel.add(mStrideContainerPanel, gridBagConstraints);

        mStrideTabPanel.add(mStrideSubPanel, java.awt.BorderLayout.NORTH);

        mTabbedPane.addTab("Array Section", mStrideTabPanel);

        mPickUpTabPanel.setLayout(new java.awt.BorderLayout());

        mPickUpSubPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        mPickUpSubPanel.add(mPickUpDimensionPanel, gridBagConstraints);

        mPickUpTabPanel.add(mPickUpSubPanel, java.awt.BorderLayout.NORTH);

        mTabbedPane.addTab("Pick Up", mPickUpTabPanel);

        mAttributeTabPanel.setLayout(new java.awt.BorderLayout());
        mAttributeTabPanel.add(mAttributePanel, java.awt.BorderLayout.CENTER);

        mAttributeNorthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mAttributeNorthLabel.setText(" ");
        mAttributeTabPanel.add(mAttributeNorthLabel, java.awt.BorderLayout.NORTH);

        mAttributeSouthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mAttributeSouthLabel.setText(" ");
        mAttributeTabPanel.add(mAttributeSouthLabel, java.awt.BorderLayout.SOUTH);

        mAttributeWestLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mAttributeWestLabel.setText("    ");
        mAttributeTabPanel.add(mAttributeWestLabel, java.awt.BorderLayout.WEST);

        mAttributeEastLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mAttributeEastLabel.setText("    ");
        mAttributeTabPanel.add(mAttributeEastLabel, java.awt.BorderLayout.EAST);

        mTabbedPane.addTab("Attributes", mAttributeTabPanel);

        mGlobalAttributeTabPanel.setLayout(new java.awt.BorderLayout());
        mGlobalAttributeTabPanel.add(mGlobalAttributePanel, java.awt.BorderLayout.CENTER);

        mGlobalAttributeNorthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mGlobalAttributeNorthLabel.setText(" ");
        mGlobalAttributeTabPanel.add(mGlobalAttributeNorthLabel, java.awt.BorderLayout.NORTH);

        mGlobalAttributeSouthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mGlobalAttributeSouthLabel.setText(" ");
        mGlobalAttributeTabPanel.add(mGlobalAttributeSouthLabel, java.awt.BorderLayout.SOUTH);

        mGlobalAttributeWestLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mGlobalAttributeWestLabel.setText("    ");
        mGlobalAttributeTabPanel.add(mGlobalAttributeWestLabel, java.awt.BorderLayout.WEST);

        mGlobalAttributeEastLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mGlobalAttributeEastLabel.setText("    ");
        mGlobalAttributeTabPanel.add(mGlobalAttributeEastLabel, java.awt.BorderLayout.EAST);

        mTabbedPane.addTab("Global Attributes", mGlobalAttributeTabPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(mTabbedPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel mAttributeEastLabel;
    private javax.swing.JLabel mAttributeNorthLabel;
    private jp.riken.brain.ni.samuraigraph.data.SGAttributePanel mAttributePanel;
    private javax.swing.JLabel mAttributeSouthLabel;
    private javax.swing.JPanel mAttributeTabPanel;
    private javax.swing.JLabel mAttributeWestLabel;
    private jp.riken.brain.ni.samuraigraph.data.SGNetCDFDataColumnSelectionPanel mDataColumnSelectionPanel;
    private javax.swing.JLabel mGlobalAttributeEastLabel;
    private javax.swing.JLabel mGlobalAttributeNorthLabel;
    private jp.riken.brain.ni.samuraigraph.data.SGAttributePanel mGlobalAttributePanel;
    private javax.swing.JLabel mGlobalAttributeSouthLabel;
    private javax.swing.JPanel mGlobalAttributeTabPanel;
    private javax.swing.JLabel mGlobalAttributeWestLabel;
    private javax.swing.JPanel mOriginPanel;
    private javax.swing.JScrollPane mOriginScrollPane;
    private javax.swing.JPanel mOriginTabPanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mPickUpDimensionPanel;
    private javax.swing.JPanel mPickUpSubPanel;
    private javax.swing.JPanel mPickUpTabPanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYDataIndexStridePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYDataStrideMainPanel;
    private javax.swing.JPanel mSXYDataStridePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYDataTickLabelStridePanel;
    private javax.swing.JPanel mSXYDataTickLabelStrideParentPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mSXYDataTickLabelStrideSyncCheckBox;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYZDataIndexStridePanel;
    private javax.swing.JPanel mSXYZDataStridePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYZDataXStridePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYZDataYStridePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mStrideAvailableCheckBox;
    private javax.swing.JPanel mStrideContainerPanel;
    private javax.swing.JPanel mStrideSubPanel;
    private javax.swing.JPanel mStrideTabPanel;
    private javax.swing.JTabbedPane mTabbedPane;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mVXYDataIndexStridePanel;
    private javax.swing.JPanel mVXYDataStridePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mVXYDataXStridePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mVXYDataYStridePanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Array of data columns.
     */
    private SGDataColumnInfo[] mDataColumns;

    private SGComponentGroup mTickLabelStrideComponentGroup = new SGComponentGroup();

    private SGComponentGroup mTickLabelComponentGroup = new SGComponentGroup();
    
    private SGComponentGroup mGridComponentGroup = new SGComponentGroup();
    
    private SGComponentGroup mIndexComponentGroup = new SGComponentGroup();
    
    private SGComponentGroup mStrideComponentGroup = new SGComponentGroup();

    private void initProperty() {
    	this.addDocumentListener(this);
    	this.mStrideAvailableCheckBox.addActionListener(this);
    	this.mSXYDataTickLabelStrideSyncCheckBox.addActionListener(this);
    	
        // creates a map of component groups
        Map<Component, SGComponentGroupElement> compMap = new HashMap<Component, SGComponentGroupElement>();
        this.addComponentGroupMap(this.mSXYDataStrideMainPanel, compMap);
        this.addComponentGroupMap(this.mSXYDataTickLabelStrideSyncCheckBox, compMap);
        this.addComponentGroupMap(this.mSXYDataTickLabelStridePanel, compMap);
        this.addComponentGroupMap(this.mVXYDataXStridePanel, compMap);
        this.addComponentGroupMap(this.mVXYDataYStridePanel, compMap);
        this.addComponentGroupMap(this.mSXYZDataXStridePanel, compMap);
        this.addComponentGroupMap(this.mSXYZDataYStridePanel, compMap);
        this.addComponentGroupMap(this.mSXYDataIndexStridePanel, compMap);
        this.addComponentGroupMap(this.mVXYDataIndexStridePanel, compMap);
        this.addComponentGroupMap(this.mSXYZDataIndexStridePanel, compMap);
        
		List<SGComponentGroupElement> tickLabelStrideComponents = new ArrayList<SGComponentGroupElement>();
		tickLabelStrideComponents.add(compMap.get(this.mSXYDataTickLabelStridePanel));
		List<SGComponentGroupElement> tickLabelComponents = new ArrayList<SGComponentGroupElement>();
		tickLabelComponents.addAll(tickLabelStrideComponents);
		tickLabelComponents.add(compMap.get(this.mSXYDataTickLabelStrideSyncCheckBox));
		this.mTickLabelStrideComponentGroup.addElement(tickLabelStrideComponents);
		this.mTickLabelComponentGroup.addElement(tickLabelComponents);

		List<SGComponentGroupElement> gridStrideComponents = new ArrayList<SGComponentGroupElement>();
		gridStrideComponents.add(compMap.get(this.mSXYDataStrideMainPanel));
		gridStrideComponents.add(compMap.get(this.mVXYDataXStridePanel));
		gridStrideComponents.add(compMap.get(this.mVXYDataYStridePanel));
		gridStrideComponents.add(compMap.get(this.mSXYZDataXStridePanel));
		gridStrideComponents.add(compMap.get(this.mSXYZDataYStridePanel));
		this.mGridComponentGroup.addElement(gridStrideComponents);

		List<SGComponentGroupElement> serialNumberStrideComponents = new ArrayList<SGComponentGroupElement>();
		serialNumberStrideComponents.add(compMap.get(this.mSXYDataIndexStridePanel));
		serialNumberStrideComponents.add(compMap.get(this.mVXYDataIndexStridePanel));
		serialNumberStrideComponents.add(compMap.get(this.mSXYZDataIndexStridePanel));
		this.mIndexComponentGroup.addElement(serialNumberStrideComponents);
		
		this.mStrideComponentGroup.addElement(gridStrideComponents);
		this.mStrideComponentGroup.addElement(tickLabelComponents);
		this.mStrideComponentGroup.addElement(serialNumberStrideComponents);
    }
    
    private void addComponentGroupMap(Component comp, Map<Component, SGComponentGroupElement> map) {
    	map.put(comp, new SGComponentGroupElement(comp));
    }

    /**
     * The netCDF file.
     */
    private SGNetCDFFile mNetCDFFile = null;

    /**
     * Sets the netCDF data.
     * 
     * @param ncFile
     *           the netCDF data
     * @param dataType
     *            type of data
     * @param colInfoSet
     *            data columns
     * @param infoMap
     *            a map of information
     * @param showDefault
     *            a flag whether to show default column type
     * @return true if succeeded
     */
    public boolean setData(SGNetCDFFile ncFile, String dataType,
            SGDataColumnInfoSet colInfoSet,
            Map<String, Object> infoMap, final boolean showDefault) {
        
        // check input values
        if (ncFile == null || dataType == null || colInfoSet == null
                || infoMap == null) {
            throw new IllegalArgumentException(
                    "ncFile == null || dataType == null || colInfoSet == null || infoMap == null");
        }
        
        this.mTemporaryColumnInfo.clearColumnInfo();
        
        SGDataColumnInfo[] cols = colInfoSet.getDataColumnInfoArray();
        this.mDataColumns = new SGNetCDFDataColumnInfo[cols.length];
        for (int ii = 0; ii < cols.length; ii++) {
            this.mDataColumns[ii] = (SGNetCDFDataColumnInfo) cols[ii];
        }

        // put the netCDF data into a map
        infoMap.put(SGIDataInformationKeyConstants.KEY_DATA_SOURCE, ncFile);
        
        // clear all
        this.clear();

        // set to the attribute
        this.mNetCDFFile = ncFile;
        this.mDataType = dataType;
        this.mInfoMap = infoMap;
        this.mInfoMap.put(SGIDataInformationKeyConstants.KEY_DATA_TYPE, dataType);
        
        // get variables
        List<SGNetCDFVariable> varList = ncFile.getVariables();
        
        // set global attributes
        this.mGlobalAttributePanel.setAttributes(ncFile.getAttributes());
        
        // setup the table
        if (this.mDataColumnSelectionPanel.setData(dataType, colInfoSet, infoMap,
                showDefault) == false) {
            return false;
        }
        
        // set up the tabbed pane
        boolean pickUpTabEnabled = false;
        JPanel stridePanel = null;
        if (SGDataUtility.isSXYTypeData(dataType)) {
        	pickUpTabEnabled = true;
        	stridePanel = this.mSXYDataStridePanel;
        } else if (SGDataUtility.isVXYTypeData(dataType)) {
        	pickUpTabEnabled = false;
        	stridePanel = this.mVXYDataStridePanel;
        } else if (SGDataUtility.isSXYZTypeData(dataType)) {
        	pickUpTabEnabled = false;
        	stridePanel = this.mSXYZDataStridePanel;
        }
        final int pickUpTabIndex = this.mTabbedPane.indexOfComponent(this.mPickUpTabPanel);
    	this.mTabbedPane.setEnabledAt(pickUpTabIndex, pickUpTabEnabled);
    	if (!pickUpTabEnabled) {
        	if (this.mTabbedPane.getSelectedIndex() == pickUpTabIndex) {
        		this.mTabbedPane.setSelectedComponent(this.mOriginTabPanel);
        	}
    	}
    	this.mStrideContainerPanel.removeAll();
    	this.mStrideContainerPanel.add(stridePanel);

        // add panels of coordinate variables
        int cnt = 0;
        List<SGNetCDFDimensionPanel> dimensionPanelList = new ArrayList<SGNetCDFDimensionPanel>();
        for (SGNetCDFVariable var : varList) {
            if (var.isCoordinateVariable()) {
                if (cnt > 0) {
                	this.mOriginPanel.add(new JSeparator());
                }
                
                final String name = var.getName();
                SGNetCDFDataColumnInfo info = null;
                for (int ii = 0; ii < this.mDataColumns.length; ii++) {
                	SGNetCDFDataColumnInfo col = (SGNetCDFDataColumnInfo) this.mDataColumns[ii];
                    if (name.equals(col.getName())) {
                    	info = col;
                        break;
                    }
                }
                if (info == null) {
                	return false;
                }
                double[] values = var.getNumberArray();
                if (values == null) {
                	return false;
                }
                SGNetCDFDimensionPanel p = new SGNetCDFDimensionPanel();
                p.setDimensionName(info.getName());
                p.setValues(values, info.getOrigin());
                p.setUnit(info.getUnitsString());
                this.mOriginPanel.add(p);
                dimensionPanelList.add(p);
                cnt++;
            }
        }
        
        // update the components
        this.updateComponentsWithTable();
        
        // initializes stride components
        final Boolean strideAvailable = (Boolean) infoMap.get(
        		SGIDataInformationKeyConstants.KEY_STRIDE_AVAILABLE);
        final boolean b;
        if (strideAvailable != null) {
        	b = strideAvailable.booleanValue();
        } else {
        	b = false;
        }
        this.mStrideAvailableCheckBox.setSelected(b);
        this.mStrideComponentGroup.setEnabled(b);

        // updates the parameters for stride of arrays
        SwingUtilities.invokeLater(new Runnable() {
        	public void run() {
        		initStride();
        	}
        });
        
        // sets attributes
        SwingUtilities.invokeLater(new Runnable() {
        	public void run() {
        		updateAttributePanel();
        	};
        });

        return true;
    }

    /**
     * Returns whether stride of data arrays is available.
     * 
     * @return true if stride of data arrays is available
     */
    public boolean isStrideAvailable() {
    	return this.mStrideAvailableCheckBox.isSelected();
    }
    
    public boolean isIndexAvailable() {
    	return this.isIndexAvailable(this.getDataColumnInfoArray());
    }

    private boolean isIndexAvailable(SGDataColumnInfo[] cols) {
		List<SGDataColumnInfo> indexColumnList = this.findColumnsWithColumnType(cols, INDEX);
		return (indexColumnList.size() == 1);
    }

    private boolean isTickLabelAvailable() {
    	return this.isTickLabelAvailable(this.getDataColumnInfoArray());
    }
    
    private boolean isTickLabelAvailable(SGDataColumnInfo[] cols) {
		List<SGDataColumnInfo> tickLabelColumnList = this.findColumnsWithColumnTypeStartsWith(
				cols, TICK_LABEL);
		if (tickLabelColumnList.size() > 0) {
			return true;
		}
		List<SGDataColumnInfo> dateColumnList = this.findColumnsWithValueType(
				cols, VALUE_TYPE_DATE);
		if (dateColumnList.size() > 0) {
			return true;
		}
		return false;
    }

	private void initStride() {
		SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
		Map<String, String> dimNameMap = new HashMap<String, String>();

		if (this.isIndexAvailable(cols)) {
			// index is available

			String keyStride;
			SGIndexPanel indexStridePanel;
			if (SGDataUtility.isSXYTypeData(this.mDataType)) {
				keyStride = SGIDataInformationKeyConstants.KEY_SXY_INDEX_STRIDE;
				indexStridePanel = this.mSXYDataIndexStridePanel;
			} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
				keyStride = SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE;
				indexStridePanel = this.mSXYZDataIndexStridePanel;
			} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
				keyStride = SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE;
				indexStridePanel = this.mVXYDataIndexStridePanel;
			} else {
				return;
			}

			SGIntegerSeriesSet stride = (SGIntegerSeriesSet) this.mInfoMap
					.get(keyStride);
			final int len;
			if (stride == null) {
				Map<String, SGIntegerSeriesSet> strideMap 
						= SGDataUtility.calcNetCDFDefaultStride(cols, this.mInfoMap, dimNameMap);
				final String name = dimNameMap.get(keyStride);
				SGNetCDFDataColumnInfo ncInfo = (SGNetCDFDataColumnInfo) this.findColumnWithName(cols, name);
				len = ncInfo.getDimension(0).getLength();
				stride = strideMap.get(keyStride);
			} else {
				len = SGDataUtility.getNetCDFDataIndexLength(cols);
				stride = SGUtility.createIndicesWithinRange(stride, len);
			}
			indexStridePanel.setLength(len);
			indexStridePanel.setIndices(stride);

			if (SGDataUtility.isSXYTypeData(this.mDataType)) {
				// tick label
				this.initTickLabelStride(stride, len, cols);
			}
			
		} else {
			if (SGDataUtility.isSXYTypeData(this.mDataType)) {
				SGIntegerSeriesSet stride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_SXY_STRIDE);
				final int len;
				if (stride == null) {
					Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility
							.calcNetCDFDefaultStride(cols, this.mInfoMap, dimNameMap);
					final String name = dimNameMap
							.get(SGIDataInformationKeyConstants.KEY_SXY_STRIDE);
					SGNetCDFDataColumnInfo ncInfo = (SGNetCDFDataColumnInfo) this.findColumnWithName(
							cols, name);
					len = ncInfo.getDimension(0).getLength();
					stride = strideMap.get(SGIDataInformationKeyConstants.KEY_SXY_STRIDE);
				} else {
					len = SGDataUtility.getSXYNetCDFDataLength(cols);
                	stride = SGUtility.createIndicesWithinRange(stride, len);
				}
				this.mSXYDataStrideMainPanel.setLength(len);
				this.mSXYDataStrideMainPanel.setIndices(stride);

				// tick label
				this.initTickLabelStride(stride, len, cols);

			} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {

				SGIntegerSeriesSet xStride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X);
				SGIntegerSeriesSet yStride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y);
				final int lenX, lenY;
				if (xStride == null || yStride == null) {
					Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility
							.calcNetCDFDefaultStride(cols, this.mInfoMap, dimNameMap);
					final String nameX = dimNameMap
							.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X);
					final String nameY = dimNameMap
							.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y);
					SGNetCDFDataColumnInfo ncInfoX = (SGNetCDFDataColumnInfo) this.findColumnWithName(
							cols, nameX);
					SGNetCDFDataColumnInfo ncInfoY = (SGNetCDFDataColumnInfo) this.findColumnWithName(
							cols, nameY);
					lenX = ncInfoX.getDimension(0).getLength();
					lenY = ncInfoY.getDimension(0).getLength();
					xStride = strideMap
							.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X);
					yStride = strideMap
							.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y);
				} else {
					lenX = SGDataUtility.getSXYZNetCDFDataXLength(cols);
					lenY = SGDataUtility.getSXYZNetCDFDataYLength(cols);
					xStride = SGUtility.createIndicesWithinRange(xStride, lenX);
					yStride = SGUtility.createIndicesWithinRange(yStride, lenY);
				}
				this.mSXYZDataXStridePanel.setLength(lenX);
				this.mSXYZDataYStridePanel.setLength(lenY);
				this.mSXYZDataXStridePanel.setIndices(xStride);
				this.mSXYZDataYStridePanel.setIndices(yStride);

			} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
				SGIntegerSeriesSet xStride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X);
				SGIntegerSeriesSet yStride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y);
				final int lenX, lenY;
				if (xStride == null || yStride == null) {
					Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility
							.calcNetCDFDefaultStride(cols, this.mInfoMap, dimNameMap);
					final String nameX = dimNameMap
							.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X);
					final String nameY = dimNameMap
							.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y);
					SGNetCDFDataColumnInfo ncInfoX = (SGNetCDFDataColumnInfo) this.findColumnWithName(
							cols, nameX);
					SGNetCDFDataColumnInfo ncInfoY = (SGNetCDFDataColumnInfo) this.findColumnWithName(
							cols, nameY);
					lenX = ncInfoX.getDimension(0).getLength();
					lenY = ncInfoY.getDimension(0).getLength();
					xStride = strideMap
							.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X);
					yStride = strideMap
							.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y);
				} else {
					lenX = SGDataUtility.getVXYNetCDFDataXLength(cols);
					lenY = SGDataUtility.getVXYNetCDFDataYLength(cols);
					xStride = SGUtility.createIndicesWithinRange(xStride, lenX);
					yStride = SGUtility.createIndicesWithinRange(yStride, lenY);
				}
				this.mVXYDataXStridePanel.setLength(lenX);
				this.mVXYDataYStridePanel.setLength(lenY);
				this.mVXYDataXStridePanel.setIndices(xStride);
				this.mVXYDataYStridePanel.setIndices(yStride);
			}
		}
	}
	
	// Initializes the stride for tick labels.
	private void initTickLabelStride(final SGIntegerSeriesSet stride, final int len,
			SGDataColumnInfo[] cols) {
		SGIntegerSeriesSet strideTickLabel = (SGIntegerSeriesSet) this.mInfoMap
				.get(SGIDataInformationKeyConstants.KEY_SXY_TICK_LABEL_STRIDE);
		boolean sync = SGUtility.equals(strideTickLabel, stride);
		final int lenTickLabel;
		if (strideTickLabel == null) {
			// synchronize with main stride
			strideTickLabel = stride;
			lenTickLabel = len;
			sync = true;
		} else {
			if (sync) {
				strideTickLabel = stride;
				lenTickLabel = len;
			} else {
				lenTickLabel = SGDataUtility.getSXYNetCDFDataLength(cols);
			}
			strideTickLabel = SGUtility.createIndicesWithinRange(strideTickLabel, lenTickLabel);
		}
		this.mSXYDataTickLabelStridePanel.setLength(lenTickLabel);
		this.mSXYDataTickLabelStridePanel.setIndices(strideTickLabel);
		this.mSXYDataTickLabelStrideSyncCheckBox.setSelected(sync);
		this.mTickLabelStrideComponentGroup.setEnabled(!sync);
	}
    
    /**
     * Set information of data columns.
     * 
     * @param data
     *            netCDF data
     * @param colInfoSet
     *            data columns
     * @param infoMap
     *            a map of information
     * @param showDefault
     *            a flag whether to show default column type
     * @return true if succeeded
     */
    public boolean setData(SGNetCDFData data, 
            SGDataColumnInfoSet colInfoSet,
            Map<String, Object> infoMap, final boolean showDefault) {

        // set data
        if (this.setData(data.getNetcdfFile(), data.getDataType(), colInfoSet,
        		infoMap, showDefault) == false) {
            return false;
        }

        return true;
    }
    
    /**
     * Returns selected column types.
     * 
     * @return
     *        selected column types
     */
    public SGDataColumnInfo[] getDataColumnTypes() {
    	
        SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
        SGNetCDFDataColumnInfo[] colInfo = new SGNetCDFDataColumnInfo[cols.length];
        for (int ii = 0; ii < cols.length; ii++) {
        	
        	SGNetCDFDataColumnInfo info = (SGNetCDFDataColumnInfo) cols[ii];
        	
            // get values
        	String name = info.getName();
            SGNetCDFVariable var = this.mNetCDFFile.findVariable(name);
            final int origin = this.getOriginIndex(name);
            String columnType = cols[ii].getColumnType();
            String valueType = info.getValueType();
            
            // create a new instance
            colInfo[ii] = new SGNetCDFDataColumnInfo(var, var.getName(), valueType, origin);
            colInfo[ii].setColumnType(columnType);
        }
        
        return colInfo;
    }
    
    /**
     * Returns the current value of a coordinate variable.
     * 
     * @param name
     *           the name of a coordinate variable
     * @return
     *           the current value of a given coordinate variable
     */
    public double getOriginValue(String name) {
    	SGNetCDFVariable var = this.mNetCDFFile.findVariable(name);
        if (var == null) {
            return -1;
        }
        if (!var.isCoordinateVariable()) {
            return -1;
        }
        SGNetCDFDimensionPanel p = this.getDimensionPanel(name);
        return p.getCurrentValue();
    }

    /**
     * Returns the current index of a coordinate variable.
     * 
     * @param name
     *           the name of a coordinate variable
     * @return
     *           the current index of a given coordinate variable
     */
    public int getOriginIndex(String name) {
    	SGNetCDFVariable var = this.mNetCDFFile.findVariable(name);
        if (var == null) {
            return -1;
        }
        if (!var.isCoordinateVariable()) {
            return -1;
        }
        SGNetCDFDimensionPanel p = this.getDimensionPanel(name);
        return p.getCurrentIndex();
    }

    /**
     * Updates the components with variables in the table.
     *
     */
	@Override
    protected void updateComponentsWithTable() {
        
        // create a list of the names of selected variables
        SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
        
        final boolean indexAvailable = this.isIndexAvailable(cols);

        // refresh the columns that error bars and tick labels are appended
        this.clearUselessColumnType(cols);

		if (SGDataUtility.isSXYTypeData(this.mDataType)) {
	        // get information of picked up dimension
	        SGNetCDFDataColumnInfo pickUpColumn = null;
	        int pickUpCnt = 0;
	        for (int ii = 0; ii < cols.length; ii++) {
	            SGNetCDFDataColumnInfo info = (SGNetCDFDataColumnInfo) cols[ii];
	            String type = info.getColumnType();
	            if (PICKUP.equals(type)) {
	            	pickUpColumn = info;
	            	pickUpCnt++;
	            	if (pickUpCnt > 1) {
	            		break;
	            	}
	            }
	        }
	        final boolean multipleVariable = (pickUpColumn == null);
	        this.mInfoMap.put(SGIDataInformationKeyConstants.KEY_SXY_MULTIPLE_VARIABLE, Boolean.valueOf(multipleVariable));
	        
	        // set enabled/disabled the panel for picked up dimension
	        final boolean pickUpEnabled = !multipleVariable && (pickUpCnt == 1);
	        this.mPickUpDimensionPanel.setInnerComponentsEnabled(pickUpEnabled);

	        if (pickUpEnabled) {
				// set the length of selected dimension
	    		SGDimensionInfo dim = pickUpColumn.getDimension(0);
				this.mPickUpDimensionPanel.setLength(dim.getLength());
				
	            if (!this.mInfoMap.keySet().contains(SGIDataInformationKeyConstants.KEY_SXY_PICKUP_INDICES)) {
	            	SGNetCDFDataColumnInfo[] nCols = new SGNetCDFDataColumnInfo[cols.length];
	            	for (int ii = 0; ii < nCols.length; ii++) {
	            		nCols[ii] = (SGNetCDFDataColumnInfo) cols[ii];
	            	}
	                SGDataUtility.updatePickupParameters(this.mInfoMap, nCols);
	            }
	            SGIntegerSeriesSet indices = (SGIntegerSeriesSet) this.mInfoMap.get(
	            		SGIDataInformationKeyConstants.KEY_SXY_PICKUP_INDICES);
				if (indices == null) {
					indices = new SGIntegerSeriesSet(SGDataUtility.createDefaultStepSeries(dim.getLength()));
				}
	    		this.mPickUpDimensionPanel.setIndices(indices);

	        } else {
	        	this.mPickUpDimensionPanel.clearAll();
	        }
		}
		
        // updates stride
		Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility
				.calcNetCDFDefaultStride(cols, this.mInfoMap);
		List<String> cTypeList = new ArrayList<String>();
		if (SGDataUtility.isSXYTypeData(this.mDataType)) {
			int dimLen = -1;
			if (indexAvailable) {
				cTypeList.add(INDEX);
				this.updateIndexPanel(strideMap, SGIDataInformationKeyConstants.KEY_SXY_INDEX_STRIDE,
						this.mSXYDataIndexStridePanel, cols, cTypeList);
				this.mSXYDataStrideMainPanel.clearAll();
				List<SGDataColumnInfo> indexColList = SGDataUtility.findColumnsWithColumnType(cols, INDEX);
				if (indexColList.size() != 0) {
					SGNetCDFDataColumnInfo indexCol = (SGNetCDFDataColumnInfo) indexColList.get(0);
					if (indexCol != null && indexCol.isCoordinateVariable()) {
						dimLen = indexCol.getDimension(0).getLength();
					}
				}
			} else {
				cTypeList.add(X_VALUE);
				cTypeList.add(Y_VALUE);
				this.updateIndexPanel(strideMap, SGIDataInformationKeyConstants.KEY_SXY_STRIDE,
						this.mSXYDataStrideMainPanel, cols, cTypeList);
				this.mSXYDataIndexStridePanel.clearAll();
				List<SGDataColumnInfo> xColList = SGDataUtility.findColumnsWithColumnType(cols, X_VALUE);
				List<SGDataColumnInfo> yColList = SGDataUtility.findColumnsWithColumnType(cols, Y_VALUE);
				if (xColList.size() != 0) {
					SGNetCDFDataColumnInfo xCol = (SGNetCDFDataColumnInfo) xColList.get(0);
					if (xCol != null && xCol.isCoordinateVariable()) {
						dimLen = xCol.getDimension(0).getLength();
					}
				}
				if (dimLen == -1) {
					if (yColList.size() != 0) {
						SGNetCDFDataColumnInfo yCol = (SGNetCDFDataColumnInfo) yColList.get(0);
						if (yCol != null && yCol.isCoordinateVariable()) {
							dimLen = yCol.getDimension(0).getLength();
						}
					}
				}
			}
			this.mSXYDataTickLabelStridePanel.clearAll();
			if (this.mSXYDataTickLabelStrideSyncCheckBox.isSelected()
					|| this.mSXYDataTickLabelStridePanel.getIndices() == null) {
				final SGIntegerSeriesSet tickLabelIndices;
				if (indexAvailable) {
					tickLabelIndices = this.mSXYDataIndexStridePanel.getIndices();
				} else {
					tickLabelIndices = this.mSXYDataStrideMainPanel.getIndices();
				}
				if (dimLen != -1) {
					this.mSXYDataTickLabelStridePanel.setLength(dimLen);
				}
				this.mSXYDataTickLabelStridePanel.setIndices(tickLabelIndices);
			}
		} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
			if (indexAvailable) {
				cTypeList.add(INDEX);
				this.updateIndexPanel(strideMap, SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE,
						this.mSXYZDataIndexStridePanel, cols, cTypeList);
				this.mSXYZDataXStridePanel.clearAll();
				this.mSXYZDataYStridePanel.clearAll();
			} else {
				cTypeList.add(X_VALUE);
				cTypeList.add(X_INDEX);
				this.updateIndexPanel(strideMap, SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X,
						this.mSXYZDataXStridePanel, cols, cTypeList);
				cTypeList.clear();
				cTypeList.add(Y_VALUE);
				cTypeList.add(Y_INDEX);
				this.updateIndexPanel(strideMap, SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y,
						this.mSXYZDataYStridePanel, cols, cTypeList);
				this.mSXYZDataIndexStridePanel.clearAll();
			}
		} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
			if (indexAvailable) {
				cTypeList.add(INDEX);
				this.updateIndexPanel(strideMap, SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE,
						this.mVXYDataIndexStridePanel, cols, cTypeList);
				this.mVXYDataXStridePanel.clearAll();
				this.mVXYDataYStridePanel.clearAll();
			} else {
				cTypeList.add(X_COORDINATE);
				cTypeList.add(X_INDEX);
				this.updateIndexPanel(strideMap, SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X,
						this.mVXYDataXStridePanel, cols, cTypeList);
				cTypeList.clear();
				cTypeList.add(Y_COORDINATE);
				cTypeList.add(Y_INDEX);
				this.updateIndexPanel(strideMap, SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y,
						this.mVXYDataYStridePanel, cols, cTypeList);
				this.mVXYDataIndexStridePanel.clearAll();
			}
		}

        // set enabled / disabled the panel for the serial numbers
        this.mIndexComponentGroup.setEnabled(indexAvailable);
        this.mGridComponentGroup.setEnabled(!indexAvailable);

        // set enable or disable the dimension panels
        List<String> vNameList = new ArrayList<String>();
        for (int ii = 0; ii < cols.length; ii++) {
            SGNetCDFDataColumnInfo info = (SGNetCDFDataColumnInfo) cols[ii];
            String type = info.getColumnType();
            if (!"".equals(type) && !ANIMATION_FRAME.equals(type)) {
                vNameList.add(info.getName());
            }
        }
        SGDimensionPanel[] coms = this.getDimensionPanels(this.mOriginPanel);
        for (int ii = 0; ii < coms.length; ii++) {
            SGNetCDFDimensionPanel p = (SGNetCDFDimensionPanel) coms[ii];
            String vName = p.getDimensionName();
            final boolean enabled = !vNameList.contains(vName);
            p.setComponentsEnabled(enabled);
        }

        // set enabled / disabled the panel for the stride of tick labels
        final boolean tickLabelAvailable = this.isTickLabelAvailable(cols);
        this.mTickLabelComponentGroup.setEnabled(tickLabelAvailable);

        // set to the attribute
        for (int ii = 0; ii < cols.length; ii++) {
            SGNetCDFDataColumnInfo info = (SGNetCDFDataColumnInfo) cols[ii];
            String type = info.getColumnType();
            this.mDataColumns[ii].setColumnType(type);
        }
    }
	
	private void updateIndexPanel(Map<String, SGIntegerSeriesSet> strideMap,
			String keyStride, SGIndexPanel indexPanel, SGDataColumnInfo[] cols,
			List<String> cTypeList) {

        boolean cVarChanged = false;
		int cVarCntOld = 0;
		String cVarColTypeOld = null;
		for (int ii = 0; ii < this.mDataColumns.length; ii++) {
			SGNetCDFDataColumnInfo ncInfo = (SGNetCDFDataColumnInfo) this.mDataColumns[ii]; 
			if (ncInfo.isCoordinateVariable()) {
				String columnType = ncInfo.getColumnType();
				if (cTypeList.contains(columnType)) {
					cVarColTypeOld = columnType;
					cVarCntOld++;
				}
			}
		}
		int cVarCnt = 0;
		String cVarColType = null;
		SGNetCDFDataColumnInfo cVarInfo = null;
		for (int ii = 0; ii < cols.length; ii++) {
			SGNetCDFDataColumnInfo ncInfo = (SGNetCDFDataColumnInfo) cols[ii]; 
			if (ncInfo.isCoordinateVariable()) {
				String columnType = ncInfo.getColumnType();
				if (cTypeList.contains(columnType)) {
					cVarColType = columnType;
					cVarCnt++;
					cVarInfo = ncInfo;
				}
			}
		}
		if (cVarCnt != cVarCntOld) {
			cVarChanged = true;
		} else {
			cVarChanged = !SGUtility.equals(cVarColType, cVarColTypeOld);
		}

		SGIntegerSeriesSet stride = null;
		boolean b = false;
		if (strideMap == null) {
			b = true;
		} else {
			stride = strideMap.get(keyStride);
			if (stride == null) {
				b = true;
			} else {
				if (cVarChanged) {
					b = true;
				}
			}
		}
		if (b) {
			if (cVarInfo != null) {
				final int len = cVarInfo.getDimension(0).getLength();
				indexPanel.setLength(len);
			}
	        indexPanel.setIndices(stride);
		}
	}
    
    /**
     * Returns the panel object for a coordinate variable.
     * 
     * @param name
     *           the name of a coordinate variable
     * @return the panel object for a given coordinate variable
     */
    private SGNetCDFDimensionPanel getDimensionPanel(String name) {
        SGDimensionPanel[] coms = this.getDimensionPanels(this.mOriginPanel);
        for (int ii = 0; ii < coms.length; ii++) {
            SGNetCDFDimensionPanel p = (SGNetCDFDimensionPanel) coms[ii];
            String cName = p.getDimensionName();
            if (name.equals(cName)) {
                return p;
            }
        }
        return null;
    }
    
    protected SGDataColumnSelectionPanel getDataColumnSelectionPanel() {
    	return this.mDataColumnSelectionPanel;
    }
    

    /**
     * Checks selected items.
     * @return
     *         true if selected items are valid for the data type
     */
    public boolean checkSelectedItems() {

        // check selected items of the table
		SGDataColumnSelectionPanel selectionPanel = this.getDataColumnSelectionPanel();
        if (selectionPanel.checkSelectedItems() == false) {
            return false;
        }

        // check netCDF data
        SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
        if (SGDataUtility.checkNetCDFDataColumns(cols, this.mDataType, 
        		this.mNetCDFFile, this.mInfoMap) == false) {
        	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_COLUMN_TYPE);
            return false;
        }

		// checks the input for stride of arrays
        if (SGDataUtility.isSXYTypeData(this.mDataType)) {
            if (!this.isIndexAvailable()) {
                if (!this.mSXYDataStrideMainPanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_LINE_AND_BAR);
                	return false;
                }
            } else {
                if (!this.mSXYDataIndexStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_INDEX);
                	return false;
                }
            }
            if (this.isTickLabelAvailable()) {
                if (!this.mSXYDataTickLabelStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_TICK_LABEL);
                	return false;
                }
            }
        } else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
            if (!this.isIndexAvailable()) {
                if (!this.mSXYZDataXStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_X);
                	return false;
                }
                if (!this.mSXYZDataYStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_Y);
                	return false;
                }
            } else {
                if (!this.mSXYZDataIndexStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_INDEX);
                	return false;
                }
            }
        } else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
            if (!this.isIndexAvailable()) {
                if (!this.mVXYDataXStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_X);
                	return false;
                }
                if (!this.mVXYDataYStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_Y);
                	return false;
                }
            } else {
                if (!this.mVXYDataIndexStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_INDEX);
                	return false;
                }
            }
        }
        
        // checks pick up indices
        if (SGDataUtility.isSXYTypeData(this.mDataType)) {
        	List<SGDataColumnInfo> pickUpCols = SGDataUtility.findColumnsWithColumnType(cols, PICKUP);
        	if (pickUpCols.size() == 1) {
        		SGNetCDFDataColumnInfo pickUpCol = (SGNetCDFDataColumnInfo) pickUpCols.get(0);
        		SGDimensionInfo pickUpDim = pickUpCol.getDimension(0);
                SGIntegerSeriesSet indices = (SGIntegerSeriesSet) this.mInfoMap.get(
                		SGIDataInformationKeyConstants.KEY_SXY_PICKUP_INDICES);
                if (indices == null) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_PICK_UP_INDICES);
                	return false;
                }
                int[] array = indices.getNumbers();
                for (int ii = 0; ii < array.length; ii++) {
                	if (array[ii] < 0 || pickUpDim.getLength() <= array[ii]) {
                    	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_PICK_UP_INDICES);
                		return false;
                	}
                }
        	}
        }
        
        // clears the message
        selectionPanel.clearMessage();

        return true;
    }
    
    /**
     * Clear all data.
     */
    public void clear() {
    	super.clear();
        this.mOriginPanel.removeAll();
        this.mAttributePanel.clear();
        this.mGlobalAttributePanel.clear();
    }

	@Override
	protected JScrollPane getOriginScrollPane() {
		return this.mOriginScrollPane;
	}

	/**
	 * Adds a document listener to the components.
	 * 
	 * @param l
	 *          a document listener
	 */
    @Override
    public void addDocumentListener(DocumentListener l) {
    	this.mPickUpDimensionPanel.addDocumentListener(l);
    	this.mSXYDataStrideMainPanel.addDocumentListener(l);
    	this.mSXYDataTickLabelStridePanel.addDocumentListener(l);
    	this.mSXYDataIndexStridePanel.addDocumentListener(l);
    	this.mSXYZDataXStridePanel.addDocumentListener(l);
    	this.mSXYZDataYStridePanel.addDocumentListener(l);
    	this.mSXYZDataIndexStridePanel.addDocumentListener(l);
    	this.mVXYDataXStridePanel.addDocumentListener(l);
    	this.mVXYDataYStridePanel.addDocumentListener(l);
    	this.mVXYDataIndexStridePanel.addDocumentListener(l);
    }

    /**
     * Adds an item listener.
     * 
     * @param l
     *          an item listener
     */
    @Override
	public void addItemListener(ItemListener l) {
    	// do nothing
	}

	@Override
    public Boolean isVariableDataType() {
        for (int ii = 0; ii < this.mDataColumns.length; ii++) {
            if (PICKUP.equals(this.mDataColumns[ii].getColumnType())) {
                return Boolean.FALSE;
            }
        }
        return Boolean.TRUE;
    }

    /**
     * Returns the indices for picked up dimension of scalar XY data.
     * 
     * @return the indices for picked up dimension of scalar XY data
     */
	@Override
	public SGIntegerSeriesSet getSXYPickUpIndices() {
		return this.mPickUpDimensionPanel.getIndices();
	}

	@Override
	public void insertUpdate(DocumentEvent e) {
		this.onDocumentUpdate(e);
	}

	@Override
	public void removeUpdate(DocumentEvent e) {
		this.onDocumentUpdate(e);
	}

	@Override
	public void changedUpdate(DocumentEvent e) {
		this.onDocumentUpdate(e);
	}
	
	private void onDocumentUpdate(DocumentEvent e) {
		Document doc = e.getDocument();
		if (this.mPickUpDimensionPanel.hasDocument(doc)) {
			SGIntegerSeriesSet indices = this.mPickUpDimensionPanel.getIndices();
			this.mInfoMap.put(SGIDataInformationKeyConstants.KEY_SXY_PICKUP_INDICES, indices);
		} else if (this.mSXYDataStrideMainPanel.hasDocument(doc)) {
			this.syncTickLabelStride(this.mSXYDataStrideMainPanel);
		} else if (this.mSXYDataIndexStridePanel.hasDocument(doc)) {
			this.syncTickLabelStride(this.mSXYDataIndexStridePanel);
		}
	}
	
	// Synchronizes the stride for tick labels.
	private void syncTickLabelStride(SGIndexPanel p) {
		if (this.mSXYDataTickLabelStrideSyncCheckBox.isSelected()) {
			this.mSXYDataTickLabelStridePanel.setLength(p.getLength());
			this.mSXYDataTickLabelStridePanel.setIndices(p.getIndices());
		}
	}
	
	public String getSXYPickUpDimensionName() {
		String name = null;
		SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
		for (int ii = 0; ii < cols.length; ii++) {
			String colType = cols[ii].getColumnType();
			if (SGIDataColumnTypeConstants.PICKUP.equals(colType)) {
				name = cols[ii].getName();
				break;
			}
		}
		return name;
	}

    /**
     * Called when an action event is generated.
     * @param e
     *         an action event
     */
    public void actionPerformed(ActionEvent e) {
    	super.actionPerformed(e);
    	
    	Object source = e.getSource();
    	if (source.equals(this.mSXYDataTickLabelStrideSyncCheckBox)) {
    		final boolean bSync = this.mSXYDataTickLabelStrideSyncCheckBox.isSelected();
    		this.mTickLabelStrideComponentGroup.setEnabled(!bSync);
    		
    		// synchronizes the stride
    		if (bSync) {
    			SGIndexPanel p;
    			if (this.isIndexAvailable()) {
    				p = this.mSXYDataIndexStridePanel;
    			} else {
        			p = this.mSXYDataStrideMainPanel;
    			}
    			this.syncTickLabelStride(p);
    		}
    	} else if (source.equals(this.mStrideAvailableCheckBox)) {
    		final boolean enabled = this.mStrideAvailableCheckBox.isSelected();
    		this.mStrideComponentGroup.setEnabled(enabled);
    	}
    }
    
    /** 
     * Called whenever the value of the selection changes.
     * This method is overrode for the selection of table rows.
     * 
     * @param e the event that characterizes the change.
     */
	@Override
	public void valueChanged(ListSelectionEvent e) {
		if (e.getValueIsAdjusting()) {
			return;
		}
		
		// updates the attributes
		this.updateAttributePanel();
	}

	// Updates the panel showing attributes.
	private void updateAttributePanel() {
		JTable table = this.getTable();
		final int cnt = table.getSelectedRowCount();
		if (cnt == 1) {
			final int row = table.getSelectedRow();
			SGNetCDFDataColumnInfo mdInfo = (SGNetCDFDataColumnInfo) this.mDataColumns[row];
	        List<SGAttribute> attrList = mdInfo.getAttributes();
	        this.mAttributePanel.setAttributes(attrList);
		}
	}

    /**
     * Returns the map of the stride for arrays.
     * 
     * @return the map of the stride for arrays
     */
	@Override
    public Map<String, SGIntegerSeriesSet> getStrideMap() {
		Map<String, SGIntegerSeriesSet> strideMap = new HashMap<String, SGIntegerSeriesSet>();
		if (SGDataUtility.isSXYTypeData(this.mDataType)) {
			if (this.isIndexAvailable()) {
				this.updateStrideMap(this.mSXYDataIndexStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXY_INDEX_STRIDE, strideMap);
			} else {
				this.updateStrideMap(this.mSXYDataStrideMainPanel, 
						SGIDataInformationKeyConstants.KEY_SXY_STRIDE, strideMap);
			}
			this.updateStrideMap(this.mSXYDataTickLabelStridePanel, 
					SGIDataInformationKeyConstants.KEY_SXY_TICK_LABEL_STRIDE, strideMap);
		} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
			if (this.isIndexAvailable()) {
				this.updateStrideMap(this.mSXYZDataIndexStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE, strideMap);
			} else {
				this.updateStrideMap(this.mSXYZDataXStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X, strideMap);
				this.updateStrideMap(this.mSXYZDataYStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y, strideMap);
			}
		} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
			if (this.isIndexAvailable()) {
				this.updateStrideMap(this.mVXYDataIndexStridePanel, 
						SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE, strideMap);
			} else {
				this.updateStrideMap(this.mVXYDataXStridePanel, 
						SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X, strideMap);
				this.updateStrideMap(this.mVXYDataYStridePanel, 
						SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y, strideMap);
			}
		}
		return strideMap;
    }

	@Override
    public void setStrideMap(Map<String, SGIntegerSeriesSet> strideMap) {
		if (SGDataUtility.isSXYTypeData(this.mDataType)) {
			if (this.isIndexAvailable()) {
				this.setStride(this.mSXYDataIndexStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXY_INDEX_STRIDE, strideMap);
			} else {
				this.setStride(this.mSXYDataStrideMainPanel, 
						SGIDataInformationKeyConstants.KEY_SXY_STRIDE, strideMap);
			}
			this.setStride(this.mSXYDataTickLabelStridePanel, 
					SGIDataInformationKeyConstants.KEY_SXY_TICK_LABEL_STRIDE, strideMap);
		} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
			if (this.isIndexAvailable()) {
				this.setStride(this.mSXYZDataIndexStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE, strideMap);
			} else {
				this.setStride(this.mSXYZDataXStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X, strideMap);
				this.setStride(this.mSXYZDataYStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y, strideMap);
			}
		} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
			if (this.isIndexAvailable()) {
				this.setStride(this.mVXYDataIndexStridePanel, 
						SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE, strideMap);
			} else {
				this.setStride(this.mVXYDataXStridePanel, 
						SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X, strideMap);
				this.setStride(this.mVXYDataYStridePanel, 
						SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y, strideMap);
			}
		}
    }

	@Override
	protected Map<String, Integer> getFullLengthMap() {
		Map<String, Integer> lengthMap = new HashMap<String, Integer>();
		if (SGDataUtility.isSXYTypeData(this.mDataType)) {
			if (this.isIndexAvailable()) {
				this.updateLengthMap(this.mSXYDataIndexStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXY_INDEX_STRIDE, lengthMap);
			} else {
				this.updateLengthMap(this.mSXYDataStrideMainPanel, 
						SGIDataInformationKeyConstants.KEY_SXY_STRIDE, lengthMap);
			}
			this.updateLengthMap(this.mSXYDataTickLabelStridePanel, 
					SGIDataInformationKeyConstants.KEY_SXY_TICK_LABEL_STRIDE, lengthMap);
		} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
			if (this.isIndexAvailable()) {
				this.updateLengthMap(this.mSXYZDataIndexStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE, lengthMap);
			} else {
				this.updateLengthMap(this.mSXYZDataXStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X, lengthMap);
				this.updateLengthMap(this.mSXYZDataYStridePanel, 
						SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y, lengthMap);
			}
		} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
			if (this.isIndexAvailable()) {
				this.updateLengthMap(this.mVXYDataIndexStridePanel, 
						SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE, lengthMap);
			} else {
				this.updateLengthMap(this.mVXYDataXStridePanel, 
						SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X, lengthMap);
				this.updateLengthMap(this.mVXYDataYStridePanel, 
						SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y, lengthMap);
			}
		}
		return lengthMap;
	}

}
