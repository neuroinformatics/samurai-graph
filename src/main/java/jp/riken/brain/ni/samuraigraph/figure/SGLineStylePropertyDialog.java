/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SGLineStylePropertyDialog.java
 *
 * Created on 2011/08/02, 16:34:56
 */
package jp.riken.brain.ni.samuraigraph.figure;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.JButton;
import javax.swing.JTextField;

import jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGProperties;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyDialog;
import jp.riken.brain.ni.samuraigraph.base.SGSpinner;
import jp.riken.brain.ni.samuraigraph.base.SGStyle;
import jp.riken.brain.ni.samuraigraph.base.SGTextField;
import jp.riken.brain.ni.samuraigraph.data.SGISXYTypeMultipleData;
import jp.riken.brain.ni.samuraigraph.figure.java2d.SGIElementGroupSetMultipleSXY;

/**
 * A property dialog to set the line style.
 *
 */
public class SGLineStylePropertyDialog extends SGPropertyDialog {

	private static final long serialVersionUID = -8638494240669321154L;

	public static final String TITLE = "Line Style";

	private SGLineStylePanel mLineStylePanel = new SGLineStylePanel(this, this.mColorDialog);

    /** Creates new form SGLineStylePropertyDialog */
    public SGLineStylePropertyDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

	private void initProperty() {
		this.setTitle(TITLE);
    	
    	this.mPanel.add(this.mLineStylePanel);
    	
    	this.mOKButton.addActionListener(this);
    	this.mCancelButton.addActionListener(this);
    	this.mPreviewButton.addActionListener(this);
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mPanel = new javax.swing.JPanel();
        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPanel.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(mPanel, new java.awt.GridBagConstraints());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JPanel mPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    // End of variables declaration//GEN-END:variables
    
	@Override
	public List<JTextField> getTextFieldComponentsList() {
		List<JTextField> list = new ArrayList<JTextField>();
		return list;
	}

	@Override
	public List<SGTextField> getAxisNumberTextFieldList() {
		List<SGTextField> list = new ArrayList<SGTextField>();
		return list;
	}

	@Override
	public List<SGSpinner> getSpinnerList() {
		List<SGSpinner> list = new ArrayList<SGSpinner>();
		return list;
	}

	@Override
	protected JButton getOKButton() {
		return this.mOKButton;
	}

	@Override
	protected JButton getCancelButton() {
		return this.mCancelButton;
	}

	@Override
	protected JButton getPreviewButton() {
		return this.mPreviewButton;
	}
	
    /**
     * Invoked when the color of a color selection button is changed.
     * 
     * @param b
     *          a button
     */
	@Override
    protected void buttonColorAssigned(SGColorSelectionButton b) {
		super.buttonColorAssigned(b);
		this.mLineStylePanel.buttonColorAssigned(b);
    }

	public String getLineColorMapName() {
		return this.mLineStylePanel.getSelectedColorMapName();
	}

    public void addLineStyle(String name, SGLineStyle lineStyle) {
    	this.mLineStylePanel.addLineStyle(name, lineStyle);
    }
    
    @Override
    public List<SGColorSelectionButton> getColorSelectionButtonsList() {
    	List<SGColorSelectionButton> list = super.getColorSelectionButtonsList();
    	list.addAll(this.mLineStylePanel.getColorSelectionButtonsList());
    	return list;
    }

	@Override
	public boolean setPropertiesToObserver(SGIPropertyDialogObserver obs) {
		// do nothing
		return true;
	}
	
	private Map<Integer, List<SGILineStylePropertyDialogObserver>> mObserverListMap 
			= new HashMap<Integer, List<SGILineStylePropertyDialogObserver>>();
	
    public boolean putLineStylePropertyDialogObserverList(final int figureId,
    		final List<SGILineStylePropertyDialogObserver> obsList) {
    	for (SGILineStylePropertyDialogObserver obs : obsList) {
    		if (this.addPropertyDialogObserver(obs) == false) {
    			return false;
    		}
    	}
    	this.mObserverListMap.put(figureId, new ArrayList<SGILineStylePropertyDialogObserver>(obsList));
        return true;
    }

	@Override
	public boolean setDialogProperty() {
		
    	// gets current line styles and names
		List<SGLineStyle> lineStyleList = new ArrayList<SGLineStyle>();
    	List<String> nameList = new ArrayList<String>();
		for (int ii = 0; ii < this.mPropertyDialogObserverList.size(); ii++) {
			SGILineStylePropertyDialogObserver obs = (SGILineStylePropertyDialogObserver) this.mPropertyDialogObserverList.get(ii);
			List<String> nList = obs.getChildNameList();
			if (this.mPropertyDialogObserverList.size() > 1) {
				String obsName = obs.getName();
				for (String name : nList) {
					StringBuffer sb = new StringBuffer();
					sb.append(obsName);
					sb.append(": ");
					sb.append(name);
					nameList.add(sb.toString());
				}
			} else {
				nameList.addAll(nList);
			}
			Map<Integer, SGLineStyle> lineStyleMap = obs.getLineStyleMap();
			lineStyleList.addAll(lineStyleMap.values());
		}

		// adds line styles
		for (int ii = 0; ii < lineStyleList.size(); ii++) {
			String name = nameList.get(ii);
			SGLineStyle lineStyle = lineStyleList.get(ii);
			this.addLineStyle(name, lineStyle);
		}

		return true;
	}

	/**
	 * Overrode to set different properties to each observer.
	 * 
	 */
	@Override
    protected boolean setPropertiesToAllListeners() {
        if (!this.checkInputValues()) {
            return false;
        }
        List<SGLineStyle> lineStyleList = this.mLineStylePanel.getLineStyleList();
        int cnt = 0;
        Iterator<Entry<Integer, List<SGILineStylePropertyDialogObserver>>> itr
        		= this.mObserverListMap.entrySet().iterator();
        while(itr.hasNext()) {
        	Entry<Integer, List<SGILineStylePropertyDialogObserver>> entry = itr.next();
        	final List<SGILineStylePropertyDialogObserver> obsList = entry.getValue();
            for (SGILineStylePropertyDialogObserver obs : obsList) {
            	SGIElementGroupSetMultipleSXY gs = (SGIElementGroupSetMultipleSXY) obs;
            	SGISXYTypeMultipleData sxyData = (SGISXYTypeMultipleData) obs.getData();
            	final int num = sxyData.getChildNumber();
            	List<SGStyle> styleList = new ArrayList<SGStyle>();
            	for (int jj = 0; jj < num; jj++) {
            		final int index = jj + cnt;
            		SGLineStyle style = lineStyleList.get(index);
            		styleList.add(style);
            	}
            	if (!gs.setStyle(styleList)) {
            		return false;
            	}
            	cnt += num;
            }
        }
    	return true;
    }

	public void setSelectedColorMapName(String name) {
		this.mLineStylePanel.setSelectedColorMapName(name);
	}
	
    public void setColorMapProperties(Map<String, SGProperties> colorMapProperties) {
    	this.mLineStylePanel.setColorMapProperties(colorMapProperties);
    }

    public SGProperties getColorMapProperties(final String name) {
    	return this.mLineStylePanel.getColorMapProperties(name);
    }

    public Map<String, SGProperties> getColorMapProperties() {
    	return this.mLineStylePanel.getColorMapProperties();
    }

}
