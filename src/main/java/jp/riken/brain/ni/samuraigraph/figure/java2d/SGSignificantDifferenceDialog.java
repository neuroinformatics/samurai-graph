package jp.riken.brain.ni.samuraigraph.figure.java2d;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.SpinnerNumberModel;

import jp.riken.brain.ni.samuraigraph.base.SGAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGITwoAxesDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyDialog;
import jp.riken.brain.ni.samuraigraph.base.SGTextField;
import jp.riken.brain.ni.samuraigraph.base.SGTwoAxesSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;
import jp.riken.brain.ni.samuraigraph.figure.SGISignificantDifferenceConstants;

/**
 * A dialog to set the properties of significant difference symbols.
 */
public class SGSignificantDifferenceDialog extends SGPropertyDialog implements
        SGISignificantDifferenceConstants, SGITwoAxesDialog {

    // serialVersionUID
    private static final long serialVersionUID = -248688033390165086L;

    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Significant Difference Symbol Properties";

    /** Creates new form SGSignificantDifferenceSymbolDialog */
    public SGSignificantDifferenceDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.initialize();
        this.pack();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPanel = new javax.swing.JPanel();
        mFontFamilyLabel = new javax.swing.JLabel();
        mFontStyleComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mFontSizeLabel = new javax.swing.JLabel();
        mLineWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mColorLabel = new javax.swing.JLabel();
        mLineWidthLabel1 = new javax.swing.JLabel();
        mLineWidthLabel2 = new javax.swing.JLabel();
        mFontSizeSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mFontNameComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mFormLabel = new javax.swing.JLabel();
        mFormSeparator = new javax.swing.JSeparator();
        mLeftSpaceLabel = new javax.swing.JLabel();
        mRightSpaceLabel = new javax.swing.JLabel();
        mSpaceLabel = new javax.swing.JLabel();
        mSpaceSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mLocationLabel = new javax.swing.JLabel();
        mLocationSeparator = new javax.swing.JSeparator();
        mStringLabel = new javax.swing.JLabel();
        mStringSeparator = new javax.swing.JSeparator();
        mLeftXValueLabel = new javax.swing.JLabel();
        mLeftYValueLabel = new javax.swing.JLabel();
        mRightXValueLabel = new javax.swing.JLabel();
        mRightYValueLabel = new javax.swing.JLabel();
        mHorizontalYValueLabel = new javax.swing.JLabel();
        mLocationAnchoredCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mLineVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mFontStyleLabel = new javax.swing.JLabel();
        mTextLabel = new javax.swing.JLabel();
        mTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mLeftXPanel = new javax.swing.JPanel();
        mLeftXValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mLeftXDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mRightXPanel = new javax.swing.JPanel();
        mRightXValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mRightXDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mLeftYPanel = new javax.swing.JPanel();
        mLeftYValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mLeftYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mRightYPanel = new javax.swing.JPanel();
        mRightYValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mRightYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mHorizontalYPanel = new javax.swing.JPanel();
        mHorizontalYValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mHorizontalYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mHeadPanel = new javax.swing.JPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mPanel.setLayout(new java.awt.GridBagLayout());

        mFontFamilyLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontFamilyLabel.setText("Family");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mFontFamilyLabel, gridBagConstraints);

        mFontStyleComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mFontStyleComboBox, gridBagConstraints);

        mFontSizeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontSizeLabel.setText("Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 10, 5);
        mPanel.add(mFontSizeLabel, gridBagConstraints);

        mLineWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineWidthSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mLineWidthSpinner, gridBagConstraints);

        mColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 10, 5);
        mPanel.add(mColorLabel, gridBagConstraints);

        mLineWidthLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineWidthLabel1.setText("Line");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        mPanel.add(mLineWidthLabel1, gridBagConstraints);

        mLineWidthLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineWidthLabel2.setText("Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mLineWidthLabel2, gridBagConstraints);

        mFontSizeSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontSizeSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mPanel.add(mFontSizeSpinner, gridBagConstraints);

        mFontNameComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mFontNameComboBox, gridBagConstraints);

        mColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mPanel.add(mColorButton, gridBagConstraints);

        mFormLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mFormLabel.setText("Form");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mFormLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 45, 5, 5);
        mPanel.add(mFormSeparator, gridBagConstraints);

        mLeftSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mPanel.add(mLeftSpaceLabel, gridBagConstraints);

        mRightSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        mPanel.add(mRightSpaceLabel, gridBagConstraints);

        mSpaceLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSpaceLabel.setText("Space");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mSpaceLabel, gridBagConstraints);

        mSpaceSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSpaceSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mSpaceSpinner, gridBagConstraints);

        mLocationLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mLocationLabel.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        mPanel.add(mLocationLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 5, 5);
        mPanel.add(mLocationSeparator, gridBagConstraints);

        mStringLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mStringLabel.setText("String");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mStringLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 50, 5, 5);
        mPanel.add(mStringSeparator, gridBagConstraints);

        mLeftXValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLeftXValueLabel.setText("Left X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mLeftXValueLabel, gridBagConstraints);

        mLeftYValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLeftYValueLabel.setText("Left Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mLeftYValueLabel, gridBagConstraints);

        mRightXValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mRightXValueLabel.setText("Right X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mRightXValueLabel, gridBagConstraints);

        mRightYValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mRightYValueLabel.setText("Right Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mRightYValueLabel, gridBagConstraints);

        mHorizontalYValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mHorizontalYValueLabel.setText("Horizontal Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mHorizontalYValueLabel, gridBagConstraints);

        mLocationAnchoredCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLocationAnchoredCheckBox.setLabel("Anchored");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        mPanel.add(mLocationAnchoredCheckBox, gridBagConstraints);

        mLineVisibleCheckBox.setText("Line Visible");
        mLineVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        mPanel.add(mLineVisibleCheckBox, gridBagConstraints);

        mFontStyleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontStyleLabel.setText("Style");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mFontStyleLabel, gridBagConstraints);

        mTextLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTextLabel.setText("Text");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mPanel.add(mTextLabel, gridBagConstraints);

        mTextField.setColumns(16);
        mTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mTextField, gridBagConstraints);

        mLeftXPanel.setLayout(new java.awt.GridBagLayout());

        mLeftXValueTextField.setColumns(6);
        mLeftXValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mLeftXPanel.add(mLeftXValueTextField, gridBagConstraints);

        mLeftXDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mLeftXPanel.add(mLeftXDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mLeftXPanel, gridBagConstraints);

        mRightXPanel.setLayout(new java.awt.GridBagLayout());

        mRightXValueTextField.setColumns(6);
        mRightXValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mRightXPanel.add(mRightXValueTextField, gridBagConstraints);

        mRightXDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mRightXPanel.add(mRightXDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mRightXPanel, gridBagConstraints);

        mLeftYPanel.setLayout(new java.awt.GridBagLayout());

        mLeftYValueTextField.setColumns(6);
        mLeftYValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mLeftYPanel.add(mLeftYValueTextField, gridBagConstraints);

        mLeftYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mLeftYPanel.add(mLeftYDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mLeftYPanel, gridBagConstraints);

        mRightYPanel.setLayout(new java.awt.GridBagLayout());

        mRightYValueTextField.setColumns(6);
        mRightYValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mRightYPanel.add(mRightYValueTextField, gridBagConstraints);

        mRightYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mRightYPanel.add(mRightYDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mRightYPanel, gridBagConstraints);

        mHorizontalYPanel.setLayout(new java.awt.GridBagLayout());

        mHorizontalYValueTextField.setColumns(6);
        mHorizontalYValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mHorizontalYPanel.add(mHorizontalYValueTextField, gridBagConstraints);

        mHorizontalYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mHorizontalYPanel.add(mHorizontalYDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mHorizontalYPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(mPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(mHeadPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mColorButton;
    private javax.swing.JLabel mColorLabel;
    private javax.swing.JLabel mFontFamilyLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mFontNameComboBox;
    private javax.swing.JLabel mFontSizeLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mFontSizeSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mFontStyleComboBox;
    private javax.swing.JLabel mFontStyleLabel;
    private javax.swing.JLabel mFormLabel;
    private javax.swing.JSeparator mFormSeparator;
    private javax.swing.JPanel mHeadPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mHorizontalYDateButton;
    private javax.swing.JPanel mHorizontalYPanel;
    private javax.swing.JLabel mHorizontalYValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mHorizontalYValueTextField;
    private javax.swing.JLabel mLeftSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mLeftXDateButton;
    private javax.swing.JPanel mLeftXPanel;
    private javax.swing.JLabel mLeftXValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mLeftXValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mLeftYDateButton;
    private javax.swing.JPanel mLeftYPanel;
    private javax.swing.JLabel mLeftYValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mLeftYValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mLineVisibleCheckBox;
    private javax.swing.JLabel mLineWidthLabel1;
    private javax.swing.JLabel mLineWidthLabel2;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mLineWidthSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mLocationAnchoredCheckBox;
    private javax.swing.JLabel mLocationLabel;
    private javax.swing.JSeparator mLocationSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JPanel mPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    private javax.swing.JLabel mRightSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mRightXDateButton;
    private javax.swing.JPanel mRightXPanel;
    private javax.swing.JLabel mRightXValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mRightXValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mRightYDateButton;
    private javax.swing.JPanel mRightYPanel;
    private javax.swing.JLabel mRightYValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mRightYValueTextField;
    private javax.swing.JLabel mSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mSpaceSpinner;
    private javax.swing.JLabel mStringLabel;
    private javax.swing.JSeparator mStringSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mTextField;
    private javax.swing.JLabel mTextLabel;
    // End of variables declaration//GEN-END:variables

    private SGTwoAxesSelectionPanel mAxisPanel = new SGTwoAxesSelectionPanel();

    protected SGComponentGroup mDateXComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateYComponentGroup = new SGComponentGroup();

    private boolean initProperty() {
    	
    	this.mHeadPanel.add(this.mAxisPanel);
    	this.mAxisPanel.addAxisSelectionListener(this);

        // set the title
        this.setTitle(SGSignificantDifferenceDialog.TITLE);

        // set up the combo boxes
        this.initFontFamilyNameComboBox(this.mFontNameComboBox);
        this.initFontStyleComboBox(this.mFontStyleComboBox);

        //
        // spinner model
        //

        // space
        this.mSpaceSpinner.initProperties(new SpinnerNumberModel(0.1,
                SIGDIFF_SPACE_MIN, SIGDIFF_SPACE_MAX, SIGDIFF_SPACE_STEP),
                SIGDIFF_SPACE_UNIT, SIGDIFF_SPACE_FRAC_DIFIT_MIN, SIGDIFF_SPACE_FRAC_DIFIT_MAX);

        // font size
        this.mFontSizeSpinner.initProperties(getFontSizeSpinnerNumberModel(),
                FONT_SIZE_UNIT, FONT_SIZE_FRAC_DIGIT_MIN, FONT_SIZE_FRAC_DIGIT_MAX);

        // line width
        this.mLineWidthSpinner.initProperties(getLineWidthSpinnerNumberModel(),
                FONT_SIZE_UNIT, LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);

        // set the name
        this.mHorizontalYValueTextField
                .setDescription("Location-> HorizontalY");
        this.mLeftXValueTextField.setDescription("Location-> LeftX");
        this.mLeftYValueTextField.setDescription("Location-> LeftY");
        this.mRightXValueTextField.setDescription("Location-> RightX");
        this.mRightYValueTextField.setDescription("Location-> RightY");
        this.mSpaceSpinner.setDescription("Form-> Space");
        this.mLineWidthSpinner.setDescription("Form-> LineWidth");
        this.mTextField.setDescription("String-> Text");
        this.mFontSizeSpinner.setDescription("String-> Size");

        // add an action event listener
        this.mLineVisibleCheckBox.addActionListener(this);
        this.mFontNameComboBox.addActionListener(this);
        this.mFontStyleComboBox.addActionListener(this);
        this.mAxisPanel.addActionListener(this);
        this.mLeftXDateButton.addActionListener(this);
        this.mLeftYDateButton.addActionListener(this);
        this.mRightXDateButton.addActionListener(this);
        this.mRightYDateButton.addActionListener(this);
        this.mHorizontalYDateButton.addActionListener(this);

        SGComponentGroupElement[] dateXComponents = {
                new SGComponentGroupElement(this.mLeftXDateButton),
                new SGComponentGroupElement(this.mRightXDateButton) };
        SGComponentGroupElement[] dateYComponents = {
                new SGComponentGroupElement(this.mLeftYDateButton),
                new SGComponentGroupElement(this.mRightYDateButton),
                new SGComponentGroupElement(this.mHorizontalYDateButton) };
        this.mDateXComponentGroup.addElement(dateXComponents);
        this.mDateYComponentGroup.addElement(dateYComponents);

        // sets the calendar icon
        this.setCalendarIcon(this.mHorizontalYDateButton);
        this.setCalendarIcon(this.mLeftXDateButton);
        this.setCalendarIcon(this.mLeftYDateButton);
        this.setCalendarIcon(this.mRightXDateButton);
        this.setCalendarIcon(this.mRightYDateButton);

        return true;
    }

    // /**
    // *
    // *
    // */
    // public void dispose()
    // {
    // if( this.mAxisPanel!=null )
    // {
    // this.mAxisPanel.dispose();
    // this.mAxisPanel = null;
    // }
    //		
    // super.dispose();
    // }

    @Override
    public void actionPerformed(ActionEvent e) {
        super.actionPerformed(e);
        Object source = e.getSource();
        if (source.equals(this.mLineVisibleCheckBox)) {
            this.setLineComponentEnabled(this.mLineVisibleCheckBox
                .isSelected());
        } else if (source.equals(this.mLeftXDateButton)) {
        	this.onDateButtonPressed(this.mLeftXValueTextField);
        } else if (source.equals(this.mLeftYDateButton)) {
        	this.onDateButtonPressed(this.mLeftYValueTextField);
        } else if (source.equals(this.mRightXDateButton)) {
        	this.onDateButtonPressed(this.mRightXValueTextField);
        } else if (source.equals(this.mRightYDateButton)) {
        	this.onDateButtonPressed(this.mRightYValueTextField);
        } else if (source.equals(this.mHorizontalYDateButton)) {
        	this.onDateButtonPressed(this.mHorizontalYValueTextField);
        }
    }

    /**
     * 
     * @return
     */
    public String getText() {
        return this.mTextField.getText();
    }

    /**
     * 
     * @return
     */
    public Number getLeftXValue() {
        return this.getNumber(this.mLeftXValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getLeftYValue() {
        return this.getNumber(this.mLeftYValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getRightXValue() {
        return this.getNumber(this.mRightXValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getRightYValue() {
        return this.getNumber(this.mRightYValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getHorizontalYValue() {
        return this.getNumber(this.mHorizontalYValueTextField);
    }

    /**
     * 
     * @return
     */
    public Boolean getLineVisible() {
        return this.mLineVisibleCheckBox.getSelected();
    }

    /**
     * 
     */
    public Number getSpace() {
        return this.mSpaceSpinner.getNumber();
    }

    /**
     * 
     */
    public Number getFontSize() {
        return this.mFontSizeSpinner.getNumber();
    }

    /**
     * 
     */
    public String getFontName() {
        return (String) this.mFontNameComboBox.getSelectedItem();
    }

    /**
     * 
     */
    public Integer getFontStyle() {
        final String item = (String) this.mFontStyleComboBox.getSelectedItem();
        return SGUtilityText.getFontStyle(item);
    }

    /**
     * 
     */
    public Color getColor() {
        return this.mColorButton.getColor();
    }

    /**
     * 
     */
    public Number getLineWidth() {
        return this.mLineWidthSpinner.getNumber();
    }

    /**
     * 
     * @return
     */
    public Boolean getLocationAnchored() {
        return this.mLocationAnchoredCheckBox.getSelected();
    }
    
    /**
     * 
     * @param text
     * @return
     */
    public boolean setText(final String text) {
        this.mTextField.setText(text);
        return true;
    }

    /**
     * 
     * @param value
     */
    public boolean setLeftXValue(final Object obj) {
        return this.setValue(this.mLeftXValueTextField, obj);
    }

    /**
     * 
     * @param value
     */
    public boolean setLeftYValue(final Object obj) {
        return this.setValue(this.mLeftYValueTextField, obj);
    }

    /**
     * 
     * @param value
     */
    public boolean setRightXValue(final Object obj) {
        return this.setValue(this.mRightXValueTextField, obj);
    }

    /**
     * 
     * @param value
     */
    public boolean setRightYValue(final Object obj) {
        return this.setValue(this.mRightYValueTextField, obj);
    }

    /**
     * 
     * @param value
     */
    public boolean setHorizontalYValue(final Object obj) {
        return this.setValue(this.mHorizontalYValueTextField, obj);
    }

    /**
     * 
     * @param b
     */
    public void setLineVisible(final Boolean b) {
        this.mLineVisibleCheckBox.setSelected(b);
        if (b != null) {
            this.setLineComponentEnabled(b.booleanValue());
        } else {
            this.setLineComponentEnabled(true);
        }
    }

    /**
     * 
     * @param b
     */
    private void setLineComponentEnabled(final boolean b) {
        this.mLineWidthLabel1.setEnabled(b);
        this.mLineWidthLabel2.setEnabled(b);
        this.mLineWidthSpinner.setEnabled(b);
    }

    /**
     * 
     */
    public boolean setSpace(final Object obj) {
        return this.setValue(this.mSpaceSpinner, obj);
    }

    /**
     * 
     */
    public boolean setFontSize(final Object obj) {
        return this.setValue(this.mFontSizeSpinner, obj);
    }

    /**
     * Sets the font name.
     * 
     * @param name
     *           the font name to set
     * @return true if succeeded
     */
    public boolean setFontName(final String name) {
    	final String fName = SGUtility.findFontFamilyName(name);
        this.mFontNameComboBox.setSelectedItem(fName);
        return true;
    }

    /**
     * 
     */
    public boolean setFontStyle(final Integer style) {
        String styleName = null;
        if (style != null) {
            styleName = SGUtilityText.getFontStyleName(style.intValue());
        }
        this.mFontStyleComboBox.setSelectedItem(styleName);

        return true;
    }

    /**
     * 
     */
    public boolean setColor(final Color cl) {
        this.mColorButton.setColor(cl);
        return true;
    }

    /**
     * 
     */
    public boolean setLineWidth(Object obj) {
        return this.setValue(this.mLineWidthSpinner, obj);
    }

    /**
     * 
     * @param b
     * @return
     */
    public boolean setAnchored(final Boolean b) {
        this.mLocationAnchoredCheckBox.setSelected(b);
        return true;
    }
    
    /**
     * 
     */
    public List getColorSelectionButtonsList() {
        final List list = new ArrayList();
        list.add(this.mColorButton);
        return list;
    }

    /**
     * 
     */
    public List getTextFieldComponentsList() {
        final List list = this.getFormattedTextFieldsListFromSpinners();
        list.addAll(this.getAxisNumberTextFieldList());
        list.add(this.mTextField);
        return list;
    }

    /**
     * Returns a list of text fields to set number.
     * 
     * @return
     */
    public List<SGTextField> getAxisNumberTextFieldList() {
        final List<SGTextField> list = new ArrayList<SGTextField>();
        list.add(this.mLeftXValueTextField);
        list.add(this.mLeftYValueTextField);
        list.add(this.mRightXValueTextField);
        list.add(this.mRightYValueTextField);
        list.add(this.mHorizontalYValueTextField);
        return list;
    }

    /**
     * 
     */
    public List getSpinnerList() {
        List list = new ArrayList();
        list.add(this.mFontSizeSpinner);
        list.add(this.mSpaceSpinner);
        list.add(this.mLineWidthSpinner);
        return list;
    }

    /**
     * 
     * @return
     */
    public boolean setDialogProperty() {
        List<SGIPropertyDialogObserver>  list = this.mPropertyDialogObserverList;

        // select axis panel
        selectAxisPanel(this, this.mAxisPanel, list);

        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, list);

        SGISignificantDifferenceDialogObserver sigdiff0 = (SGISignificantDifferenceDialogObserver) list
                .get(0);

        final String text0 = sigdiff0.getText();
        final double horizontalYValue0 = sigdiff0.getHorizontalYValue();
        final double leftXValue0 = sigdiff0.getLeftXValue();
        final double leftYValue0 = sigdiff0.getLeftYValue();
        final double rightXValue0 = sigdiff0.getRightXValue();
        final double rightYValue0 = sigdiff0.getRightYValue();
        final boolean lineVisible0 = sigdiff0.isLineVisible();
        final float space0 = sigdiff0.getSpace(cm);
        final float lineWidth0 = sigdiff0.getLineWidth(pt);
        final String fontName0 = sigdiff0.getFontName();
        final float fontSize0 = sigdiff0.getFontSize(pt);
        final int fontStyle0 = sigdiff0.getFontStyle();
        final Color color0 = sigdiff0.getColor();
        final boolean anchored0 = sigdiff0.isAnchored();

        String text = text0;
        Double horizontalYValue = Double.valueOf(horizontalYValue0);
        Double leftXValue = Double.valueOf(leftXValue0);
        Double leftYValue = Double.valueOf(leftYValue0);
        Double rightXValue = Double.valueOf(rightXValue0);
        Double rightYValue = Double.valueOf(rightYValue0);
        Boolean lineVisible = Boolean.valueOf(lineVisible0);
        Float space = Float.valueOf(space0);
        Float lineWidth = Float.valueOf(lineWidth0);
        String fontName = fontName0;
        Float fontSize = Float.valueOf(fontSize0);
        Integer fontStyle = Integer.valueOf(fontStyle0);
        Color color = color0;
        Boolean anchored = Boolean.valueOf(anchored0);

        if (list.size() > 1) {
            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final String text1 = sigdiff1.getText();
                if (text0.equals(text1) == false) {
                    text = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final double yValue1 = sigdiff1.getHorizontalYValue();
                if (horizontalYValue0 != yValue1) {
                    horizontalYValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final double xValue1 = sigdiff1.getLeftXValue();
                if (leftXValue0 != xValue1) {
                    leftXValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final double yValue1 = sigdiff1.getLeftYValue();
                if (leftYValue0 != yValue1) {
                    leftYValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final double xValue1 = sigdiff1.getRightXValue();
                if (rightXValue0 != xValue1) {
                    rightXValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final double yValue1 = sigdiff1.getRightYValue();
                if (rightYValue0 != yValue1) {
                    rightYValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final boolean lineVisible1 = sigdiff1.isLineVisible();
                if (lineVisible0 != lineVisible1) {
                    lineVisible = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final float space1 = sigdiff1.getSpace(cm);
                if (space0 != space1) {
                    space = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final float lineWidth1 = sigdiff1.getLineWidth(pt);
                if (lineWidth0 != lineWidth1) {
                    lineWidth = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final String fontName1 = sigdiff1.getFontName();
                if (fontName0.equals(fontName1) == false) {
                    fontName = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);
                final float fontSize1 = sigdiff1.getFontSize(pt);
                if (fontSize0 != fontSize1) {
                    fontSize = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);

                final int fontStyle1 = sigdiff1.getFontStyle();
                if (fontStyle0 != fontStyle1) {
                    fontStyle = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);

                final Color color1 = sigdiff1.getColor();
                if (color0.equals(color1) == false) {
                    color = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGISignificantDifferenceDialogObserver sigdiff1 = (SGISignificantDifferenceDialogObserver) list
                        .get(ii);

                final boolean anchored1 = sigdiff1.isAnchored();
                if (anchored0 != anchored1) {
                    anchored = null;
                    break;
                }
            }
        }

        //
        this.setText(text);
        this.setHorizontalYValue(horizontalYValue);
        this.setLeftXValue(leftXValue);
        this.setLeftYValue(leftYValue);
        this.setRightXValue(rightXValue);
        this.setRightYValue(rightYValue);

        this.setLineVisible(lineVisible);
        this.setSpace(space);
        this.setLineWidth(lineWidth);
        this.setFontName(fontName);
        this.setFontSize(fontSize);
        this.setFontStyle(fontStyle);
        this.setColor(color);

        this.setAnchored(anchored);
//        this.setColorButtonBorder(true);

        return true;
    }

    /**
     * 
     */
    public boolean setPropertiesToObserver(SGIPropertyDialogObserver l) {
        SGISignificantDifferenceDialogObserver sd = (SGISignificantDifferenceDialogObserver) l;

        // get values
        final int xConfig = this.mAxisPanel.getXAxisLocation();
        final int yConfig = this.mAxisPanel.getYAxisLocation();
        final String text = this.getText();
        final Number horizontalY = this.getHorizontalYValue();
        final Number leftX = this.getLeftXValue();
        final Number leftY = this.getLeftYValue();
        final Number rightX = this.getRightXValue();
        final Number rightY = this.getRightYValue();
        final Boolean lineVisible = this.getLineVisible();
        final Number space = this.getSpace();
        final Number lineWidth = this.getLineWidth();
        final Number fontSize = this.getFontSize();
        final String fontName = this.getFontName();
        final Integer fontStyle = this.getFontStyle();
        final Color cl = this.getColor();
        final Boolean anchored = this.getLocationAnchored();

        // check values
        ArrayList list = new ArrayList();
        if (sd.hasValidHorizontalYValue(yConfig, horizontalY) == false) {
            list.add("HorizontalY");
        }
        if (sd.hasValidLeftXValue(xConfig, leftX) == false) {
            list.add("LeftX");
        }
        if (sd.hasValidLeftYValue(yConfig, leftY) == false) {
            list.add("LeftY");
        }
        if (sd.hasValidRightXValue(xConfig, rightX) == false) {
            list.add("RightX");
        }
        if (sd.hasValidRightYValue(yConfig, rightY) == false) {
            list.add("RightY");
        }
        if (list.size() != 0) {
            StringBuffer sb = new StringBuffer();
            sb.append(ERRMSG_AXIS_VALUE_INVALID);
            sb.append(":\n");
            for (int ii = 0; ii < list.size(); ii++) {
                String str = (String) list.get(ii);
                sb.append('-');
                sb.append(str);
                sb.append('\n');
            }
            this.setInputErrorMessage(sb.toString());
            return false;
        }

        // set the related axes
        if (xConfig != -1) {
            sd.setXAxisLocation(xConfig);
        }

        if (yConfig != -1) {
            sd.setYAxisLocation(yConfig);
        }

        if (text != null) {
            sd.setText(text);
        }

        if (horizontalY != null) {
            sd.setHorizontalYValue(horizontalY.doubleValue());
        }

        if (leftX != null) {
            sd.setLeftXValue(leftX.doubleValue());
        }

        if (leftY != null) {
            sd.setLeftYValue(leftY.doubleValue());
        }

        if (rightX != null) {
            sd.setRightXValue(rightX.doubleValue());
        }

        if (rightY != null) {
            sd.setRightYValue(rightY.doubleValue());
        }

        if (lineVisible != null) {
            sd.setLineVisible(lineVisible.booleanValue());
        }

        if (space != null) {
            //			sd.setSpace( space.floatValue()/SGIConstants.CM_POINT_RATIO );
            sd.setSpace(space.floatValue(), cm);
        }

        if (lineWidth != null) {
            //			sd.setLineWidth( lineWidth.floatValue() );
            sd.setLineWidth(lineWidth.floatValue(), pt);
        }

        if (fontSize != null) {
            //			sd.setFontSize( fontSize.floatValue() );
            sd.setFontSize(fontSize.floatValue(), pt);
        }

        if (fontName != null) {
            sd.setFontName(fontName);
        }

        if (fontStyle != null) {
            sd.setFontStyle(fontStyle);
        }

        if (cl != null) {
            sd.setColor(cl);
        }
        
        if (anchored != null) {
            sd.setAnchored(anchored.booleanValue());
        }

        return true;
    }

    /**
     * Overrode this method to check the input values.
     * 
     * @return true if all input values are valid
     */
    protected boolean hasValidInputValues() {
        boolean valid = true;
        if (super.hasValidInputValues() == false) {
            valid = false;
        }
        if (this.mTextField.hasValidText() == false) {
            this.addInputErrorDescription(this.mTextField.getDescription());
            valid = false;
        }
        if (this.hasValidNumber(this.mLeftXValueTextField) == false) {
        	valid = false;
        }
        if (this.hasValidNumber(this.mRightXValueTextField) == false) {
        	valid = false;
        }
        if (this.hasValidNumber(this.mLeftYValueTextField) == false) {
        	valid = false;
        }
        if (this.hasValidNumber(this.mRightYValueTextField) == false) {
        	valid = false;
        }
        if (this.hasValidNumber(this.mHorizontalYValueTextField) == false) {
        	valid = false;
        }
        return valid;
    }

    /**
     * Returns the OK button.
     * @return
     *        the OK button
     */
    protected JButton getOKButton() {
        return this.mOKButton;
    }
    
    /**
     * Returns the cancel button.
     * @return
     *        the cancel button
     */
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    /**
     * Returns the preview button.
     * @return
     *        the preview button
     */
    protected JButton getPreviewButton() {
        return this.mPreviewButton;
    }

	@Override
	public void onXAxisDateSelected(boolean selected) {
		this.mDateXComponentGroup.setEnabled(selected);
	}

	@Override
	public void onYAxisDateSelected(boolean selected) {
		this.mDateYComponentGroup.setEnabled(selected);
	}
	
	@Override
	public void onAxisSelectionStateChanged(SGAxisSelectionPanel axisPanel) {
        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, 
        		this.mPropertyDialogObserverList);
	}

}
