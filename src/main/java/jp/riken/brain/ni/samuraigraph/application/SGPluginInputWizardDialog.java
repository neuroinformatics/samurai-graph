package jp.riken.brain.ni.samuraigraph.application;

import javax.swing.JButton;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import jp.riken.brain.ni.samuraigraph.application.SGPluginDataSelectionPanel.NamedDataBuffer;
import jp.riken.brain.ni.samuraigraph.base.SGData;


/**
 * The wizard dialog to setup input data into the plug-in.
 *
 */
public class SGPluginInputWizardDialog extends SGWizardDialog {

	private static final long serialVersionUID = 2257240512518835195L;
	
	public static final String TITLE = "Set up Input Data to Plug-in";
	
	/** Creates new form SGPluginInputDialog */
    public SGPluginInputWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    public SGPluginInputWizardDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mPreviousButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mParameterScrollPane = new javax.swing.JScrollPane();
        mParameterTable = new jp.riken.brain.ni.samuraigraph.base.SGTable();
        mCommentScrollPane = new javax.swing.JScrollPane();
        mDescTextArea = new javax.swing.JTextArea();
        mDataPanel = new jp.riken.brain.ni.samuraigraph.application.SGPluginDataSelectionPanel();
        mParameterLabel = new javax.swing.JLabel();
        mDescLabel = new javax.swing.JLabel();
        mSelectedDataLabel = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPreviousButton.setText("<Prev");
        mPreviousButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mPreviousButton);

        mNextButton.setText("Next>");
        mNextButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mNextButton);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mParameterScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        mParameterScrollPane.setFont(new java.awt.Font("Dialog", 0, 11));
        mParameterScrollPane.setPreferredSize(new java.awt.Dimension(550, 120));

        mParameterTable.setFont(new java.awt.Font("Dialog", 0, 11));
        mParameterTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        mParameterScrollPane.setViewportView(mParameterTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        getContentPane().add(mParameterScrollPane, gridBagConstraints);

        mCommentScrollPane.setPreferredSize(new java.awt.Dimension(550, 120));

        mDescTextArea.setColumns(20);
        mDescTextArea.setEditable(false);
        mDescTextArea.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mDescTextArea.setLineWrap(true);
        mDescTextArea.setRows(5);
        mCommentScrollPane.setViewportView(mDescTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(mCommentScrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        getContentPane().add(mDataPanel, gridBagConstraints);

        mParameterLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mParameterLabel.setText("Parameters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(mParameterLabel, gridBagConstraints);

        mDescLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mDescLabel.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(mDescLabel, gridBagConstraints);

        mSelectedDataLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mSelectedDataLabel.setText("Selected Data");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(mSelectedDataLabel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    protected javax.swing.JScrollPane mCommentScrollPane;
    private jp.riken.brain.ni.samuraigraph.application.SGPluginDataSelectionPanel mDataPanel;
    private javax.swing.JLabel mDescLabel;
    private javax.swing.JTextArea mDescTextArea;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JLabel mParameterLabel;
    private javax.swing.JScrollPane mParameterScrollPane;
    protected jp.riken.brain.ni.samuraigraph.base.SGTable mParameterTable;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviousButton;
    private javax.swing.JLabel mSelectedDataLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Name of the column for the sequential number.
     */
    public static final String COLUMN_NAME_NUMBER = "No.";

    /**
     * Name of the column for the name of parameters.
     */
    public static final String COLUMN_NAME_NAME = "Name";

    /**
     * Name of the column for input value.
     */
    public static final String COLUMN_NAME_VALUE = "Value";
    
    /**
     * Name of the column for data type.
     */
    public static final String COLUMN_NAME_DATA_TYPE = "Type";
    
	/**
	 * The array of column names for parameters.
	 */
	public static final String[] PARAMETER_COLUMN_NAME_ARRAY = { COLUMN_NAME_NUMBER,
			COLUMN_NAME_NAME, COLUMN_NAME_VALUE };

	private static final int[] PARAMETER_PREFERRED_COLUMN_WIDTH_ARRAY = { 30, 60, 120 };

    /**
     * The table model.
     */
    protected ParameterTableModel mParameterTableModel = null;

	private void initProperty() {
		this.setTitle(TITLE);
		
		// setup the table for parameters
        this.mParameterTableModel = new ParameterTableModel();
        this.mParameterTableModel.setColumnIdentifiers(PARAMETER_COLUMN_NAME_ARRAY);
        this.mParameterTable.setModel(this.mParameterTableModel);
        this.mParameterTable.getTableHeader().setReorderingAllowed(false);
        
        this.updateTable();
	}
	
    /**
     * Updates the table.
     * 
     */
    public void updateTable() {
    	if (this.mParameterTableModel != null) {
            for (int ii = 0; ii < PARAMETER_COLUMN_NAME_ARRAY.length; ii++) {
                TableColumn cl = this.mParameterTable.getColumn(PARAMETER_COLUMN_NAME_ARRAY[ii]);
                cl.setPreferredWidth(PARAMETER_PREFERRED_COLUMN_WIDTH_ARRAY[ii]);
            }
    	}
    }

	@Override
	protected JButton getPreviousButton() {
		return this.mPreviousButton;
	}

	@Override
	protected JButton getNextButton() {
		return this.mNextButton;
	}

	@Override
	protected JButton getOKButton() {
		return this.mOKButton;
	}

	@Override
	protected JButton getCancelButton() {
		return this.mCancelButton;
	}
	
    public int getParameterColumnIndex(final String identifier) {
        return this.mParameterTable.getColumnModel().getColumnIndex(identifier);
    }

    public void addParameter(String name, String def) {
    	final int index = this.mParameterTableModel.getRowCount();
    	this.mParameterTableModel.addRow(index, name, def);
    }
    
    public String getParameterValue(final int rowIndex) {
    	return this.mParameterTableModel.getParameterValue(rowIndex);
    }
    
    public String[] getParameterValues() {
    	String[] values = new String[this.mParameterTableModel.getRowCount()];
    	for (int ii = 0; ii < values.length; ii++) {
    		values[ii] = this.getParameterValue(ii);
    	}
    	return values;
    }
    
    public void setDesc(String text) {
    	String str = (text != null) ? text : "";
    	this.mDescTextArea.setText(str);
    }
    
    public String getDesc() {
    	return this.mDescTextArea.getText();
    }
    
    /**
     * Adds a data.
     * 
     * @param name
     *           the name of data
     * @param data
     *           the data object
     */
    public void addData(String name, SGData data) {
    	this.mDataPanel.addData(name, data);
    }
    
	void syncDataTable() {
		this.mDataPanel.syncDataTable();
	}

    /**
     * Returns an array of data buffers of selected data.
     * 
     * @return an array of data buffers of selected data
     */
    public NamedDataBuffer[] getSelectedDataBuffers() {
    	return this.mDataPanel.getSelectedDataBuffers();
    }
    
    class ParameterTableModel extends DefaultTableModel {
        
        private static final long serialVersionUID = 2213043296565029421L;

        public ParameterTableModel() {
            super();
        }

        protected void addRow(final int index, String name, String def) {
            Object[] array = { index + 1, name, def };
            super.addRow(array);
        }

        @Override
        public int getColumnCount() {
            return PARAMETER_COLUMN_NAME_ARRAY.length;
        }

        @Override
        public String getColumnName(int index) {
            return PARAMETER_COLUMN_NAME_ARRAY[index];
        }
        
        /**
         * Returns false for the column for column type.
         */
        @Override
        public boolean isCellEditable(int row, int col) {
        	if (col == getParameterColumnIndex(COLUMN_NAME_VALUE)) {
        		return true;
        	} else {
            	return false;
        	}
        }
        
        public String getParameterValue(final int rowIndex) {
        	final int columnIndex = this.findColumn(COLUMN_NAME_VALUE);
        	Object value = this.getValueAt(rowIndex, columnIndex);
        	return (value != null) ? value.toString() : "";
        }
    }
	
    void deleteTreeNode() {
    	this.mDataPanel.deleteTreeNode();
    }
}
