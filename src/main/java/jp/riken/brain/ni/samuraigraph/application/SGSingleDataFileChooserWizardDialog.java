package jp.riken.brain.ni.samuraigraph.application;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;

import javax.swing.JButton;
import javax.swing.text.JTextComponent;

/**
 * A dialog to choose single data file.
 * 
 */
public class SGSingleDataFileChooserWizardDialog extends SGSingleFileChooserWizardDialog
implements SGNetCDFDataFileChooserPanel.AcceptListener {

    /**
     * Serial Version UID.
     */
    private static final long serialVersionUID = -2452728212046081393L;

    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Select the Data File";

    /**
     * Creates new form SGSingleDataFileChooserWizardDialog
     */
    public SGSingleDataFileChooserWizardDialog(java.awt.Frame parent,
            boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mPreviousButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNetCDFDataFileChooserPanel = new jp.riken.brain.ni.samuraigraph.application.SGNetCDFDataFileChooserPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPreviousButton.setText("<Prev");
        mPreviousButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mPreviousButton);

        mNextButton.setText("Next>");
        mNextButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mNextButton);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mButtonPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(mNetCDFDataFileChooserPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.application.SGNetCDFDataFileChooserPanel mNetCDFDataFileChooserPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviousButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Initialize this dialog.
     */
    private void initProperty() {

        // set the title
        this.setTitle(SGSingleDataFileChooserWizardDialog.TITLE);
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                SGSingleDataFileChooserWizardDialog.this.mNetCDFDataFileChooserPanel.focusedToLocalFileTextField();
            }
        });
        
        this.mNetCDFDataFileChooserPanel.addAcceptListener(this);
        this.mNetCDFDataFileChooserPanel.setLocalFileSelected(true);
        
        this.mOKButton.setVisible(false);
    }

    protected JButton getPreviousButton() {
        return this.mPreviousButton;
    }

    protected JButton getNextButton() {
        return this.mNextButton;
    }

    protected JButton getOKButton() {
        return this.mOKButton;
    }

    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    protected JTextComponent getFileNameTextComponent() {
        return this.mNetCDFDataFileChooserPanel.getLocalFileNameTextComponent();
    }
    
    protected JButton getFileChooserButton() {
        return this.mNetCDFDataFileChooserPanel.getLocalFileChooserButton();
    }
    
    @Override
    protected String getFileName() {
        return this.mNetCDFDataFileChooserPanel.getFileName();
    }
    
    @Override
    protected void setFileName(final String path) {
        this.mNetCDFDataFileChooserPanel.setFileName(path);
    }
    
    /**
     * Return whether data file is local or not.
     * @return true if data file is local.
     */
    public boolean isLocalFileSelected() {
        return this.mNetCDFDataFileChooserPanel.isLocalFileSelected();
    }
    
    /**
     * @return true if fileName is a name of local file and it exists.
     * Or true if netCDF URL is selected and the url is set.
     */
    @Override
    protected boolean isAcceptable(String fileName) {
        if (this.mNetCDFDataFileChooserPanel.isLocalFileSelected()) {
            File f = new File(fileName);
            return super.isAcceptable(f);
        } else {
            return this.mNetCDFDataFileChooserPanel.isNetCDFUrlAcceptable();
        }
    }
    
    @Override
    public void checkLocalFileTextField() {
        this.onEdited(null);
    }
    
    @Override
    public void checkNetCDFURLTextField() {
        this.onNext();
    }
    
    @Override
    public void acceptNetCDFUrl(final boolean accpet) {
        super.acceptFile(accpet);
    }
    
    @Override
    protected boolean onNext() {
        if (this.mNetCDFDataFileChooserPanel.isLocalFileSelected()==false) {
            if (this.mNetCDFDataFileChooserPanel.isValidUrlLocation(true)==false) {
                return false;
            }
        }
        return super.onNext();
    }
    
    public void setVisibleUrlOfNetCDF(final boolean visible) {
        this.mNetCDFDataFileChooserPanel.setEnabledUrlOfNetCDFPanel(visible);
    }
}
