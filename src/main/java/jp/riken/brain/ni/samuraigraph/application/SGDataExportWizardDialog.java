/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SGDataExportWizardDialog.java
 *
 * Created on 2011/12/07, 13:29:56
 */
package jp.riken.brain.ni.samuraigraph.application;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JPanel;

import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;

/**
 * The wizard dialog to set up for exporting data.
 * 
 */
public class SGDataExportWizardDialog extends SGWizardDialog {

	private static final long serialVersionUID = 5285345881877786894L;
	
	public static final String TITLE = "Set up for Data Export";
	
	/** Creates new form SGDataExportWizardDialog */
    public SGDataExportWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mPreviousButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPanel = new javax.swing.JPanel();
        mArraySectionPanel = new javax.swing.JPanel();
        mStrideCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mArraySectionInnerPanel = new javax.swing.JPanel();
        mStrideLabel = new javax.swing.JLabel();
        mArraySectionSpaceLabel = new javax.swing.JLabel();
        mShiftPanel = new javax.swing.JPanel();
        mShiftCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mShiftInnerPanel = new javax.swing.JPanel();
        mShiftLabel = new javax.swing.JLabel();
        mShiftSpaceLabel = new javax.swing.JLabel();
        mEditedDataValuePanel = new javax.swing.JPanel();
        mEditedDataValueCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mEditedDataValueInnerPanel = new javax.swing.JPanel();
        mEditedDataValueLabel = new javax.swing.JLabel();
        mEditedDataValueSpaceLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPreviousButton.setText("<Prev");
        mPreviousButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mPreviousButton);

        mNextButton.setText("Next>");
        mNextButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mNextButton);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mPanel.setPreferredSize(new java.awt.Dimension(300, 200));
        mPanel.setLayout(new java.awt.GridBagLayout());

        mArraySectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mArraySectionPanel.setLayout(new java.awt.BorderLayout());

        mStrideCheckBox.setText("Array Section");
        mStrideCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mArraySectionPanel.add(mStrideCheckBox, java.awt.BorderLayout.NORTH);

        mArraySectionInnerPanel.setLayout(new java.awt.BorderLayout());

        mStrideLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mStrideLabel.setText("Check to export data with array section.");
        mArraySectionInnerPanel.add(mStrideLabel, java.awt.BorderLayout.CENTER);

        mArraySectionSpaceLabel.setText("    ");
        mArraySectionInnerPanel.add(mArraySectionSpaceLabel, java.awt.BorderLayout.WEST);

        mArraySectionPanel.add(mArraySectionInnerPanel, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
        mPanel.add(mArraySectionPanel, gridBagConstraints);

        mShiftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mShiftPanel.setLayout(new java.awt.BorderLayout());

        mShiftCheckBox.setText("Shift");
        mShiftCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mShiftPanel.add(mShiftCheckBox, java.awt.BorderLayout.NORTH);

        mShiftInnerPanel.setLayout(new java.awt.BorderLayout());

        mShiftLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mShiftLabel.setText("Check to export data as shifted.");
        mShiftInnerPanel.add(mShiftLabel, java.awt.BorderLayout.CENTER);

        mShiftSpaceLabel.setText("    ");
        mShiftInnerPanel.add(mShiftSpaceLabel, java.awt.BorderLayout.WEST);

        mShiftPanel.add(mShiftInnerPanel, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mPanel.add(mShiftPanel, gridBagConstraints);

        mEditedDataValuePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mEditedDataValuePanel.setLayout(new java.awt.BorderLayout());

        mEditedDataValueCheckBox.setText("Edited Data Values");
        mEditedDataValueCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mEditedDataValuePanel.add(mEditedDataValueCheckBox, java.awt.BorderLayout.NORTH);

        mEditedDataValueInnerPanel.setLayout(new java.awt.BorderLayout());

        mEditedDataValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mEditedDataValueLabel.setText("Check to export edited data values.");
        mEditedDataValueInnerPanel.add(mEditedDataValueLabel, java.awt.BorderLayout.CENTER);

        mEditedDataValueSpaceLabel.setText("    ");
        mEditedDataValueInnerPanel.add(mEditedDataValueSpaceLabel, java.awt.BorderLayout.WEST);

        mEditedDataValuePanel.add(mEditedDataValueInnerPanel, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
        mPanel.add(mEditedDataValuePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 10);
        getContentPane().add(mPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mArraySectionInnerPanel;
    private javax.swing.JPanel mArraySectionPanel;
    private javax.swing.JLabel mArraySectionSpaceLabel;
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mEditedDataValueCheckBox;
    private javax.swing.JPanel mEditedDataValueInnerPanel;
    private javax.swing.JLabel mEditedDataValueLabel;
    private javax.swing.JPanel mEditedDataValuePanel;
    private javax.swing.JLabel mEditedDataValueSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JPanel mPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviousButton;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mShiftCheckBox;
    private javax.swing.JPanel mShiftInnerPanel;
    private javax.swing.JLabel mShiftLabel;
    private javax.swing.JPanel mShiftPanel;
    private javax.swing.JLabel mShiftSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mStrideCheckBox;
    private javax.swing.JLabel mStrideLabel;
    // End of variables declaration//GEN-END:variables

    private SGComponentGroup mStrideComponentGroup = new SGComponentGroup();

    private SGComponentGroup mShiftComponentGroup = new SGComponentGroup();

    private SGComponentGroup mEditedDataValueComponentGroup = new SGComponentGroup();

    private void initProperty() {
    	// sets the title
    	this.setTitle(TITLE);
    	
    	// hides the buttons
    	this.mPreviousButton.setVisible(false);
    	this.mNextButton.setVisible(false);
    	this.pack();

    	// sets the component group
        SGComponentGroupElement[] strideComponents = {
                new SGComponentGroupElement(this.mStrideCheckBox),
                new SGComponentGroupElement(this.mStrideLabel) };
        SGComponentGroupElement[] shiftComponents = {
                new SGComponentGroupElement(this.mShiftCheckBox),
                new SGComponentGroupElement(this.mShiftLabel) };
        SGComponentGroupElement[] editedDataValueComponents = {
                new SGComponentGroupElement(this.mEditedDataValueCheckBox),
                new SGComponentGroupElement(this.mEditedDataValueLabel) };
        this.mStrideComponentGroup.addElement(strideComponents);
        this.mShiftComponentGroup.addElement(shiftComponents);
        this.mEditedDataValueComponentGroup.addElement(editedDataValueComponents);
    }
    
    @Override
	protected JButton getPreviousButton() {
		return this.mPreviousButton;
	}

	@Override
	protected JButton getNextButton() {
		return this.mNextButton;
	}

	@Override
	protected JButton getOKButton() {
		return this.mOKButton;
	}

	@Override
	protected JButton getCancelButton() {
		return this.mCancelButton;
	}
	
	private boolean isSelected(JCheckBox cb) {
		return cb.isSelected();
	}
	
	private void setSelected(JCheckBox cb, final boolean b) {
		cb.setSelected(b);
	}
	
	private boolean isComponentsEnabled(SGComponentGroup group) {
		return group.isEnabled();
	}
	
	private void setComponentsEnabled(SGComponentGroup group, final boolean b) {
		group.setEnabled(b);
	}

	private boolean isComponentsVisible(JPanel p) {
		return p.isVisible();
	}

	private void setComponentsVisible(JPanel p, final boolean b) {
		p.setVisible(b);
		this.pack();
	}
	
	//
	// Array Section (Stride)
	//

	public boolean isStrideSelected() {
		return this.isSelected(this.mStrideCheckBox);
	}
	
	public void setStrideSelected(final boolean b) {
		this.setSelected(this.mStrideCheckBox, b);
	}
	
	public boolean isStrideComponentsEnabled() {
		return this.isComponentsEnabled(this.mStrideComponentGroup);
	}

	public void setStrideComponentsEnabled(final boolean b) {
		this.setComponentsEnabled(this.mStrideComponentGroup, b);
	}

	public boolean isStrideComponentsVisible() {
		return this.isComponentsVisible(this.mArraySectionPanel);
	}

	public void setStrideComponentsVisible(final boolean b) {
		this.setComponentsVisible(this.mArraySectionPanel, b);
	}

	//
	// Shift
	//
	
	public boolean isShiftSelected() {
		return this.isSelected(this.mShiftCheckBox);
	}
	
	public void setShiftSelected(final boolean b) {
		this.setSelected(this.mShiftCheckBox, b);
	}
	
	public boolean isShiftComponentsEnabled() {
		return this.isComponentsEnabled(this.mShiftComponentGroup);
	}
	
	public void setShiftComponentsEnabled(final boolean b) {
		this.setComponentsEnabled(this.mShiftComponentGroup, b);
	}

	public boolean isShiftComponentsVisible() {
		return this.isComponentsVisible(this.mShiftPanel);
	}

	public void setShiftComponentsVisible(final boolean b) {
		this.setComponentsVisible(this.mShiftPanel, b);
	}

	//
	// Edited Data Value
	//
	
	public boolean isEditedDataValueSelected() {
		return this.isSelected(this.mEditedDataValueCheckBox);
	}
	
	public void setEditedDataValueSelected(final boolean b) {
		this.setSelected(this.mEditedDataValueCheckBox, b);
	}
	
	public boolean isEditedDataValueComponentsEnabled() {
		return this.isComponentsEnabled(this.mEditedDataValueComponentGroup);
	}
	
	public void setEditedDataValueComponentsEnabled(final boolean b) {
		this.setComponentsEnabled(this.mEditedDataValueComponentGroup, b);
	}

	public boolean isEditedDataValueComponentsVisible() {
		return this.isComponentsVisible(this.mEditedDataValuePanel);
	}

	public void setEditedDataValueComponentsVisible(final boolean b) {
		this.setComponentsVisible(this.mEditedDataValuePanel, b);
	}

}
