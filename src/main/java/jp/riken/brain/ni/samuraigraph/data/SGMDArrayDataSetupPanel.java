package jp.riken.brain.ni.samuraigraph.data;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.swing.ButtonGroup;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.text.Document;

import jp.riken.brain.ni.samuraigraph.base.SGAttribute;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGDataColumnInfo;
import jp.riken.brain.ni.samuraigraph.base.SGDataColumnInfoSet;
import jp.riken.brain.ni.samuraigraph.base.SGIntegerSeries;
import jp.riken.brain.ni.samuraigraph.base.SGIntegerSeriesSet;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;

/**
 * A panel to setup the properties of multidimensional data.
 *
 */
public class SGMDArrayDataSetupPanel extends SGDataSetupPanel implements
		SGIDataColumnTypeConstants, SGSliderPanel.ISliderChangeListener, ItemListener,
		SGIMDArrayConstants, DocumentListener {

	private static final long serialVersionUID = -1808471254855276416L;

	/** Creates new form SGHDF5DataSetupPanel */
    public SGMDArrayDataSetupPanel() {
    	super();
        initComponents();
        this.initProperty();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mSXYZDataStridePanel = new javax.swing.JPanel();
        mSXYZDataXStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mSXYZDataYStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mSXYZDataIndexStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mVXYDataStridePanel = new javax.swing.JPanel();
        mVXYDataXStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mVXYDataYStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mVXYDataIndexStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mSXYDataStridePanel = new javax.swing.JPanel();
        mSXYDataLineAndBarStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mSXYDataTickLabelStrideParentPanel = new javax.swing.JPanel();
        mSXYDataTickLabelStrideSyncCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mSXYDataTickLabelStridePanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mVXYDataDimensionPanel = new javax.swing.JPanel();
        mVXYDataFirstVariablePanel = new javax.swing.JPanel();
        mVXYDataFirstVariableDimensionGridPanel = new javax.swing.JPanel();
        mVXYDataFirstVariableDimensionXLabel = new javax.swing.JLabel();
        mVXYDataFirstVariableDimensionXComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mVXYDataFirstVariableDimensionYLabel = new javax.swing.JLabel();
        mVXYDataFirstVariableDimensionYComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mVXYDataFirstVariableDimensionScatterPanel = new javax.swing.JPanel();
        mVXYDataFirstVariableDimensionIndexComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mVXYDataXVariablePanel = new javax.swing.JPanel();
        mVXYDataXVariableDimensionComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mVXYDataYVariablePanel = new javax.swing.JPanel();
        mVXYDataYVariableDimensionComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mVXYDataSecondVariablePanel = new javax.swing.JPanel();
        mVXYDataSecondVariableDimensionGridPanel = new javax.swing.JPanel();
        mVXYDataSecondVariableDimensionXLabel = new javax.swing.JLabel();
        mVXYDataSecondVariableDimensionXComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mVXYDataSecondVariableDimensionYLabel = new javax.swing.JLabel();
        mVXYDataSecondVariableDimensionYComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mVXYDataSecondVariableDimensionScatterPanel = new javax.swing.JPanel();
        mVXYDataSecondVariableDimensionIndexComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mVXYPlotTypeRadioButtonPanel = new javax.swing.JPanel();
        mVXYGridPlotRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mVXYScatterPlotRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mSXYZDataDimensionPanel = new javax.swing.JPanel();
        mSXYZDataZVariablePanel = new javax.swing.JPanel();
        mSXYZDataZVariableDimensionGridPanel = new javax.swing.JPanel();
        mSXYZDataZVariableDimensionXLabel = new javax.swing.JLabel();
        mSXYZDataZVariableDimensionXComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mSXYZDataZVariableDimensionYLabel = new javax.swing.JLabel();
        mSXYZDataZVariableDimensionYComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mSXYZDataZVariableDimensionScatterPanel = new javax.swing.JPanel();
        mSXYZDataZVariableDimensionIndexComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mSXYZDataXVariablePanel = new javax.swing.JPanel();
        mSXYZDataXVariableDimensionComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mSXYZDataYVariablePanel = new javax.swing.JPanel();
        mSXYZDataYVariableDimensionComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mSXYZPlotTypeRadioButtonPanel = new javax.swing.JPanel();
        mSXYZGridPlotRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mSXYZScatterPlotRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mDataColumnSelectionPanel = new jp.riken.brain.ni.samuraigraph.data.SGMDArrayDataColumnSelectionPanel();
        mTabbedPane = new javax.swing.JTabbedPane();
        mOriginTabPanel = new javax.swing.JPanel();
        mOriginNameTextFieldPanel = new javax.swing.JPanel();
        mOriginNamePanel = new javax.swing.JPanel();
        mOriginNameTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mOriginNameNorthLabel = new javax.swing.JLabel();
        mOriginNameWestLabel = new javax.swing.JLabel();
        mOriginNameSouthLabel = new javax.swing.JLabel();
        mOriginScrollPanePanel = new javax.swing.JPanel();
        mOriginScrollPane = new javax.swing.JScrollPane();
        mOriginPanel = new javax.swing.JPanel();
        mOriginScrollPaneNorthLabel = new javax.swing.JLabel();
        mOriginScrollPaneSouthLabel = new javax.swing.JLabel();
        mOriginScrollPaneWestLabel = new javax.swing.JLabel();
        mOriginScrollPaneEastLabel = new javax.swing.JLabel();
        mDimensionTabPanel = new javax.swing.JPanel();
        mStrideTabPanel = new javax.swing.JPanel();
        mStrideSubPanel = new javax.swing.JPanel();
        mStrideAvailableCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mStrideContainerPanel = new javax.swing.JPanel();
        mPickUpTabPanel = new javax.swing.JPanel();
        mSXYPickUpPanel = new javax.swing.JPanel();
        mSXYDataPickUpDimensionIndexPanel = new jp.riken.brain.ni.samuraigraph.data.SGIndexPanel();
        mAttributeTabPanel = new javax.swing.JPanel();
        mAttributeNameTextFieldPanel = new javax.swing.JPanel();
        mAttributeNamePanel = new javax.swing.JPanel();
        mAttributeNameTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mAttributeNorthSpaceLabel = new javax.swing.JLabel();
        mAttributeWestSpaceLabel = new javax.swing.JLabel();
        mAttributeSouthSpaceLabel = new javax.swing.JLabel();
        mAttributeSubPanel = new javax.swing.JPanel();
        mAttributePanel = new jp.riken.brain.ni.samuraigraph.data.SGAttributePanel();
        mAttributeNorthLabel = new javax.swing.JLabel();
        mAttributeSouthLabel = new javax.swing.JLabel();
        mAttributeWestLabel = new javax.swing.JLabel();
        mAttributeEastLabel = new javax.swing.JLabel();
        mGlobalAttributeTabPanel = new javax.swing.JPanel();
        mGlobalAttributePanel = new jp.riken.brain.ni.samuraigraph.data.SGAttributePanel();
        mGlobalAttributeNorthLabel = new javax.swing.JLabel();
        mGlobalAttributeSouthLabel = new javax.swing.JLabel();
        mGlobalAttributeWestLabel = new javax.swing.JLabel();
        mGlobalAttributeEastLabel = new javax.swing.JLabel();

        mSXYZDataStridePanel.setLayout(new java.awt.GridBagLayout());

        mSXYZDataXStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "X", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYZDataStridePanel.add(mSXYZDataXStridePanel, gridBagConstraints);

        mSXYZDataYStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Y", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYZDataStridePanel.add(mSXYZDataYStridePanel, gridBagConstraints);

        mSXYZDataIndexStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Index", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYZDataStridePanel.add(mSXYZDataIndexStridePanel, gridBagConstraints);

        mVXYDataStridePanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataXStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "X", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mVXYDataStridePanel.add(mVXYDataXStridePanel, gridBagConstraints);

        mVXYDataYStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Y", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mVXYDataStridePanel.add(mVXYDataYStridePanel, gridBagConstraints);

        mVXYDataIndexStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Index", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mVXYDataStridePanel.add(mVXYDataIndexStridePanel, gridBagConstraints);

        mSXYDataStridePanel.setLayout(new java.awt.GridBagLayout());

        mSXYDataLineAndBarStridePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Line and Bar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYDataStridePanel.add(mSXYDataLineAndBarStridePanel, gridBagConstraints);

        mSXYDataTickLabelStrideParentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tick Label", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mSXYDataTickLabelStrideParentPanel.setLayout(new java.awt.GridBagLayout());

        mSXYDataTickLabelStrideSyncCheckBox.setText("Sync");
        mSXYDataTickLabelStrideSyncCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mSXYDataTickLabelStrideParentPanel.add(mSXYDataTickLabelStrideSyncCheckBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYDataTickLabelStrideParentPanel.add(mSXYDataTickLabelStridePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        mSXYDataStridePanel.add(mSXYDataTickLabelStrideParentPanel, gridBagConstraints);

        mVXYDataDimensionPanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataFirstVariablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "First Variable", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mVXYDataFirstVariablePanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataFirstVariableDimensionGridPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grid", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mVXYDataFirstVariableDimensionGridPanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataFirstVariableDimensionXLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataFirstVariableDimensionXLabel.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 4);
        mVXYDataFirstVariableDimensionGridPanel.add(mVXYDataFirstVariableDimensionXLabel, gridBagConstraints);

        mVXYDataFirstVariableDimensionXComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataFirstVariableDimensionXComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        mVXYDataFirstVariableDimensionGridPanel.add(mVXYDataFirstVariableDimensionXComboBox, gridBagConstraints);

        mVXYDataFirstVariableDimensionYLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataFirstVariableDimensionYLabel.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 4);
        mVXYDataFirstVariableDimensionGridPanel.add(mVXYDataFirstVariableDimensionYLabel, gridBagConstraints);

        mVXYDataFirstVariableDimensionYComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataFirstVariableDimensionYComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        mVXYDataFirstVariableDimensionGridPanel.add(mVXYDataFirstVariableDimensionYComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mVXYDataFirstVariablePanel.add(mVXYDataFirstVariableDimensionGridPanel, gridBagConstraints);

        mVXYDataFirstVariableDimensionScatterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scatter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mVXYDataFirstVariableDimensionScatterPanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataFirstVariableDimensionIndexComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataFirstVariableDimensionIndexComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        mVXYDataFirstVariableDimensionScatterPanel.add(mVXYDataFirstVariableDimensionIndexComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mVXYDataFirstVariablePanel.add(mVXYDataFirstVariableDimensionScatterPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mVXYDataDimensionPanel.add(mVXYDataFirstVariablePanel, gridBagConstraints);

        mVXYDataXVariablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "X Coordinate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mVXYDataXVariablePanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataXVariableDimensionComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataXVariableDimensionComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        mVXYDataXVariablePanel.add(mVXYDataXVariableDimensionComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        mVXYDataDimensionPanel.add(mVXYDataXVariablePanel, gridBagConstraints);

        mVXYDataYVariablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Y Coordinate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mVXYDataYVariablePanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataYVariableDimensionComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataYVariableDimensionComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        mVXYDataYVariablePanel.add(mVXYDataYVariableDimensionComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        mVXYDataDimensionPanel.add(mVXYDataYVariablePanel, gridBagConstraints);

        mVXYDataSecondVariablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Second Variable", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mVXYDataSecondVariablePanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataSecondVariableDimensionGridPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grid", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mVXYDataSecondVariableDimensionGridPanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataSecondVariableDimensionXLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataSecondVariableDimensionXLabel.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 4);
        mVXYDataSecondVariableDimensionGridPanel.add(mVXYDataSecondVariableDimensionXLabel, gridBagConstraints);

        mVXYDataSecondVariableDimensionXComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataSecondVariableDimensionXComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        mVXYDataSecondVariableDimensionGridPanel.add(mVXYDataSecondVariableDimensionXComboBox, gridBagConstraints);

        mVXYDataSecondVariableDimensionYLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataSecondVariableDimensionYLabel.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 4);
        mVXYDataSecondVariableDimensionGridPanel.add(mVXYDataSecondVariableDimensionYLabel, gridBagConstraints);

        mVXYDataSecondVariableDimensionYComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataSecondVariableDimensionYComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        mVXYDataSecondVariableDimensionGridPanel.add(mVXYDataSecondVariableDimensionYComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mVXYDataSecondVariablePanel.add(mVXYDataSecondVariableDimensionGridPanel, gridBagConstraints);

        mVXYDataSecondVariableDimensionScatterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scatter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mVXYDataSecondVariableDimensionScatterPanel.setLayout(new java.awt.GridBagLayout());

        mVXYDataSecondVariableDimensionIndexComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYDataSecondVariableDimensionIndexComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        mVXYDataSecondVariableDimensionScatterPanel.add(mVXYDataSecondVariableDimensionIndexComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mVXYDataSecondVariablePanel.add(mVXYDataSecondVariableDimensionScatterPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        mVXYDataDimensionPanel.add(mVXYDataSecondVariablePanel, gridBagConstraints);

        mVXYGridPlotRadioButton.setText("Grid Plot");
        mVXYGridPlotRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYPlotTypeRadioButtonPanel.add(mVXYGridPlotRadioButton);

        mVXYScatterPlotRadioButton.setText("Scatter Plot");
        mVXYScatterPlotRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        mVXYPlotTypeRadioButtonPanel.add(mVXYScatterPlotRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mVXYDataDimensionPanel.add(mVXYPlotTypeRadioButtonPanel, gridBagConstraints);

        mSXYZDataDimensionPanel.setLayout(new java.awt.GridBagLayout());

        mSXYZDataZVariablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Z", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mSXYZDataZVariablePanel.setLayout(new java.awt.GridBagLayout());

        mSXYZDataZVariableDimensionGridPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grid", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mSXYZDataZVariableDimensionGridPanel.setLayout(new java.awt.GridBagLayout());

        mSXYZDataZVariableDimensionXLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mSXYZDataZVariableDimensionXLabel.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 4);
        mSXYZDataZVariableDimensionGridPanel.add(mSXYZDataZVariableDimensionXLabel, gridBagConstraints);

        mSXYZDataZVariableDimensionXComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mSXYZDataZVariableDimensionXComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        mSXYZDataZVariableDimensionGridPanel.add(mSXYZDataZVariableDimensionXComboBox, gridBagConstraints);

        mSXYZDataZVariableDimensionYLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mSXYZDataZVariableDimensionYLabel.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 4);
        mSXYZDataZVariableDimensionGridPanel.add(mSXYZDataZVariableDimensionYLabel, gridBagConstraints);

        mSXYZDataZVariableDimensionYComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mSXYZDataZVariableDimensionYComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        mSXYZDataZVariableDimensionGridPanel.add(mSXYZDataZVariableDimensionYComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYZDataZVariablePanel.add(mSXYZDataZVariableDimensionGridPanel, gridBagConstraints);

        mSXYZDataZVariableDimensionScatterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scatter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mSXYZDataZVariableDimensionScatterPanel.setLayout(new java.awt.GridBagLayout());

        mSXYZDataZVariableDimensionIndexComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mSXYZDataZVariableDimensionIndexComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        mSXYZDataZVariableDimensionScatterPanel.add(mSXYZDataZVariableDimensionIndexComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mSXYZDataZVariablePanel.add(mSXYZDataZVariableDimensionScatterPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        mSXYZDataDimensionPanel.add(mSXYZDataZVariablePanel, gridBagConstraints);

        mSXYZDataXVariablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "X", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mSXYZDataXVariablePanel.setLayout(new java.awt.GridBagLayout());

        mSXYZDataXVariableDimensionComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mSXYZDataXVariableDimensionComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        mSXYZDataXVariablePanel.add(mSXYZDataXVariableDimensionComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        mSXYZDataDimensionPanel.add(mSXYZDataXVariablePanel, gridBagConstraints);

        mSXYZDataYVariablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Y", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mSXYZDataYVariablePanel.setLayout(new java.awt.GridBagLayout());

        mSXYZDataYVariableDimensionComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        mSXYZDataYVariableDimensionComboBox.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        mSXYZDataYVariablePanel.add(mSXYZDataYVariableDimensionComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        mSXYZDataDimensionPanel.add(mSXYZDataYVariablePanel, gridBagConstraints);

        mSXYZGridPlotRadioButton.setText("Grid Plot");
        mSXYZGridPlotRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        mSXYZPlotTypeRadioButtonPanel.add(mSXYZGridPlotRadioButton);

        mSXYZScatterPlotRadioButton.setText("Scatter Plot");
        mSXYZScatterPlotRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        mSXYZPlotTypeRadioButtonPanel.add(mSXYZScatterPlotRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mSXYZDataDimensionPanel.add(mSXYZPlotTypeRadioButtonPanel, gridBagConstraints);

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(mDataColumnSelectionPanel, gridBagConstraints);

        mTabbedPane.setFont(new java.awt.Font("Dialog", 1, 12));

        mOriginTabPanel.setLayout(new java.awt.BorderLayout());

        mOriginNameTextFieldPanel.setLayout(new java.awt.BorderLayout());

        mOriginNamePanel.setLayout(new java.awt.BorderLayout());

        mOriginNameTextField.setBorder(null);
        mOriginNameTextField.setColumns(40);
        mOriginNameTextField.setEditable(false);
        mOriginNameTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        mOriginNamePanel.add(mOriginNameTextField, java.awt.BorderLayout.CENTER);

        mOriginNameNorthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mOriginNameNorthLabel.setText("  ");
        mOriginNamePanel.add(mOriginNameNorthLabel, java.awt.BorderLayout.NORTH);

        mOriginNameWestLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mOriginNameWestLabel.setText("  ");
        mOriginNamePanel.add(mOriginNameWestLabel, java.awt.BorderLayout.WEST);

        mOriginNameSouthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mOriginNameSouthLabel.setText("  ");
        mOriginNamePanel.add(mOriginNameSouthLabel, java.awt.BorderLayout.SOUTH);

        mOriginNameTextFieldPanel.add(mOriginNamePanel, java.awt.BorderLayout.PAGE_END);

        mOriginTabPanel.add(mOriginNameTextFieldPanel, java.awt.BorderLayout.NORTH);

        mOriginScrollPanePanel.setLayout(new java.awt.BorderLayout());

        mOriginScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        mOriginScrollPane.setHorizontalScrollBar(null);
        mOriginScrollPane.setMaximumSize(new java.awt.Dimension(32767, 220));
        mOriginScrollPane.setPreferredSize(new java.awt.Dimension(0, 220));

        mOriginPanel.setLayout(new javax.swing.BoxLayout(mOriginPanel, javax.swing.BoxLayout.Y_AXIS));
        mOriginScrollPane.setViewportView(mOriginPanel);

        mOriginScrollPanePanel.add(mOriginScrollPane, java.awt.BorderLayout.CENTER);

        mOriginScrollPaneNorthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mOriginScrollPaneNorthLabel.setText(" ");
        mOriginScrollPanePanel.add(mOriginScrollPaneNorthLabel, java.awt.BorderLayout.NORTH);

        mOriginScrollPaneSouthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mOriginScrollPaneSouthLabel.setText(" ");
        mOriginScrollPanePanel.add(mOriginScrollPaneSouthLabel, java.awt.BorderLayout.SOUTH);

        mOriginScrollPaneWestLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mOriginScrollPaneWestLabel.setText("    ");
        mOriginScrollPanePanel.add(mOriginScrollPaneWestLabel, java.awt.BorderLayout.WEST);

        mOriginScrollPaneEastLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mOriginScrollPaneEastLabel.setText("    ");
        mOriginScrollPanePanel.add(mOriginScrollPaneEastLabel, java.awt.BorderLayout.EAST);

        mOriginTabPanel.add(mOriginScrollPanePanel, java.awt.BorderLayout.CENTER);

        mTabbedPane.addTab("Origin", mOriginTabPanel);

        mDimensionTabPanel.setLayout(new java.awt.BorderLayout());
        mTabbedPane.addTab("Dimension", mDimensionTabPanel);

        mStrideTabPanel.setLayout(new java.awt.BorderLayout());

        mStrideSubPanel.setLayout(new java.awt.GridBagLayout());

        mStrideAvailableCheckBox.setText("Available");
        mStrideAvailableCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mStrideSubPanel.add(mStrideAvailableCheckBox, gridBagConstraints);

        mStrideContainerPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mStrideSubPanel.add(mStrideContainerPanel, gridBagConstraints);

        mStrideTabPanel.add(mStrideSubPanel, java.awt.BorderLayout.NORTH);

        mTabbedPane.addTab("Array Section", mStrideTabPanel);

        mPickUpTabPanel.setLayout(new java.awt.BorderLayout());

        mSXYPickUpPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        mSXYPickUpPanel.add(mSXYDataPickUpDimensionIndexPanel, gridBagConstraints);

        mPickUpTabPanel.add(mSXYPickUpPanel, java.awt.BorderLayout.NORTH);

        mTabbedPane.addTab("Pick Up", mPickUpTabPanel);

        mAttributeTabPanel.setLayout(new java.awt.BorderLayout());

        mAttributeNameTextFieldPanel.setLayout(new java.awt.BorderLayout());

        mAttributeNamePanel.setLayout(new java.awt.BorderLayout());

        mAttributeNameTextField.setBorder(null);
        mAttributeNameTextField.setColumns(40);
        mAttributeNameTextField.setEditable(false);
        mAttributeNameTextField.setFont(new java.awt.Font("Dialog", 0, 12));
        mAttributeNamePanel.add(mAttributeNameTextField, java.awt.BorderLayout.CENTER);

        mAttributeNorthSpaceLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mAttributeNorthSpaceLabel.setText("  ");
        mAttributeNamePanel.add(mAttributeNorthSpaceLabel, java.awt.BorderLayout.NORTH);

        mAttributeWestSpaceLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mAttributeWestSpaceLabel.setText("  ");
        mAttributeNamePanel.add(mAttributeWestSpaceLabel, java.awt.BorderLayout.WEST);

        mAttributeSouthSpaceLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mAttributeSouthSpaceLabel.setText("  ");
        mAttributeNamePanel.add(mAttributeSouthSpaceLabel, java.awt.BorderLayout.SOUTH);

        mAttributeNameTextFieldPanel.add(mAttributeNamePanel, java.awt.BorderLayout.PAGE_END);

        mAttributeTabPanel.add(mAttributeNameTextFieldPanel, java.awt.BorderLayout.NORTH);

        mAttributeSubPanel.setLayout(new java.awt.BorderLayout());
        mAttributeSubPanel.add(mAttributePanel, java.awt.BorderLayout.CENTER);

        mAttributeNorthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mAttributeNorthLabel.setText(" ");
        mAttributeSubPanel.add(mAttributeNorthLabel, java.awt.BorderLayout.NORTH);

        mAttributeSouthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mAttributeSouthLabel.setText(" ");
        mAttributeSubPanel.add(mAttributeSouthLabel, java.awt.BorderLayout.SOUTH);

        mAttributeWestLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mAttributeWestLabel.setText("    ");
        mAttributeSubPanel.add(mAttributeWestLabel, java.awt.BorderLayout.WEST);

        mAttributeEastLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mAttributeEastLabel.setText("    ");
        mAttributeSubPanel.add(mAttributeEastLabel, java.awt.BorderLayout.EAST);

        mAttributeTabPanel.add(mAttributeSubPanel, java.awt.BorderLayout.PAGE_END);

        mTabbedPane.addTab("Attributes", mAttributeTabPanel);

        mGlobalAttributeTabPanel.setLayout(new java.awt.BorderLayout());
        mGlobalAttributeTabPanel.add(mGlobalAttributePanel, java.awt.BorderLayout.CENTER);

        mGlobalAttributeNorthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mGlobalAttributeNorthLabel.setText(" ");
        mGlobalAttributeTabPanel.add(mGlobalAttributeNorthLabel, java.awt.BorderLayout.NORTH);

        mGlobalAttributeSouthLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mGlobalAttributeSouthLabel.setText(" ");
        mGlobalAttributeTabPanel.add(mGlobalAttributeSouthLabel, java.awt.BorderLayout.SOUTH);

        mGlobalAttributeWestLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mGlobalAttributeWestLabel.setText("    ");
        mGlobalAttributeTabPanel.add(mGlobalAttributeWestLabel, java.awt.BorderLayout.WEST);

        mGlobalAttributeEastLabel.setFont(new java.awt.Font("Dialog", 0, 3));
        mGlobalAttributeEastLabel.setText("    ");
        mGlobalAttributeTabPanel.add(mGlobalAttributeEastLabel, java.awt.BorderLayout.EAST);

        mTabbedPane.addTab("Global Attributes", mGlobalAttributeTabPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(mTabbedPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel mAttributeEastLabel;
    private javax.swing.JPanel mAttributeNamePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mAttributeNameTextField;
    private javax.swing.JPanel mAttributeNameTextFieldPanel;
    private javax.swing.JLabel mAttributeNorthLabel;
    private javax.swing.JLabel mAttributeNorthSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.data.SGAttributePanel mAttributePanel;
    private javax.swing.JLabel mAttributeSouthLabel;
    private javax.swing.JLabel mAttributeSouthSpaceLabel;
    private javax.swing.JPanel mAttributeSubPanel;
    private javax.swing.JPanel mAttributeTabPanel;
    private javax.swing.JLabel mAttributeWestLabel;
    private javax.swing.JLabel mAttributeWestSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.data.SGMDArrayDataColumnSelectionPanel mDataColumnSelectionPanel;
    private javax.swing.JPanel mDimensionTabPanel;
    private javax.swing.JLabel mGlobalAttributeEastLabel;
    private javax.swing.JLabel mGlobalAttributeNorthLabel;
    private jp.riken.brain.ni.samuraigraph.data.SGAttributePanel mGlobalAttributePanel;
    private javax.swing.JLabel mGlobalAttributeSouthLabel;
    private javax.swing.JPanel mGlobalAttributeTabPanel;
    private javax.swing.JLabel mGlobalAttributeWestLabel;
    private javax.swing.JLabel mOriginNameNorthLabel;
    private javax.swing.JPanel mOriginNamePanel;
    private javax.swing.JLabel mOriginNameSouthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mOriginNameTextField;
    private javax.swing.JPanel mOriginNameTextFieldPanel;
    private javax.swing.JLabel mOriginNameWestLabel;
    private javax.swing.JPanel mOriginPanel;
    private javax.swing.JScrollPane mOriginScrollPane;
    private javax.swing.JLabel mOriginScrollPaneEastLabel;
    private javax.swing.JLabel mOriginScrollPaneNorthLabel;
    private javax.swing.JPanel mOriginScrollPanePanel;
    private javax.swing.JLabel mOriginScrollPaneSouthLabel;
    private javax.swing.JLabel mOriginScrollPaneWestLabel;
    private javax.swing.JPanel mOriginTabPanel;
    private javax.swing.JPanel mPickUpTabPanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYDataLineAndBarStridePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYDataPickUpDimensionIndexPanel;
    private javax.swing.JPanel mSXYDataStridePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYDataTickLabelStridePanel;
    private javax.swing.JPanel mSXYDataTickLabelStrideParentPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mSXYDataTickLabelStrideSyncCheckBox;
    private javax.swing.JPanel mSXYPickUpPanel;
    private javax.swing.JPanel mSXYZDataDimensionPanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYZDataIndexStridePanel;
    private javax.swing.JPanel mSXYZDataStridePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYZDataXStridePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mSXYZDataXVariableDimensionComboBox;
    private javax.swing.JPanel mSXYZDataXVariablePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mSXYZDataYStridePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mSXYZDataYVariableDimensionComboBox;
    private javax.swing.JPanel mSXYZDataYVariablePanel;
    private javax.swing.JPanel mSXYZDataZVariableDimensionGridPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mSXYZDataZVariableDimensionIndexComboBox;
    private javax.swing.JPanel mSXYZDataZVariableDimensionScatterPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mSXYZDataZVariableDimensionXComboBox;
    private javax.swing.JLabel mSXYZDataZVariableDimensionXLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mSXYZDataZVariableDimensionYComboBox;
    private javax.swing.JLabel mSXYZDataZVariableDimensionYLabel;
    private javax.swing.JPanel mSXYZDataZVariablePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mSXYZGridPlotRadioButton;
    private javax.swing.JPanel mSXYZPlotTypeRadioButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mSXYZScatterPlotRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mStrideAvailableCheckBox;
    private javax.swing.JPanel mStrideContainerPanel;
    private javax.swing.JPanel mStrideSubPanel;
    private javax.swing.JPanel mStrideTabPanel;
    private javax.swing.JTabbedPane mTabbedPane;
    private javax.swing.JPanel mVXYDataDimensionPanel;
    private javax.swing.JPanel mVXYDataFirstVariableDimensionGridPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mVXYDataFirstVariableDimensionIndexComboBox;
    private javax.swing.JPanel mVXYDataFirstVariableDimensionScatterPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mVXYDataFirstVariableDimensionXComboBox;
    private javax.swing.JLabel mVXYDataFirstVariableDimensionXLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mVXYDataFirstVariableDimensionYComboBox;
    private javax.swing.JLabel mVXYDataFirstVariableDimensionYLabel;
    private javax.swing.JPanel mVXYDataFirstVariablePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mVXYDataIndexStridePanel;
    private javax.swing.JPanel mVXYDataSecondVariableDimensionGridPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mVXYDataSecondVariableDimensionIndexComboBox;
    private javax.swing.JPanel mVXYDataSecondVariableDimensionScatterPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mVXYDataSecondVariableDimensionXComboBox;
    private javax.swing.JLabel mVXYDataSecondVariableDimensionXLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mVXYDataSecondVariableDimensionYComboBox;
    private javax.swing.JLabel mVXYDataSecondVariableDimensionYLabel;
    private javax.swing.JPanel mVXYDataSecondVariablePanel;
    private javax.swing.JPanel mVXYDataStridePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mVXYDataXStridePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mVXYDataXVariableDimensionComboBox;
    private javax.swing.JPanel mVXYDataXVariablePanel;
    private jp.riken.brain.ni.samuraigraph.data.SGIndexPanel mVXYDataYStridePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mVXYDataYVariableDimensionComboBox;
    private javax.swing.JPanel mVXYDataYVariablePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mVXYGridPlotRadioButton;
    private javax.swing.JPanel mVXYPlotTypeRadioButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mVXYScatterPlotRadioButton;
    // End of variables declaration//GEN-END:variables

    private SGComponentGroup mSXYDataPickUpGroup = new SGComponentGroup();

    private SGComponentGroup mSXYDataPickUpDimensionGroup = new SGComponentGroup();

    private SGComponentGroup mTickLabelStrideComponentGroup = new SGComponentGroup();

    private SGComponentGroup mTickLabelComponentGroup = new SGComponentGroup();

    private SGComponentGroup mStrideComponentGroup = new SGComponentGroup();

    private SGComponentGroup mSXYZGridComponentGroup = new SGComponentGroup();

    private SGComponentGroup mSXYZScatterComponentGroup = new SGComponentGroup();

    private SGComponentGroup mVXYGridComponentGroup = new SGComponentGroup();

    private SGComponentGroup mVXYScatterComponentGroup = new SGComponentGroup();

    private void initProperty() {
    	this.addDocumentListener(this);
    	this.addItemListener(this);
    	this.mStrideAvailableCheckBox.addActionListener(this);
    	this.mSXYDataTickLabelStrideSyncCheckBox.addActionListener(this);
    	this.mSXYZGridPlotRadioButton.addActionListener(this);
    	this.mSXYZScatterPlotRadioButton.addActionListener(this);
    	this.mVXYGridPlotRadioButton.addActionListener(this);
    	this.mVXYScatterPlotRadioButton.addActionListener(this);

    	ButtonGroup sxyzButtonGroup = new ButtonGroup();
    	sxyzButtonGroup.add(this.mSXYZGridPlotRadioButton);
    	sxyzButtonGroup.add(this.mSXYZScatterPlotRadioButton);

    	ButtonGroup vxyButtonGroup = new ButtonGroup();
    	vxyButtonGroup.add(this.mVXYGridPlotRadioButton);
    	vxyButtonGroup.add(this.mVXYScatterPlotRadioButton);

        Component[] dimensionComponentArray = {
        		this.mSXYDataPickUpDimensionIndexPanel,
        };
        Component[] strideComponentArray = {
        		this.mSXYDataLineAndBarStridePanel,
        		this.mSXYDataTickLabelStrideSyncCheckBox,
        		this.mSXYDataTickLabelStridePanel,
        		this.mVXYDataXStridePanel,
        		this.mVXYDataYStridePanel,
        		this.mVXYDataIndexStridePanel,
        		this.mSXYZDataXStridePanel,
        		this.mSXYZDataYStridePanel,
        		this.mSXYZDataIndexStridePanel
        };
        Component[] sxyzDimensionGridComponentArray = {
        		this.mSXYZDataZVariableDimensionXComboBox,
        		this.mSXYZDataZVariableDimensionYComboBox,
        		this.mSXYZDataXStridePanel,
        		this.mSXYZDataYStridePanel
        };
        Component[] sxyzDimensionScatterComponentArray = {
        		this.mSXYZDataZVariableDimensionIndexComboBox,
        		this.mSXYZDataIndexStridePanel
        };
        Component[] vxyDimensionGridComponentArray = {
        		this.mVXYDataFirstVariableDimensionXComboBox,
        		this.mVXYDataFirstVariableDimensionYComboBox,
        		this.mVXYDataSecondVariableDimensionXComboBox,
        		this.mVXYDataSecondVariableDimensionYComboBox,
        		this.mVXYDataXStridePanel,
        		this.mVXYDataYStridePanel
        };
        Component[] vxyDimensionScatterComponentArray = {
        		this.mVXYDataFirstVariableDimensionIndexComboBox,
        		this.mVXYDataSecondVariableDimensionIndexComboBox,
        		this.mVXYDataIndexStridePanel
        };

        // creates a map of component groups
        Map<Component, SGComponentGroupElement> compMap = new HashMap<Component, SGComponentGroupElement>();
        for (Component com : dimensionComponentArray) {
            this.addComponentGroupMap(com, compMap);
        }
        for (Component com : strideComponentArray) {
            this.addComponentGroupMap(com, compMap);
        }
        for (Component com : sxyzDimensionGridComponentArray) {
            this.addComponentGroupMap(com, compMap);
        }
        for (Component com : sxyzDimensionScatterComponentArray) {
            this.addComponentGroupMap(com, compMap);
        }
        for (Component com : vxyDimensionGridComponentArray) {
            this.addComponentGroupMap(com, compMap);
        }
        for (Component com : vxyDimensionScatterComponentArray) {
            this.addComponentGroupMap(com, compMap);
        }
        
		List<SGComponentGroupElement> dimensionComponents = new ArrayList<SGComponentGroupElement>();
        for (Component com : dimensionComponentArray) {
        	dimensionComponents.add(compMap.get(com));
        }
        this.mSXYDataPickUpDimensionGroup.addElement(dimensionComponents);

		List<SGComponentGroupElement> pickUpComponents = new ArrayList<SGComponentGroupElement>();
		pickUpComponents.addAll(dimensionComponents);
        this.mSXYDataPickUpGroup.addElement(pickUpComponents);

		List<SGComponentGroupElement> tickLabelStrideComponents = new ArrayList<SGComponentGroupElement>();
		tickLabelStrideComponents.add(compMap.get(this.mSXYDataTickLabelStridePanel));
		List<SGComponentGroupElement> tickLabelComponents = new ArrayList<SGComponentGroupElement>();
		tickLabelComponents.addAll(tickLabelStrideComponents);
		tickLabelComponents.add(compMap.get(this.mSXYDataTickLabelStrideSyncCheckBox));
		this.mTickLabelStrideComponentGroup.addElement(tickLabelStrideComponents);
		this.mTickLabelComponentGroup.addElement(tickLabelComponents);

		List<SGComponentGroupElement> strideComponents = new ArrayList<SGComponentGroupElement>();
        for (Component com : strideComponentArray) {
    		strideComponents.add(compMap.get(com));
        }

		this.mStrideComponentGroup.addElement(strideComponents);
		this.mStrideComponentGroup.addElement(tickLabelComponents);
		
		List<SGComponentGroupElement> sxyzGridComponents = new ArrayList<SGComponentGroupElement>();
		for (Component com : sxyzDimensionGridComponentArray) {
			sxyzGridComponents.add(compMap.get(com));
		}
		this.mSXYZGridComponentGroup.addElement(sxyzGridComponents);

		List<SGComponentGroupElement> sxyzScatterComponents = new ArrayList<SGComponentGroupElement>();
		for (Component com : sxyzDimensionScatterComponentArray) {
			sxyzScatterComponents.add(compMap.get(com));
		}
		this.mSXYZScatterComponentGroup.addElement(sxyzScatterComponents);
		
		List<SGComponentGroupElement> vxyGridComponents = new ArrayList<SGComponentGroupElement>();
		for (Component com : vxyDimensionGridComponentArray) {
			vxyGridComponents.add(compMap.get(com));
		}
		this.mVXYGridComponentGroup.addElement(vxyGridComponents);

		List<SGComponentGroupElement> vxyScatterComponents = new ArrayList<SGComponentGroupElement>();
		for (Component com : vxyDimensionScatterComponentArray) {
			vxyScatterComponents.add(compMap.get(com));
		}
		this.mVXYScatterComponentGroup.addElement(vxyScatterComponents);
    }

    private void addComponentGroupMap(Component comp, Map<Component, SGComponentGroupElement> map) {
    	map.put(comp, new SGComponentGroupElement(comp));
    }

    /**
     * The multidimensional data file.
     */
    private SGMDArrayFile mMDFile = null;

    /**
     * The map of origins.
     */
	private Map<String, int[]> mOriginMap = new HashMap<String, int[]>();

	@Override
	protected JScrollPane getOriginScrollPane() {
		return this.mOriginScrollPane;
	}

    /**
     * Checks selected items.
     *
     * @return true if selected items are valid for the data type
     */
	@Override
	public boolean checkSelectedItems() {
        // check selected items of the table
		SGDataColumnSelectionPanel selectionPanel = this.getDataColumnSelectionPanel();
        if (selectionPanel.checkSelectedItems() == false) {
            return false;
        }

        // check multidimensional data
        SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
        SGMDArrayDataColumnInfo[] colsMD = new SGMDArrayDataColumnInfo[cols.length];
        for (int ii = 0; ii < cols.length; ii++) {
        	colsMD[ii] = (SGMDArrayDataColumnInfo) cols[ii];
        }
        Map<String, Object> infoMap = new HashMap<String, Object>(this.mInfoMap);
        StringBuffer errmsgBuffer = new StringBuffer();
        if (SGDataUtility.isSXYTypeData(this.mDataType)) {
        	// setup information map
        	Map<String, Integer> dimensionIndexMap = this.getSXYDataPickUpDimensionIndexMap();
    		infoMap.put(SGIDataInformationKeyConstants.KEY_SXY_MDARRAY_PICKUP_DIMENSION_INDEX_MAP,
    				dimensionIndexMap);
    		SGIntegerSeriesSet indices = this.mSXYDataPickUpDimensionIndexPanel.getIndices();
    		infoMap.put(SGIDataInformationKeyConstants.KEY_SXY_PICKUP_INDICES, indices);

            if (SGDataUtility.checkMDArrayDataColumns(colsMD, this.mDataType,
            		this.mMDFile, infoMap, errmsgBuffer) == false) {
            	selectionPanel.setMessage(errmsgBuffer.toString());
                return false;
            }

    		// checks the input for stride
            if (!this.mSXYDataLineAndBarStridePanel.hasValidInput()) {
            	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_LINE_AND_BAR);
            	return false;
            }
            if (this.isTickLabelAvailable(colsMD)) {
                if (!this.mSXYDataTickLabelStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_TICK_LABEL);
                	return false;
                }
            }

        } else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
        	
        	final boolean gridPlot = this.isSXYZGridPlotSelected();
        	infoMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_GRID_PLOT_FLAG, gridPlot);
        	
            if (SGDataUtility.checkMDArrayDataColumns(colsMD, this.mDataType,
            		this.mMDFile, infoMap, errmsgBuffer) == false) {
            	selectionPanel.setMessage(errmsgBuffer.toString());
                return false;
            }

        	Object dimZX = this.mSXYZDataZVariableDimensionXComboBox.getSelectedItem();
        	Object dimZY = this.mSXYZDataZVariableDimensionYComboBox.getSelectedItem();
        	if (dimZX != null && dimZY != null) {
            	if (dimZX.equals(dimZY)) {
                	selectionPanel.setMessage(SGDataUtility.MSG_UNIQUE_DIMENSIONS);
            		return false;
            	}
        	}
    		List<SGDataColumnInfo> zColList = this.findColumnsWithColumnType(cols, Z_VALUE);
    		SGMDArrayDataColumnInfo zCol = (SGMDArrayDataColumnInfo) zColList.get(0);
    		if (zCol != null) {
        		int[] zDims = zCol.getDimensions();
            	Object dimX = this.mSXYZDataXVariableDimensionComboBox.getSelectedItem();
            	if (dimZX != null && dimX != null) {
            		if (!this.compareDimensionLength(dimZX, zDims, dimX, X_VALUE, colsMD)) {
                    	selectionPanel.setMessage(SGDataUtility.MSG_DIMENSIONS_SAME_LENGTH);
            			return false;
            		}
            	}
            	Object dimY = this.mSXYZDataYVariableDimensionComboBox.getSelectedItem();
            	if (dimZY != null && dimY != null) {
            		if (!this.compareDimensionLength(dimZY, zDims, dimY, Y_VALUE, colsMD)) {
                    	selectionPanel.setMessage(SGDataUtility.MSG_DIMENSIONS_SAME_LENGTH);
            			return false;
            		}
            	}
    		}

    		// checks the input for stride
    		if (gridPlot) {
                if (!this.mSXYZDataXStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_X);
                	return false;
                }
                if (!this.mSXYZDataYStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_Y);
                	return false;
                }
    		} else {
                if (!this.mSXYZDataIndexStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_INDEX);
                	return false;
                }
    		}

        } else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
        	
        	final boolean gridPlot = this.mVXYGridPlotRadioButton.isSelected();
        	infoMap.put(SGIDataInformationKeyConstants.KEY_VXY_GRID_PLOT_FLAG, gridPlot);

            if (SGDataUtility.checkMDArrayDataColumns(colsMD, this.mDataType,
            		this.mMDFile, infoMap, errmsgBuffer) == false) {
            	selectionPanel.setMessage(errmsgBuffer.toString());
                return false;
            }

        	Object dimFX = this.mVXYDataFirstVariableDimensionXComboBox.getSelectedItem();
        	Object dimFY = this.mVXYDataFirstVariableDimensionYComboBox.getSelectedItem();
        	if (dimFX != null && dimFY != null) {
            	if (dimFX.equals(dimFY)) {
                	selectionPanel.setMessage(SGDataUtility.MSG_UNIQUE_DIMENSIONS);
            		return false;
            	}
        	}
        	Object dimSX = this.mVXYDataSecondVariableDimensionXComboBox.getSelectedItem();
        	Object dimSY = this.mVXYDataSecondVariableDimensionYComboBox.getSelectedItem();
        	if (dimSX != null && dimSY != null) {
            	if (dimSX.equals(dimSY)) {
                	selectionPanel.setMessage(SGDataUtility.MSG_UNIQUE_DIMENSIONS);
            		return false;
            	}
        	}
        	final String first = SGDataUtility.getVXYFirstComponentColumnType(this.mInfoMap);
        	final String second = SGDataUtility.getVXYSecondComponentColumnType(this.mInfoMap);
        	List<SGDataColumnInfo> fColList = this.findColumnsWithColumnType(cols, first);
    		SGMDArrayDataColumnInfo fCol = (SGMDArrayDataColumnInfo) fColList.get(0);
    		if (fCol != null) {
        		int[] fDims = fCol.getDimensions();
            	Object dimX = this.mVXYDataXVariableDimensionComboBox.getSelectedItem();
            	if (dimFX != null && dimX != null) {
            		if (!this.compareDimensionLength(dimFX, fDims, dimX, X_COORDINATE, colsMD)) {
                    	selectionPanel.setMessage(SGDataUtility.MSG_DIMENSIONS_SAME_LENGTH);
            			return false;
            		}
            	}
            	Object dimY = this.mVXYDataYVariableDimensionComboBox.getSelectedItem();
            	if (dimFY != null && dimY != null) {
            		if (!this.compareDimensionLength(dimFY, fDims, dimY, Y_COORDINATE, colsMD)) {
                    	selectionPanel.setMessage(SGDataUtility.MSG_DIMENSIONS_SAME_LENGTH);
            			return false;
            		}
            	}
    		}
    		List<SGDataColumnInfo> sColList = this.findColumnsWithColumnType(cols, second);
    		SGMDArrayDataColumnInfo sCol = (SGMDArrayDataColumnInfo) sColList.get(0);
    		if (sCol != null) {
        		int[] sDims = sCol.getDimensions();
            	Object dimX = this.mVXYDataXVariableDimensionComboBox.getSelectedItem();
            	if (dimSX != null && dimX != null) {
            		if (!this.compareDimensionLength(dimSX, sDims, dimX, X_COORDINATE, colsMD)) {
                    	selectionPanel.setMessage(SGDataUtility.MSG_DIMENSIONS_SAME_LENGTH);
            			return false;
            		}
            	}
            	Object dimY = this.mVXYDataYVariableDimensionComboBox.getSelectedItem();
            	if (dimSY != null && dimY != null) {
            		if (!this.compareDimensionLength(dimSY, sDims, dimY, Y_COORDINATE, colsMD)) {
                    	selectionPanel.setMessage(SGDataUtility.MSG_DIMENSIONS_SAME_LENGTH);
            			return false;
            		}
            	}
    		}

    		// checks the input for stride
    		if (gridPlot) {
                if (!this.mVXYDataXStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_X);
                	return false;
                }
                if (!this.mVXYDataYStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_Y);
                	return false;
                }
    		} else {
                if (!this.mVXYDataIndexStridePanel.hasValidInput()) {
                	selectionPanel.setMessage(SGDataUtility.MSG_PROPER_STRIDE_INDEX);
                	return false;
                }
    		}
        }

        // clears the message
        selectionPanel.clearMessage();

		return true;
	}

	private boolean compareDimensionLength(Object objZ, int[] zDims, Object obj, String key,
			SGMDArrayDataColumnInfo[] colsMD) {
		Integer zIndex = SGUtilityText.getInteger(objZ.toString());
		final int zDim = zDims[zIndex];
		Integer index = SGUtilityText.getInteger(obj.toString());
		List<SGDataColumnInfo> colList = this.findColumnsWithColumnType(colsMD, key);
		if (colList.size() != 1) {
			return false;
		}
		SGMDArrayDataColumnInfo col = (SGMDArrayDataColumnInfo) colList.get(0);
		if (col != null) {
			int[] dims = col.getDimensions();
			final int dim = dims[index];
			if (zDim != dim) {
				return false;
			}
		}
		return true;
	}

    /**
     * Clear all data.
     */
	@Override
    public void clear() {
    	super.clear();
        this.mOriginPanel.removeAll();
        this.mAttributePanel.clear();
        this.mGlobalAttributePanel.clear();
    }

	@Override
	protected SGDataColumnSelectionPanel getDataColumnSelectionPanel() {
		return this.mDataColumnSelectionPanel;
	}

    /**
     * Returns selected column types.
     *
     * @return selected column types
     */
	@Override
	public SGDataColumnInfo[] getDataColumnTypes() {
        SGDataColumnInfo[] cols = this.mDataColumnSelectionPanel.getDataColumnInfoArray();
        return cols;
	}

    /**
     * Returns the origins of a given variable.
     *
     * @param name
     *           the name of a variable
     * @return the origins of a given variable
     */
    public int[] getOrigins(final String name) {
    	SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) this.mDataColumnSelectionPanel.findDataColumnInfo(name);
    	return mdInfo.getOrigins();
    }

    /**
     * Updates the components with variables in the table.
     */
	@Override
	protected void updateComponentsWithTable() {

        // create a list of the names of selected variables
        SGDataColumnInfo[] cols = this.getDataColumnInfoArray();

		if (SGDataUtility.isSXYTypeData(this.mDataType)) {
			
	        // refresh the columns that error bars and tick labels are appended
	        this.clearUselessColumnType(cols);

	        List<SGDataColumnInfo> xColList = this.findColumnsWithColumnType(cols, X_VALUE);
	        List<SGDataColumnInfo> yColList = this.findColumnsWithColumnType(cols, Y_VALUE);

	        // updates the components for pick up
	        List<SGMDArrayDataColumnInfo> pickUpColList = this.findValidPickUpXYColumns();
	        if (pickUpColList != null && pickUpColList.size() != 0) {
		        int dimLen = -1;
	        	for (SGMDArrayDataColumnInfo pickUpCol : pickUpColList) {
		        	int[] dims = pickUpCol.getDimensions();
		        	Integer index = pickUpCol.getDimensionIndex(SGIMDArrayConstants.KEY_SXY_PICKUP_DIMENSION);
		        	final int len = dims[index];
		        	final int curLen = this.mSXYDataPickUpDimensionIndexPanel.getLength();
		        	if (len != curLen) {
		        		dimLen = len;
		        		break;
		        	}
	        	}
		        if (dimLen != -1) {
		        	this.mSXYDataPickUpDimensionIndexPanel.setEnabled(true);
		        	SGIntegerSeries series = SGDataUtility.createDefaultStepSeries(dimLen);
		        	this.mSXYDataPickUpDimensionIndexPanel.setLength(dimLen);
		        	this.mSXYDataPickUpDimensionIndexPanel.setIndices(series);
		        }
	        } else {
	        	this.mSXYDataPickUpDimensionIndexPanel.clearAll();
	        	this.mSXYDataPickUpDimensionIndexPanel.setEnabled(false);
	        }

	        // updates the dimension panels
	        final int row = this.getTable().getSelectedRow();
	        if (row != -1) {
	            this.updateDimensionPanelsEnabled(row);
	        }

	        // set enabled / disabled the panel for the stride of tick labels
	        final boolean tickLabelAvailable = this.isTickLabelAvailable(cols);
	        this.mTickLabelComponentGroup.setEnabled(tickLabelAvailable);

	        // get selected dimension and set length
	        boolean xyDimLenValid = true;
	        int xyDimLen = -1;
	        for (SGDataColumnInfo info : xColList) {
	        	SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) info;
	        	final int len = mdInfo.getGenericDimensionLength();
                if (len == -1) {
                	return;
                }
	        	if (xyDimLen == -1) {
	        		xyDimLen = len;
	        	} else {
	        		if (len != xyDimLen) {
	        			xyDimLenValid = false;
	        			break;
	        		}
	        	}
	        }
	        if (xyDimLenValid) {
		        for (SGDataColumnInfo info : yColList) {
		        	SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) info;
		        	final int len = mdInfo.getGenericDimensionLength();
                    if (len == -1) {
                    	return;
                    }
		        	if (xyDimLen == -1) {
		        		xyDimLen = len;
		        	} else {
		        		if (len != xyDimLen) {
		        			xyDimLenValid = false;
		        			break;
		        		}
		        	}
		        }
	        }
	        final boolean tlSync = this.mSXYDataTickLabelStrideSyncCheckBox.isSelected();
	        if (xyDimLen != -1 && xyDimLenValid) {
	        	final int lenOld = this.mSXYDataLineAndBarStridePanel.getLength();
	        	this.mSXYDataLineAndBarStridePanel.setLength(xyDimLen);
		        if (tlSync) {
		        	this.mSXYDataTickLabelStridePanel.setLength(xyDimLen);
		        }
	        	if (lenOld != xyDimLen) {
	        		Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility.calcMDArrayDefaultStride(
	        				cols, this.mInfoMap);
	        		SGIntegerSeriesSet indices = strideMap.get(SGIDataInformationKeyConstants.KEY_SXY_STRIDE);
		        	this.mSXYDataLineAndBarStridePanel.setIndices(indices);
			        if (tlSync) {
			        	this.mSXYDataTickLabelStridePanel.setIndices(indices);
			        }
	        	}
	        } else {
	        	this.mSXYDataLineAndBarStridePanel.clearAll();
	        	if (tlSync) {
	        		this.mSXYDataTickLabelStridePanel.clearAll();
	        	}
	        }

	        if (!tlSync) {
		        boolean tlDimLenValid = true;
		        int tlDimLen = -1;
		        List<SGDataColumnInfo> tlColList = this.findColumnsWithColumnTypeStartsWith(cols, TICK_LABEL);
		        for (SGDataColumnInfo info : tlColList) {
		        	SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) info;
		        	final int len = mdInfo.getGenericDimensionLength();
                    if (len == -1) {
                    	return;
                    }
		        	if (tlDimLen == -1) {
		        		tlDimLen = len;
		        	} else {
		        		if (len != tlDimLen) {
		        			tlDimLenValid = false;
		        			break;
		        		}
		        	}
		        }
		        if (tlDimLen != -1 && tlDimLenValid) {
		        	final int lenOld = this.mSXYDataTickLabelStridePanel.getLength();
		        	this.mSXYDataTickLabelStridePanel.setLength(tlDimLen);
		        	if (lenOld != tlDimLen) {
		        		Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility.calcMDArrayDefaultStride(
		        				cols, this.mInfoMap);
		        		SGIntegerSeriesSet indices = strideMap.get(SGIDataInformationKeyConstants.KEY_SXY_STRIDE);
			        	this.mSXYDataTickLabelStridePanel.setIndices(indices);
		        	}
		        } else {
	        		this.mSXYDataTickLabelStridePanel.clearAll();
		        }
	        }

		} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {

	        // finds columns
	        List<SGDataColumnInfo> xColList = this.findColumnsWithColumnType(cols, X_VALUE);
	        List<SGDataColumnInfo> yColList = this.findColumnsWithColumnType(cols, Y_VALUE);
	        List<SGDataColumnInfo> zColList = this.findColumnsWithColumnType(cols, Z_VALUE);
			SGMDArrayDataColumnInfo xInfo = null;
			SGMDArrayDataColumnInfo yInfo = null;
			SGMDArrayDataColumnInfo zInfo = null;
	        if (xColList.size() == 1) {
	        	xInfo = (SGMDArrayDataColumnInfo) xColList.get(0);
	        }
	        if (yColList.size() == 1) {
	        	yInfo = (SGMDArrayDataColumnInfo) yColList.get(0);
	        }
	        if (zColList.size() == 1) {
	        	zInfo = (SGMDArrayDataColumnInfo) zColList.get(0);
	        }

	        // clear current dimension index
	        this.clearDimensionIndex(KEY_GENERIC_DIMENSION);
	        this.clearDimensionIndex(KEY_SXYZ_X_DIMENSION);
	        this.clearDimensionIndex(KEY_SXYZ_Y_DIMENSION);

	        // remove all items
	        this.mSXYZDataXVariableDimensionComboBox.removeAllItems();
	        this.mSXYZDataYVariableDimensionComboBox.removeAllItems();
	        this.mSXYZDataZVariableDimensionXComboBox.removeAllItems();
	        this.mSXYZDataZVariableDimensionYComboBox.removeAllItems();
	        this.mSXYZDataZVariableDimensionIndexComboBox.removeAllItems();

	        // updates the dimension index
	        Integer xIndex = null;
	        if (xInfo != null) {
	        	int[] dims = xInfo.getDimensions();
	        	this.addIndexItems(this.mSXYZDataXVariableDimensionComboBox, dims.length);
	        	xIndex = xInfo.getDimensionIndex(SGMDArrayVariable.KEY_GENERIC_DIMENSION);
	        	if (xIndex == null) {
	        		xIndex = 0;
	        	}
        		if (xIndex != -1) {
            		this.setSelectedItem(this.mSXYZDataXVariableDimensionComboBox, xIndex.toString());
    		        this.mDataColumnSelectionPanel.setDimensionIndex(xInfo.getName(),
    		        		SGMDArrayVariable.KEY_GENERIC_DIMENSION, xIndex);
        		}
	        }
	        Integer yIndex = null;
	        if (yInfo != null) {
	        	int[] dims = yInfo.getDimensions();
	        	this.addIndexItems(this.mSXYZDataYVariableDimensionComboBox, dims.length);
	        	yIndex = yInfo.getDimensionIndex(SGMDArrayVariable.KEY_GENERIC_DIMENSION);
	        	if (yIndex == null) {
	        		yIndex = 0;
	        	}
        		if (yIndex != -1) {
            		this.setSelectedItem(this.mSXYZDataYVariableDimensionComboBox, yIndex.toString());
    		        this.mDataColumnSelectionPanel.setDimensionIndex(yInfo.getName(),
    		        		SGMDArrayVariable.KEY_GENERIC_DIMENSION, yIndex);
        		}
	        }
	        
	        if (this.isSXYZGridPlotSelected()) {
	        	// grid plot
	    		this.mSXYZGridComponentGroup.setEnabled(true);
	    		this.mSXYZScatterComponentGroup.setEnabled(false);
	        	
		        Integer zxIndex = null;
		        Integer zyIndex = null;
		        if (zInfo != null) {
		        	int[] dims = zInfo.getDimensions();
		        	if (dims.length >= 2) {
			        	this.addIndexItems(this.mSXYZDataZVariableDimensionXComboBox, dims.length);
			        	this.addIndexItems(this.mSXYZDataZVariableDimensionYComboBox, dims.length);

			        	// x-component of z-variable
			        	zxIndex = zInfo.getDimensionIndex(KEY_SXYZ_X_DIMENSION);
			        	if (zxIndex == null) {
			        		if (xIndex != null) {
			        			final int len = xInfo.getDimensions()[xIndex];
			        			for (int ii = 0; ii < dims.length; ii++) {
			        				if (dims[ii] == len) {
			        					zxIndex = ii;
			        					break;
			        				}
			        			}
			        		}
			        		if (zxIndex == null) {
			        			zxIndex = 0;
			        		}
			        	}
		        		this.setSelectedItem(this.mSXYZDataZVariableDimensionXComboBox, zxIndex.toString());
				        this.mDataColumnSelectionPanel.setDimensionIndex(zInfo.getName(),
				        		KEY_SXYZ_X_DIMENSION, zxIndex);

			        	// y-component of z-variable
			        	zyIndex = zInfo.getDimensionIndex(KEY_SXYZ_Y_DIMENSION);
			        	if (zyIndex == null) {
			        		if (yIndex != null) {
			        			final int len = yInfo.getDimensions()[yIndex];
			        			for (int ii = 0; ii < dims.length; ii++) {
			        				if (dims[ii] == len) {
			        					if (zxIndex != null && ii == zxIndex) {
			        						continue;
			        					}
			        					zyIndex = ii;
			        					break;
			        				}
			        			}
			        		}
			        		if (zyIndex == null) {
			        			zyIndex = 1;
			        		}
			        	}
		        		this.setSelectedItem(this.mSXYZDataZVariableDimensionYComboBox, zyIndex.toString());
				        this.mDataColumnSelectionPanel.setDimensionIndex(zInfo.getName(),
				        		KEY_SXYZ_Y_DIMENSION, zyIndex);
		        	}
		        }

		        this.onItemSelected(this.mSXYZDataXVariableDimensionComboBox);
		        this.onItemSelected(this.mSXYZDataYVariableDimensionComboBox);
		        this.onItemSelected(this.mSXYZDataZVariableDimensionXComboBox);
		        this.onItemSelected(this.mSXYZDataZVariableDimensionYComboBox);

				// updates the length
				boolean bx = false;
				boolean by = false;
				if (xInfo != null) {
					this.mSXYZDataXStridePanel.setLength(xInfo.getGenericDimensionLength());
					bx = true;
				} else {
					if (this.isValidDimensionIndex(zxIndex)) {
						final int[] dims = zInfo.getDimensions();
						this.mSXYZDataXStridePanel.setLength(dims[zxIndex]);
						bx = true;
					}
				}
				if (yInfo != null) {
					this.mSXYZDataYStridePanel.setLength(yInfo.getGenericDimensionLength());
					by = true;
				} else {
					if (this.isValidDimensionIndex(zyIndex)) {
						final int[] dims = zInfo.getDimensions();
						this.mSXYZDataYStridePanel.setLength(dims[zyIndex]);
						by = true;
					}
				}
				if (!bx) {
					this.mSXYZDataXStridePanel.clearAll();
				}
				if (!by) {
					this.mSXYZDataYStridePanel.clearAll();
				}
				
				this.mSXYZDataIndexStridePanel.clearAll();
				
	        } else {
	        	// scatter plot
	    		this.mSXYZGridComponentGroup.setEnabled(false);
	    		this.mSXYZScatterComponentGroup.setEnabled(true);

		        Integer zIndex = null;
		        if (zInfo != null) {
		        	zIndex = zInfo.getGenericDimensionIndex();
		        }

	    		// add items to the combo box
		        if (zInfo != null) {
		        	int[] dims = zInfo.getDimensions();
		        	if (dims.length >= 1) {
			        	this.addIndexItems(this.mSXYZDataZVariableDimensionIndexComboBox, dims.length);
			        	if (zIndex != null) {
				        	this.mSXYZDataZVariableDimensionIndexComboBox.setSelectedItem(zIndex.toString());
			        	}
		        	}
		        }

				// updates the length
		        boolean bz = false;
		        int xLen = -1;
		        int yLen = -1;
		        int zLen = -1;
				if (this.isValidDimensionIndex(zIndex)) {
					final int[] dims = zInfo.getDimensions();
			        zLen = dims[zIndex];
				}
				if (xInfo != null) {
					xLen = xInfo.getGenericDimensionLength();
				}
				if (yInfo != null) {
					yLen = yInfo.getGenericDimensionLength();
				}
				if (xLen != -1 || yLen != -1 || zLen != -1) {
					int[] lenArray = { xLen, yLen, zLen };
					final Integer len = SGUtility.checkEquality(lenArray);
					bz = (len != null);
				}
				if (!bz) {
					this.mSXYZDataIndexStridePanel.clearAll();
				} else {
					this.mSXYZDataIndexStridePanel.setLength(zLen);
				}

		        this.onItemSelected(this.mSXYZDataXVariableDimensionComboBox);
		        this.onItemSelected(this.mSXYZDataYVariableDimensionComboBox);
		        this.onItemSelected(this.mSXYZDataZVariableDimensionIndexComboBox);

		        // clears unused stride panels
				this.mSXYZDataXStridePanel.clearAll();
				this.mSXYZDataYStridePanel.clearAll();
	        }
			
		} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {

	        // finds columns
			final String first = SGDataUtility.getVXYFirstComponentColumnType(this.mInfoMap);
			final String second = SGDataUtility.getVXYSecondComponentColumnType(this.mInfoMap);
	        List<SGDataColumnInfo> xColList = this.findColumnsWithColumnType(cols, X_COORDINATE);
	        List<SGDataColumnInfo> yColList = this.findColumnsWithColumnType(cols, Y_COORDINATE);
	        List<SGDataColumnInfo> fColList = this.findColumnsWithColumnType(cols, first);
	        List<SGDataColumnInfo> sColList = this.findColumnsWithColumnType(cols, second);
			SGMDArrayDataColumnInfo xInfo = null;
			SGMDArrayDataColumnInfo yInfo = null;
			SGMDArrayDataColumnInfo fInfo = null;
			SGMDArrayDataColumnInfo sInfo = null;
	        if (xColList.size() == 1) {
	        	xInfo = (SGMDArrayDataColumnInfo) xColList.get(0);
	        }
	        if (yColList.size() == 1) {
	        	yInfo = (SGMDArrayDataColumnInfo) yColList.get(0);
	        }
	        if (fColList.size() == 1) {
	        	fInfo = (SGMDArrayDataColumnInfo) fColList.get(0);
	        }
	        if (sColList.size() == 1) {
	        	sInfo = (SGMDArrayDataColumnInfo) sColList.get(0);
	        }

	        // clear current dimension index
	        this.clearDimensionIndex(KEY_GENERIC_DIMENSION);
	        this.clearDimensionIndex(KEY_VXY_X_DIMENSION);
	        this.clearDimensionIndex(KEY_VXY_Y_DIMENSION);

	        // remove all items
	        this.mVXYDataXVariableDimensionComboBox.removeAllItems();
	        this.mVXYDataYVariableDimensionComboBox.removeAllItems();
	        this.mVXYDataFirstVariableDimensionXComboBox.removeAllItems();
	        this.mVXYDataFirstVariableDimensionYComboBox.removeAllItems();
	        this.mVXYDataFirstVariableDimensionIndexComboBox.removeAllItems();
	        this.mVXYDataSecondVariableDimensionXComboBox.removeAllItems();
	        this.mVXYDataSecondVariableDimensionYComboBox.removeAllItems();
	        this.mVXYDataSecondVariableDimensionIndexComboBox.removeAllItems();

	        // updates the dimension index
	        Integer xIndex = null;
	        if (xInfo != null) {
	        	int[] dims = xInfo.getDimensions();
	        	this.addIndexItems(this.mVXYDataXVariableDimensionComboBox, dims.length);
	        	xIndex = xInfo.getDimensionIndex(SGMDArrayVariable.KEY_GENERIC_DIMENSION);
	        	if (!this.isValidDimensionIndex(xIndex)) {
	        		xIndex = 0;
	        	}
	        	if (this.isValidDimensionIndex(xIndex)) {
	        		this.setSelectedItem(this.mVXYDataXVariableDimensionComboBox, xIndex.toString());
			        this.mDataColumnSelectionPanel.setDimensionIndex(xInfo.getName(),
			        		SGMDArrayVariable.KEY_GENERIC_DIMENSION, xIndex);
	        	}
	        }
	        Integer yIndex = null;
	        if (yInfo != null) {
	        	int[] dims = yInfo.getDimensions();
	        	this.addIndexItems(this.mVXYDataYVariableDimensionComboBox, dims.length);
	        	yIndex = yInfo.getDimensionIndex(SGMDArrayVariable.KEY_GENERIC_DIMENSION);
	        	if (!this.isValidDimensionIndex(yIndex)) {
	        		yIndex = 0;
	        	}
	        	if (this.isValidDimensionIndex(yIndex)) {
	        		this.setSelectedItem(this.mVXYDataYVariableDimensionComboBox, yIndex.toString());
			        this.mDataColumnSelectionPanel.setDimensionIndex(yInfo.getName(),
			        		SGMDArrayVariable.KEY_GENERIC_DIMENSION, yIndex);
	        	}
	        }
	        
	        if (this.isVXYGridPlotSelected()) {
	        	// grid plot
	    		this.mVXYGridComponentGroup.setEnabled(true);
	    		this.mVXYScatterComponentGroup.setEnabled(false);
	    		
		        Integer fxIndex = null;
		        Integer fyIndex = null;
		        if (fInfo != null) {
		        	int[] dims = fInfo.getDimensions();
		        	if (dims.length >= 2) {
			        	this.addIndexItems(this.mVXYDataFirstVariableDimensionXComboBox, dims.length);
			        	this.addIndexItems(this.mVXYDataFirstVariableDimensionYComboBox, dims.length);
			        	fxIndex = fInfo.getDimensionIndex(KEY_VXY_X_DIMENSION);
			        	if (!this.isValidDimensionIndex(fxIndex)) {
			        		if (this.isValidDimensionIndex(xIndex)) {
			        			final int len = xInfo.getDimensions()[xIndex];
			        			for (int ii = 0; ii < dims.length; ii++) {
			        				if (dims[ii] == len) {
			        					fxIndex = ii;
			        					break;
			        				}
			        			}
			        		}
			        		if (!this.isValidDimensionIndex(fxIndex)) {
			        			fxIndex = 0;
			        		}
			        	}
			        	fyIndex = fInfo.getDimensionIndex(KEY_VXY_Y_DIMENSION);
			        	if (!this.isValidDimensionIndex(fyIndex)) {
			        		if (this.isValidDimensionIndex(yIndex)) {
			        			final int len = yInfo.getDimensions()[yIndex];
			        			for (int ii = 0; ii < dims.length; ii++) {
			        				if (dims[ii] == len) {
			        					if (this.isValidDimensionIndex(fxIndex) && ii == fxIndex) {
			        						continue;
			        					}
			        					fyIndex = ii;
			        					break;
			        				}
			        			}
			        		}
			        		if (!this.isValidDimensionIndex(fyIndex)) {
			        			fyIndex = 1;
			        		}
			        	}
				        if (this.isValidDimensionIndex(fxIndex)) {
			        		this.setSelectedItem(this.mVXYDataFirstVariableDimensionXComboBox, fxIndex.toString());
					        this.mDataColumnSelectionPanel.setDimensionIndex(fInfo.getName(),
					        		KEY_VXY_X_DIMENSION, fxIndex);
				        }
				        if (this.isValidDimensionIndex(fyIndex)) {
			        		this.setSelectedItem(this.mVXYDataFirstVariableDimensionYComboBox, fyIndex.toString());
					        this.mDataColumnSelectionPanel.setDimensionIndex(fInfo.getName(),
					        		KEY_VXY_Y_DIMENSION, fyIndex);
				        }
		        	}
		        }
		        
		        Integer sxIndex = null;
		        Integer syIndex = null;
		        if (sInfo != null) {
		        	int[] dims = sInfo.getDimensions();
		        	if (dims.length >= 2) {
			        	this.addIndexItems(this.mVXYDataSecondVariableDimensionXComboBox, dims.length);
			        	this.addIndexItems(this.mVXYDataSecondVariableDimensionYComboBox, dims.length);
			        	sxIndex = sInfo.getDimensionIndex(KEY_VXY_X_DIMENSION);
			        	if (!this.isValidDimensionIndex(sxIndex)) {
			        		if (this.isValidDimensionIndex(xIndex)) {
			        			final int len = xInfo.getDimensions()[xIndex];
			        			for (int ii = 0; ii < dims.length; ii++) {
			        				if (dims[ii] == len) {
			        					sxIndex = ii;
			        					break;
			        				}
			        			}
			        		}
//			        		if (!this.isValidDimensionIndex(sxIndex)) {
//				        		if (this.isValidDimensionIndex(fxIndex)) {
//				        			final int len = fInfo.getDimensions()[fxIndex];
//				        			for (int ii = 0; ii < dims.length; ii++) {
//				        				if (dims[ii] == len) {
//				        					sxIndex = ii;
//				        					break;
//				        				}
//				        			}
//				        		}
//			        		}
			        		if (!this.isValidDimensionIndex(sxIndex)) {
			        			sxIndex = 0;
			        		}
			        	}
			        	syIndex = sInfo.getDimensionIndex(KEY_VXY_Y_DIMENSION);
			        	if (!this.isValidDimensionIndex(syIndex)) {
			        		if (this.isValidDimensionIndex(yIndex)) {
			        			final int len = yInfo.getDimensions()[yIndex];
			        			for (int ii = 0; ii < dims.length; ii++) {
			        				if (dims[ii] == len) {
			        					if (this.isValidDimensionIndex(sxIndex) && ii == sxIndex) {
			        						continue;
			        					}
			        					syIndex = ii;
			        					break;
			        				}
			        			}
			        		}
//			        		if (!this.isValidDimensionIndex(syIndex)) {
//				        		if (this.isValidDimensionIndex(fyIndex)) {
//				        			final int len = fInfo.getDimensions()[fyIndex];
//				        			for (int ii = 0; ii < dims.length; ii++) {
//				        				if (dims[ii] == len) {
//				        					syIndex = ii;
//				        					break;
//				        				}
//				        			}
//				        		}
//			        		}
			        		if (!this.isValidDimensionIndex(syIndex)) {
			        			syIndex = 1;
			        		}
			        	}
				        if (this.isValidDimensionIndex(sxIndex)) {
			        		this.setSelectedItem(this.mVXYDataSecondVariableDimensionXComboBox, sxIndex.toString());
					        this.mDataColumnSelectionPanel.setDimensionIndex(sInfo.getName(),
					        		KEY_VXY_X_DIMENSION, sxIndex);
				        }
				        if (this.isValidDimensionIndex(syIndex)) {
			        		this.setSelectedItem(this.mVXYDataSecondVariableDimensionYComboBox, syIndex.toString());
					        this.mDataColumnSelectionPanel.setDimensionIndex(sInfo.getName(),
					        		KEY_VXY_Y_DIMENSION, syIndex);
				        }
		        	}
		        }
		        
		        this.onItemSelected(this.mVXYDataXVariableDimensionComboBox);
		        this.onItemSelected(this.mVXYDataYVariableDimensionComboBox);
		        this.onItemSelected(this.mVXYDataFirstVariableDimensionXComboBox);
		        this.onItemSelected(this.mVXYDataFirstVariableDimensionYComboBox);
		        this.onItemSelected(this.mVXYDataSecondVariableDimensionXComboBox);
		        this.onItemSelected(this.mVXYDataSecondVariableDimensionYComboBox);

				// updates the length
				boolean bx = false;
				boolean by = false;
				if (xInfo != null) {
					this.mVXYDataXStridePanel.setLength(xInfo.getGenericDimensionLength());
					bx = true;
				} else {
					if (fInfo != null && sInfo != null) {
						if (this.isValidDimensionIndex(fxIndex) && this.isValidDimensionIndex(sxIndex)) {
							final int[] fDims = fInfo.getDimensions();
							final int[] sDims = sInfo.getDimensions();
							this.mVXYDataXStridePanel.setLength(fDims[fxIndex]);
							this.mVXYDataXStridePanel.setLength(sDims[sxIndex]);
							bx = true;
						}
					}
				}
				if (yInfo != null) {
					this.mVXYDataYStridePanel.setLength(yInfo.getGenericDimensionLength());
					by = true;
				} else {
					if (fInfo != null && sInfo != null) {
						final int[] fDims = fInfo.getDimensions();
						final int[] sDims = sInfo.getDimensions();
						if (this.isValidDimensionIndex(fyIndex) && this.isValidDimensionIndex(syIndex)) {
							this.mVXYDataYStridePanel.setLength(fDims[fyIndex]);
							this.mVXYDataYStridePanel.setLength(sDims[syIndex]);
							by = true;
						}
					}
				}
				if (!bx) {
					this.mVXYDataXStridePanel.clearAll();
				}
				if (!by) {
					this.mVXYDataYStridePanel.clearAll();
				}

				this.mVXYDataIndexStridePanel.clearAll();

	        } else {
	        	// scatter plot
	    		this.mVXYGridComponentGroup.setEnabled(false);
	    		this.mVXYScatterComponentGroup.setEnabled(true);

		        Integer fIndex = null;
		        if (fInfo != null) {
		        	fIndex = fInfo.getGenericDimensionIndex();
		        }
		        Integer sIndex = null;
		        if (sInfo != null) {
		        	sIndex = sInfo.getGenericDimensionIndex();
		        }

	    		// add items to the combo box
		        if (fInfo != null) {
		        	int[] dims = fInfo.getDimensions();
		        	if (dims.length >= 1) {
			        	this.addIndexItems(this.mVXYDataFirstVariableDimensionIndexComboBox, dims.length);
			        	if (fIndex != null) {
				        	this.mVXYDataFirstVariableDimensionIndexComboBox.setSelectedItem(fIndex.toString());
			        	}
		        	}
		        }
		        if (sInfo != null) {
		        	int[] dims = sInfo.getDimensions();
		        	if (dims.length >= 1) {
			        	this.addIndexItems(this.mVXYDataSecondVariableDimensionIndexComboBox, dims.length);
			        	if (sIndex != null) {
				        	this.mVXYDataSecondVariableDimensionIndexComboBox.setSelectedItem(sIndex.toString());
			        	}
		        	}
		        }

				// updates the length
		        boolean b = false;
		        int xLen = -1;
		        int yLen = -1;
		        int fLen = -1;
		        int sLen = -1;
				if (this.isValidDimensionIndex(fIndex)) {
					final int[] dims = fInfo.getDimensions();
			        fLen = dims[fIndex];
				}
				if (this.isValidDimensionIndex(sIndex)) {
					final int[] dims = sInfo.getDimensions();
			        sLen = dims[sIndex];
				}
				if (xInfo != null) {
					xLen = xInfo.getGenericDimensionLength();
				}
				if (yInfo != null) {
					yLen = yInfo.getGenericDimensionLength();
				}
				if (xLen != -1 || yLen != -1 || fLen != -1 || sLen != -1) {
					int[] lenArray = { xLen, yLen, fLen, sLen };
					final Integer len = SGUtility.checkEquality(lenArray);
					b = (len != null);
				}
				if (!b) {
					this.mVXYDataIndexStridePanel.clearAll();
				} else {
					this.mVXYDataIndexStridePanel.setLength(fLen);
				}

		        this.onItemSelected(this.mVXYDataXVariableDimensionComboBox);
		        this.onItemSelected(this.mVXYDataYVariableDimensionComboBox);
		        this.onItemSelected(this.mVXYDataFirstVariableDimensionIndexComboBox);
		        this.onItemSelected(this.mVXYDataSecondVariableDimensionIndexComboBox);

		        // clears unused stride panels
				this.mVXYDataXStridePanel.clearAll();
				this.mVXYDataYStridePanel.clearAll();

	        }
		}

		// updates the combo box
        final int selectedRowIndex = this.mDataColumnSelectionPanel.getTable().getSelectedRow();
        if (selectedRowIndex != -1) {
            this.mDataColumnSelectionPanel.updateDimensionComboBox(selectedRowIndex);
        }

        // equalizes the time dimension
        this.equalizeTimeDimension(cols);
	}

    // equalizes the time dimension
	private void equalizeTimeDimension(SGDataColumnInfo[] cols) {

		final int fIndex = SGDataUtility.findFrequentTimeOrigin(cols);
		if (fIndex == -1) {
			return;
		}

		// sets the index
		for (int ii = 0; ii < cols.length; ii++) {
			SGMDArrayDataColumnInfo mdCol = (SGMDArrayDataColumnInfo) cols[ii];
			Integer index = mdCol.getTimeDimensionIndex();
			if (this.isValidDimensionIndex(index)) {
				this.mDataColumnSelectionPanel.setOrigin(ii, index, fIndex);
			}
		}

		// updates the origin panel
		this.updateOriginPanel();
	}

	private boolean mIgnoreComboBoxEventFlag = false;

	private void addIndexItems(JComboBox cb, final int len) {
		this.mIgnoreComboBoxEventFlag = true;
    	for (int ii = 0; ii < len; ii++) {
    		cb.addItem(Integer.toString(ii));
    	}
    	this.mIgnoreComboBoxEventFlag = false;
	}

	private void setSelectedItem(JComboBox cb, Object obj) {
		this.mIgnoreComboBoxEventFlag = true;
		cb.setSelectedItem(obj);
    	this.mIgnoreComboBoxEventFlag = false;
	}

	private void clearDimensionIndex(final String key) {
        for (int ii = 0; ii < this.mDataColumnSelectionPanel.getDataColumnNum(); ii++) {
	        this.mDataColumnSelectionPanel.clearDimensionIndex(ii, key);
        }
	}

	private void updateDimensionPanelsEnabled(final int dataColumnIndex) {
        List<String> disabledDimList = new ArrayList<String>();
        SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
        SGMDArrayDataColumnInfo info = (SGMDArrayDataColumnInfo) cols[dataColumnIndex];
        String columnType = info.getColumnType();
        if (SGDataUtility.isSXYTypeData(this.mDataType)) {
        	Integer generic = info.getDimensionIndex(SGIMDArrayConstants.KEY_GENERIC_DIMENSION);
        	if (generic != null) {
        		disabledDimList.add(generic.toString());
        	}
        	Integer pickUp = info.getDimensionIndex(SGIMDArrayConstants.KEY_SXY_PICKUP_DIMENSION);
        	if (pickUp != null) {
        		disabledDimList.add(pickUp.toString());
        	}
    	} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
            if (Z_VALUE.equals(columnType)) {
        		this.getDisabledDimensions(this.mSXYZDataZVariableDimensionXComboBox, disabledDimList);
        		this.getDisabledDimensions(this.mSXYZDataZVariableDimensionYComboBox, disabledDimList);
        		this.getDisabledDimensions(this.mSXYZDataZVariableDimensionIndexComboBox, disabledDimList);
            } else if (X_VALUE.equals(columnType)) {
        		this.getDisabledDimensions(this.mSXYZDataXVariableDimensionComboBox, disabledDimList);
            } else if (Y_VALUE.equals(columnType)) {
        		this.getDisabledDimensions(this.mSXYZDataYVariableDimensionComboBox, disabledDimList);
            }
        } else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
    		final String first = SGDataUtility.getVXYFirstComponentColumnType(this.mInfoMap);
    		final String second = SGDataUtility.getVXYSecondComponentColumnType(this.mInfoMap);
            if (first.equals(columnType)) {
        		this.getDisabledDimensions(this.mVXYDataFirstVariableDimensionXComboBox, disabledDimList);
        		this.getDisabledDimensions(this.mVXYDataFirstVariableDimensionYComboBox, disabledDimList);
            } else if (second.equals(columnType)) {
           		this.getDisabledDimensions(this.mVXYDataSecondVariableDimensionXComboBox, disabledDimList);
           		this.getDisabledDimensions(this.mVXYDataSecondVariableDimensionYComboBox, disabledDimList);
            } else if (X_COORDINATE.equals(columnType)) {
        		this.getDisabledDimensions(this.mVXYDataXVariableDimensionComboBox, disabledDimList);
            } else if (Y_COORDINATE.equals(columnType)) {
        		this.getDisabledDimensions(this.mVXYDataYVariableDimensionComboBox, disabledDimList);
            }
    	}

        // set enable or disable the components
    	this.updateDimensionPanelsEnabled(disabledDimList);
	}

	private void getDisabledDimensions(JComboBox cb, List<String> disabledDimList) {
		Object item = cb.getSelectedItem();
		if (item != null) {
			Integer num = SGUtilityText.getInteger(item.toString());
			if (num != null) {
				disabledDimList.add(num.toString());
			}
		}
	}

	private void updateDimensionPanelsEnabled(final List<String> disabledDimList) {
        // set enable or disable the components
		SGDimensionPanel[] coms = this.getDimensionPanels(this.mOriginPanel);
        for (int ii = 0; ii < coms.length; ii++) {
        	SGMDArrayDimensionPanel p = (SGMDArrayDimensionPanel) coms[ii];
            if (!p.isVisible()) {
            	continue;
            }
            String vName = p.getDimensionName();
            final boolean enabled = !disabledDimList.contains(vName);
            p.setComponentsEnabled(enabled);
        }
	}

    /**
     * Set information of data columns.
     *
     * @param data
     *            multidimensional data
     * @param colInfoSet
     *            data columns
     * @param infoMap
     *            a map of information
     * @param showDefault
     *            a flag whether to show default column type
     * @return true if succeeded
     */
    public boolean setData(SGMDArrayData data,
            SGDataColumnInfoSet colInfoSet,
            Map<String, Object> infoMap, final boolean showDefault) {
        if (this.setData((SGMDArrayFile) data.getDataSource(), data.getDataType(), colInfoSet,
        		infoMap, showDefault) == false) {
            return false;
        }
        return true;
    }

    /**
     * Sets the multidimensional data.
     *
     * @param mdFile
     *           the multidimensional data file
     * @param dataType
     *            type of data
     * @param colInfoSet
     *            data columns
     * @param infoMap
     *            a map of information
     * @param showDefault
     *            a flag whether to show default column type
     * @return true if succeeded
     */
    public boolean setData(final SGMDArrayFile mdFile, final String dataType,
            final SGDataColumnInfoSet colInfoSet,
            final Map<String, Object> infoMap, final boolean showDefault) {

        // check input values
        if (mdFile == null || dataType == null || colInfoSet == null
                || infoMap == null) {
            throw new IllegalArgumentException(
                    "mdFile == null || dataType == null || colInfoSet == null || infoMap == null");
        }

        this.mTemporaryColumnInfo.clearColumnInfo();

        // put the netCDF data into a map
        infoMap.put(SGIDataInformationKeyConstants.KEY_DATA_SOURCE, mdFile);

        // clear all
        this.clear();

        // set to the attribute
        this.mMDFile = mdFile;
        this.mDataType = dataType;
        this.mInfoMap = new HashMap<String, Object>(infoMap);
        this.mInfoMap.put(SGIDataInformationKeyConstants.KEY_DATA_TYPE, dataType);

        // get variables
        final SGMDArrayVariable[] vars = mdFile.getVariables();

        // setup the table
        if (this.mDataColumnSelectionPanel.setData(dataType, colInfoSet, infoMap,
                showDefault) == false) {
            return false;
        }

        // set global attributes
        this.mGlobalAttributePanel.setAttributes(mdFile.getAttributes());

        // add or remove the panel for each data type
        final boolean isSXY = SGDataUtility.isSXYTypeData(dataType);
        JPanel stridePanel = null;
        JPanel dimensionPanel = null;
        if (isSXY) {
        	stridePanel = this.mSXYDataStridePanel;
        } else if (SGDataUtility.isVXYTypeData(dataType)) {
        	stridePanel = this.mVXYDataStridePanel;
        	dimensionPanel = this.mVXYDataDimensionPanel;
        } else if (SGDataUtility.isSXYZTypeData(dataType)) {
        	stridePanel = this.mSXYZDataStridePanel;
        	dimensionPanel = this.mSXYZDataDimensionPanel;
        }
        this.mStrideContainerPanel.removeAll();
    	this.mStrideContainerPanel.add(stridePanel);
    	this.mDimensionTabPanel.removeAll();
    	if (dimensionPanel != null) {
        	this.mDimensionTabPanel.add(dimensionPanel, java.awt.BorderLayout.NORTH);
    	}

        final int dimensionTabIndex = this.mTabbedPane.indexOfComponent(this.mDimensionTabPanel);
        final boolean dimensionTabEnabled = !isSXY;
        this.mTabbedPane.setEnabledAt(dimensionTabIndex, dimensionTabEnabled);
    	if (!dimensionTabEnabled) {
        	if (this.mTabbedPane.getSelectedIndex() == dimensionTabIndex) {
        		this.mTabbedPane.setSelectedComponent(this.mOriginTabPanel);
        	}
    	}

        final int pickUpTabIndex = this.mTabbedPane.indexOfComponent(this.mPickUpTabPanel);
        final boolean pickUpTabEnabled = isSXY;
        this.mTabbedPane.setEnabledAt(pickUpTabIndex, pickUpTabEnabled);
    	if (!pickUpTabEnabled) {
        	if (this.mTabbedPane.getSelectedIndex() == pickUpTabIndex) {
        		this.mTabbedPane.setSelectedComponent(this.mOriginTabPanel);
        	}
    	}

        // add panels for dimensions
        int max = 0;
        for (SGMDArrayVariable var : vars) {
        	final int[] dims = var.getDimensions();
        	if (max < dims.length) {
        		max = dims.length;
        	}
        }
        for (int ii = 0; ii < max; ii++) {
        	SGMDArrayDimensionPanel p = new SGMDArrayDimensionPanel();
        	this.mOriginPanel.add(p);
    		p.addSliderChangeListener(this);
        	p.setVisible(false);
    		JSeparator sp = new JSeparator();
    		sp.setVisible(false);
    		this.mOriginPanel.add(sp);
        }

        // set to the attribute
        SGDataColumnInfo[] cols = colInfoSet.getDataColumnInfoArray();
        for (int ii = 0; ii < cols.length; ii++) {
        	SGMDArrayDataColumnInfo mdCol = (SGMDArrayDataColumnInfo) cols[ii];
        	final String name = mdCol.getName();
        	int[] origins = mdCol.getOrigins();
        	this.mOriginMap.put(name, origins.clone());
        }

        if (SGDataUtility.isSXYTypeData(dataType)) {
			initPickUpStridePanel(infoMap);
        } else if (SGDataUtility.isVXYTypeData(dataType)) {
            // sets the title of panels
        	Boolean polar = (Boolean) infoMap.get(SGIDataInformationKeyConstants.KEY_VXY_POLAR_SELECTED);
        	if (polar == null) {
        		return false;
        	}
        	final String first = SGDataUtility.getVXYFirstComponentColumnType(infoMap);
        	final String second = SGDataUtility.getVXYSecondComponentColumnType(infoMap);
    		TitledBorder firstBorder = (TitledBorder) this.mVXYDataFirstVariablePanel.getBorder();
    		TitledBorder secondBorder = (TitledBorder) this.mVXYDataSecondVariablePanel.getBorder();
    		firstBorder.setTitle(first);
    		secondBorder.setTitle(second);
        }

        // get from data
        if (SGDataUtility.isMDArrayData(dataType)) {
        	if (SGDataUtility.isSXYZTypeData(dataType)) {
            	Boolean gridPlot = SGDataUtility.isGridPlot(dataType, infoMap);
            	if (gridPlot == null) {
            		return false;
            	}
                this.setSXYZGridPlotSelected(gridPlot);
        	} else if (SGDataUtility.isVXYTypeData(dataType)) {
            	Boolean gridPlot = SGDataUtility.isGridPlot(dataType, infoMap);
            	if (gridPlot == null) {
            		return false;
            	}
                this.setVXYGridPlotSelected(gridPlot);
        	}
        }
        
        // update the components
        this.updateComponentsWithTable();

        // initializes stride components
        final Boolean strideAvailable = (Boolean) infoMap.get(
        		SGIDataInformationKeyConstants.KEY_STRIDE_AVAILABLE);
        final boolean b;
        if (strideAvailable != null) {
        	b = strideAvailable.booleanValue();
        } else {
        	b = false;
        }
        this.mStrideAvailableCheckBox.setSelected(b);
        this.mStrideComponentGroup.setEnabled(b);

    	// updates the dimension panels
        SwingUtilities.invokeLater(new Runnable() {
        	public void run() {
                updateOriginPanel();
        	}
        });

        // sets attributes
        SwingUtilities.invokeLater(new Runnable() {
        	public void run() {
        		updateAttributePanel();
        	};
        });

        // initializes the stride
        SwingUtilities.invokeLater(new Runnable() {
        	public void run() {
        		initStride();
        	};
        });

        return true;
    }

    private void initPickUpStridePanel(final Map<String, Object> infoMap) {
		// clear indices
		this.mSXYDataPickUpDimensionIndexPanel.clearAll();

		SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
		@SuppressWarnings("unchecked")
		Map<String, Integer> dimensionIndexMap = (Map<String, Integer>) infoMap.get(
				SGIDataInformationKeyConstants.KEY_SXY_MDARRAY_PICKUP_DIMENSION_INDEX_MAP);
        if (dimensionIndexMap != null) {
        	this.mSXYDataPickUpDimensionIndexPanel.setEnabled(true);
        	SGIntegerSeriesSet indices = (SGIntegerSeriesSet) infoMap.get(
        			SGIDataInformationKeyConstants.KEY_SXY_PICKUP_INDICES);
        	List<String> pickUpDimensionList = new ArrayList<String>();
        	Set<Entry<String, Integer>> dimensionIndexEntrySet = dimensionIndexMap.entrySet();
        	Iterator<Entry<String, Integer>> dimensionIndexEntryIterator = dimensionIndexEntrySet.iterator();
        	while (dimensionIndexEntryIterator.hasNext()) {
        		Entry<String, Integer> entry = dimensionIndexEntryIterator.next();
        		Integer index = entry.getValue();
        		if (this.isValidDimensionIndex(index)) {
        			String name = entry.getKey();
        			SGMDArrayDataColumnInfo mdCol = (SGMDArrayDataColumnInfo) SGDataUtility.findColumnWithName(
        					cols, name);
        			String columnType = mdCol.getColumnType();
        			if (X_VALUE.equals(columnType) || Y_VALUE.equals(columnType)) {
            			pickUpDimensionList.add(name);
        			}
        		}
        	}
        	if (pickUpDimensionList.size() != 1) {
        		return;
        	}
        	String pickUpDimension = pickUpDimensionList.get(0);
        	SGMDArrayDataColumnInfo pickUpCol = (SGMDArrayDataColumnInfo) SGDataUtility.findColumnWithName(cols, pickUpDimension);
        	int[] dims = pickUpCol.getDimensions();
        	Integer dimIndex = pickUpCol.getDimensionIndex(KEY_SXY_PICKUP_DIMENSION);
        	final int len = dims[dimIndex];
        	this.mSXYDataPickUpDimensionIndexPanel.setLength(len);
        	if (indices != null) {
            	indices.addAlias(len - 1, SGIntegerSeries.ARRAY_INDEX_END);
	        	this.mSXYDataPickUpDimensionIndexPanel.setIndices(indices);
        	} else {
        		SGIntegerSeries series = SGDataUtility.createDefaultStepSeries(len);
	        	this.mSXYDataPickUpDimensionIndexPanel.setIndices(series);
        	}
        } else {
        	this.mSXYDataPickUpDimensionIndexPanel.clearAll();
        	this.mSXYDataPickUpDimensionIndexPanel.setEnabled(false);
        }
    }

    /**
     * Returns whether stride of data arrays is available.
     *
     * @return true if stride of data arrays is available
     */
    public boolean isStrideAvailable() {
    	return this.mStrideAvailableCheckBox.isSelected();
    }

    /**
     * Called whenever the value of the selection changes.
     * This method is overrode for the selection of table rows.
     *
     * @param e the event that characterizes the change.
     */
	@Override
	public void valueChanged(ListSelectionEvent e) {
		if (e.getValueIsAdjusting()) {
			return;
		}
		this.updateOriginPanel();

		// updates the attributes
		this.updateAttributePanel();
	}

	// Updates the origin panels.
	private void updateOriginPanel() {
		JTable table = this.getTable();
		final int cnt = table.getSelectedRowCount();
		String varName;
		if (cnt == 1) {
			SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
			final int row = table.getSelectedRow();
			SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) cols[row];
			final int[] dims = mdInfo.getDimensions();
			final int[] origins = mdInfo.getOrigins();
	        Component[] coms = this.mOriginPanel.getComponents();
	        int dimCnt = 0;
	        for (int ii = 0; ii < coms.length; ii++) {
				// sets the visibility
	            final boolean visible = (dimCnt < dims.length);
	            coms[ii].setVisible(visible);
	            if (!visible) {
	            	continue;
	            }
	        	if (coms[ii] instanceof SGMDArrayDimensionPanel) {
	        		SGMDArrayDimensionPanel p = (SGMDArrayDimensionPanel) coms[ii];

			        // sets the parameters
					final double[] values = new double[dims[dimCnt]];
					for (int jj = 0; jj < values.length; jj++) {
						values[jj] = (double) jj;
					}
					p.setDimensionName(Integer.toString(dimCnt));
		            p.setValues(values, origins[dimCnt]);

		            dimCnt++;
	        	}
			}
	        varName = mdInfo.getName();
	        this.mOriginNameTextField.setText(varName);
	        this.mOriginNameTextField.setToolTipText(varName);

	        // updates dimension panels
	        this.updateDimensionPanelsEnabled(row);

		} else {
			// Note: This cannot happen.
	        Component[] coms = this.mOriginPanel.getComponents();
	        for (int ii = 0; ii < coms.length; ii++) {
	            coms[ii].setVisible(false);
	        }
		}
	}

	/**
	 * Invoked when the value of the slider is changed.
	 *
	 * @param p
	 *          a dimension panel that has the slider
	 */
	@Override
	public void changed(SGSliderPanel p) {
		// gets selected row index
		final int row = this.getTable().getSelectedRow();
		if (row == -1) {
			return;
		}
		
		// gets the current name
		SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
		SGDataColumnInfo curCol = cols[row];
		String name = curCol.getName();
		
		// if the current name if different from the name in the origin panel,
		// do nothing and returns
		String originPanelName = this.mOriginNameTextField.getText();
		if (!SGUtility.equals(originPanelName, name)) {
			return;
		}

		// sets the origin
		final int origin = p.getCurrentIndex();
		SGDimensionPanel[] pArray = this.getDimensionPanels(this.mOriginPanel);
		for (int ii = 0; ii < pArray.length; ii++) {
			SGSliderPanel sPanel = pArray[ii].getSliderPanel();
			if (sPanel.equals(p)) {
				this.mDataColumnSelectionPanel.setOrigin(name, ii, origin);
				return;
			}
		}
	}

    /**
     * Returns the indices for picked up dimension of scalar XY data.
     *
     * @return the indices for picked up dimension of scalar XY data
     */
	@Override
	public SGIntegerSeriesSet getSXYPickUpIndices() {
		return this.mSXYDataPickUpDimensionIndexPanel.getIndices();
	}

	/**
	 * Adds a document listener to the components.
	 *
	 * @param l
	 *          a document listener
	 */
	@Override
	public void addDocumentListener(DocumentListener l) {
		this.mSXYDataPickUpDimensionIndexPanel.addDocumentListener(l);
		this.mSXYDataLineAndBarStridePanel.addDocumentListener(l);
		this.mSXYDataTickLabelStridePanel.addDocumentListener(l);
		this.mSXYZDataXStridePanel.addDocumentListener(l);
		this.mSXYZDataYStridePanel.addDocumentListener(l);
		this.mSXYZDataIndexStridePanel.addDocumentListener(l);
		this.mVXYDataXStridePanel.addDocumentListener(l);
		this.mVXYDataYStridePanel.addDocumentListener(l);
		this.mVXYDataIndexStridePanel.addDocumentListener(l);
	}

    /**
     * Invoked when an item has been selected or deselected by the user.
     *
     * @param e
     *          the item event
     */
	@Override
	public void itemStateChanged(final ItemEvent e) {
		final Object source = e.getSource();
		final int stateChange = e.getStateChange();
		final Object item = e.getItem();
		if (source instanceof JComboBox && stateChange == ItemEvent.SELECTED) {
			JComboBox cb = (JComboBox) source;
			this.onItemSelected(cb, item);
		}
	}

	private void onItemSelected(final JComboBox source) {
        this.onItemSelected(source, source.getSelectedItem());
	}

	private void onItemSelected(final JComboBox source, final Object item) {
		if (this.mIgnoreComboBoxEventFlag) {
			return;
		}
		if (item == null) {
			return;
		}
		
		if (SGDataUtility.isSXYZTypeData(this.mDataType)) {

			String columnType = null;
			String key = null;
			if (source.equals(this.mSXYZDataZVariableDimensionXComboBox)) {
				columnType = Z_VALUE;
				key = KEY_SXYZ_X_DIMENSION;
			} else if (source.equals(this.mSXYZDataZVariableDimensionYComboBox)) {
				columnType = Z_VALUE;
				key = KEY_SXYZ_Y_DIMENSION;
			} else if (source.equals(this.mSXYZDataZVariableDimensionIndexComboBox)) {
				columnType = Z_VALUE;
				key = KEY_GENERIC_DIMENSION;
			} else if (source.equals(this.mSXYZDataXVariableDimensionComboBox)) {
				columnType = X_VALUE;
				key = SGMDArrayVariable.KEY_GENERIC_DIMENSION;
			} else if (source.equals(this.mSXYZDataYVariableDimensionComboBox)) {
				columnType = Y_VALUE;
				key = SGMDArrayVariable.KEY_GENERIC_DIMENSION;
			} else {
				return;
			}
			this.itemStateChangedSub(columnType, item, key, true);

	        // updates index panel
	        SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
	        List<SGDataColumnInfo> xColList = this.findColumnsWithColumnType(cols, X_VALUE);
	        List<SGDataColumnInfo> yColList = this.findColumnsWithColumnType(cols, Y_VALUE);
	        List<SGDataColumnInfo> zColList = this.findColumnsWithColumnType(cols, Z_VALUE);
			SGMDArrayDataColumnInfo xInfo = null;
			SGMDArrayDataColumnInfo yInfo = null;
			SGMDArrayDataColumnInfo zInfo = null;
	        if (xColList.size() == 1) {
	        	xInfo = (SGMDArrayDataColumnInfo) xColList.get(0);
	        }
	        if (yColList.size() == 1) {
	        	yInfo = (SGMDArrayDataColumnInfo) yColList.get(0);
	        }
	        if (zColList.size() == 1) {
	        	zInfo = (SGMDArrayDataColumnInfo) zColList.get(0);
	        }

	        if (this.isSXYZGridPlotSelected()) {
	        	// grid plot
	        	
		        if (xInfo != null) {
		        	this.updateIndexPanel(cols, xColList, this.mSXYZDataXStridePanel,
		        			SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X);
		        } else {
		        	if (zInfo != null) {
			        	this.updateIndexPanel(cols, zInfo, this.mSXYZDataXStridePanel,
			        			SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X,
			        			SGIMDArrayConstants.KEY_SXYZ_X_DIMENSION);
		        	}
		        }
		        if (yInfo != null) {
		        	this.updateIndexPanel(cols, yColList, this.mSXYZDataYStridePanel,
		        			SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y);
		        } else {
		        	if (zInfo != null) {
			        	this.updateIndexPanel(cols, zInfo, this.mSXYZDataYStridePanel,
			        			SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y,
			        			SGIMDArrayConstants.KEY_SXYZ_Y_DIMENSION);
		        	}
		        }

				// updates the length
				if (xInfo != null) {
					this.mSXYZDataXStridePanel.setLength(xInfo.getGenericDimensionLength());
				}
				if (yInfo != null) {
					this.mSXYZDataYStridePanel.setLength(yInfo.getGenericDimensionLength());
				}
				if (xInfo == null && yInfo == null && zInfo != null) {
					final int[] dims = zInfo.getDimensions();
					Integer xIndex = zInfo.getDimensionIndex(KEY_SXYZ_X_DIMENSION);
					if (this.isValidDimensionIndex(xIndex)) {
						this.mSXYZDataXStridePanel.setLength(dims[xIndex]);
					}
					Integer yIndex = zInfo.getDimensionIndex(KEY_SXYZ_Y_DIMENSION);
					if (this.isValidDimensionIndex(yIndex)) {
						this.mSXYZDataYStridePanel.setLength(dims[yIndex]);
					}
				}
	        	
	        } else {
	        	// scatter plot
	        	
		        if (xInfo != null && yInfo != null && zInfo != null) {
		        	final int xLen = xInfo.getGenericDimensionLength();
		        	final int yLen = yInfo.getGenericDimensionLength();
		        	final int zLen = zInfo.getGenericDimensionLength();
		        	int[] lenArray = { xLen, yLen, zLen };
		        	if (SGUtility.checkEquality(lenArray) != null) {
			        	this.updateIndexPanel(cols, zColList, this.mSXYZDataIndexStridePanel,
			        			SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE);
			        	
						// updates the length
						this.mSXYZDataIndexStridePanel.setLength(zInfo.getGenericDimensionLength());
		        	}
		        }
	        }
	        
		} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
			final String first = SGDataUtility.getVXYFirstComponentColumnType(this.mInfoMap);
			final String second = SGDataUtility.getVXYSecondComponentColumnType(this.mInfoMap);
			String columnType = null;
			String key = null;
			if (source.equals(this.mVXYDataFirstVariableDimensionXComboBox)) {
				columnType = first;
				key = KEY_VXY_X_DIMENSION;
			} else if (source.equals(this.mVXYDataFirstVariableDimensionYComboBox)) {
				columnType = first;
				key = KEY_VXY_Y_DIMENSION;
			} else if (source.equals(this.mVXYDataFirstVariableDimensionIndexComboBox)) {
				columnType = first;
				key = KEY_GENERIC_DIMENSION;
			} else if (source.equals(this.mVXYDataSecondVariableDimensionXComboBox)) {
				columnType = second;
				key = KEY_VXY_X_DIMENSION;
			} else if (source.equals(this.mVXYDataSecondVariableDimensionYComboBox)) {
				columnType = second;
				key = KEY_VXY_Y_DIMENSION;
			} else if (source.equals(this.mVXYDataSecondVariableDimensionIndexComboBox)) {
				columnType = second;
				key = KEY_GENERIC_DIMENSION;
			} else if (source.equals(this.mVXYDataXVariableDimensionComboBox)) {
				columnType = X_COORDINATE;
				key = SGMDArrayVariable.KEY_GENERIC_DIMENSION;
			} else if (source.equals(this.mVXYDataYVariableDimensionComboBox)) {
				columnType = Y_COORDINATE;
				key = SGMDArrayVariable.KEY_GENERIC_DIMENSION;
			} else {
				return;
			}
			this.itemStateChangedSub(columnType, item, key, true);

	        SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
	        List<SGDataColumnInfo> xColList = this.findColumnsWithColumnType(cols, X_COORDINATE);
	        List<SGDataColumnInfo> yColList = this.findColumnsWithColumnType(cols, Y_COORDINATE);
	        List<SGDataColumnInfo> fColList = this.findColumnsWithColumnType(cols, first);
	        List<SGDataColumnInfo> sColList = this.findColumnsWithColumnType(cols, second);
			SGMDArrayDataColumnInfo xInfo = null;
			SGMDArrayDataColumnInfo yInfo = null;
			SGMDArrayDataColumnInfo fInfo = null;
			SGMDArrayDataColumnInfo sInfo = null;
	        if (xColList.size() == 1) {
	        	xInfo = (SGMDArrayDataColumnInfo) xColList.get(0);
	        }
	        if (yColList.size() == 1) {
	        	yInfo = (SGMDArrayDataColumnInfo) yColList.get(0);
	        }
	        if (fColList.size() == 1) {
	        	fInfo = (SGMDArrayDataColumnInfo) fColList.get(0);
	        }
	        if (sColList.size() == 1) {
	        	sInfo = (SGMDArrayDataColumnInfo) sColList.get(0);
	        }

	        if (this.isVXYGridPlotSelected()) {
	        	// grid plot
	        	
		        // updates index panel
		        if (xInfo != null) {
		        	this.updateIndexPanel(cols, xColList, this.mVXYDataXStridePanel,
		        			SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X);
		        } else {
		        	if (fInfo != null && sInfo != null) {
			        	this.updateIndexPanel(cols, new SGDataColumnInfo[] { fInfo, sInfo },
			        			this.mVXYDataXStridePanel,
			        			SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X,
			        			SGIMDArrayConstants.KEY_VXY_X_DIMENSION);
		        	}
		        }
		        if (yInfo != null) {
		        	this.updateIndexPanel(cols, yColList, this.mVXYDataYStridePanel,
		        			SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y);
		        } else {
		        	if (fInfo != null && sInfo != null) {
			        	this.updateIndexPanel(cols, new SGDataColumnInfo[] { fInfo, sInfo },
			        			this.mVXYDataYStridePanel,
			        			SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y,
			        			SGIMDArrayConstants.KEY_VXY_Y_DIMENSION);
		        	}
		        }

				// updates the length
				if (xInfo != null) {
					this.mVXYDataXStridePanel.setLength(xInfo.getGenericDimensionLength());
				}
				if (yInfo != null) {
					this.mVXYDataYStridePanel.setLength(yInfo.getGenericDimensionLength());
				}
				if (xInfo == null && yInfo == null) {
					if (fInfo != null && sInfo != null) {
						this.setupVXYStrideLength(fInfo, sInfo, KEY_VXY_X_DIMENSION, this.mVXYDataXStridePanel);
						this.setupVXYStrideLength(fInfo, sInfo, KEY_VXY_Y_DIMENSION, this.mVXYDataYStridePanel);
					} else {
						SGMDArrayDataColumnInfo info = null;
						if (fInfo != null) {
							info = fInfo;
						} else if (sInfo != null) {
							info = sInfo;
						}
						if (info != null) {
							final int[] dims = info.getDimensions();
							Integer xIndex = info.getDimensionIndex(KEY_VXY_X_DIMENSION);
							if (this.isValidDimensionIndex(xIndex)) {
								this.mVXYDataXStridePanel.setLength(dims[xIndex]);
							}
							Integer yIndex = info.getDimensionIndex(KEY_VXY_Y_DIMENSION);
							if (this.isValidDimensionIndex(yIndex)) {
								this.mVXYDataYStridePanel.setLength(dims[yIndex]);
							}
						}
					}
				}
	        	
	        } else {
	        	// scatter plot
		        if (xInfo != null && yInfo != null && fInfo != null && sInfo != null) {
		        	final int xLen = xInfo.getGenericDimensionLength();
		        	final int yLen = yInfo.getGenericDimensionLength();
		        	final int fLen = fInfo.getGenericDimensionLength();
		        	final int sLen = sInfo.getGenericDimensionLength();
		        	int[] lenArray = { xLen, yLen, fLen, sLen };
		        	if (SGUtility.checkEquality(lenArray) != null) {
			        	this.updateIndexPanel(cols, fColList, this.mVXYDataIndexStridePanel,
			        			SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE);
			        	
						// updates the length
						this.mVXYDataIndexStridePanel.setLength(fInfo.getGenericDimensionLength());
		        	}
		        }
	        }

		}
	}

	private void setupVXYStrideLength(SGMDArrayDataColumnInfo fInfo, SGMDArrayDataColumnInfo sInfo,
			String key, SGIndexPanel p) {
		final int[] fDims = fInfo.getDimensions();
		final int[] sDims = sInfo.getDimensions();
		Integer fIndex = fInfo.getDimensionIndex(key);
		Integer sIndex = sInfo.getDimensionIndex(key);
		final boolean fValid = this.isValidDimensionIndex(fIndex);
		final boolean sValid = this.isValidDimensionIndex(sIndex);
		if (fValid && sValid) {
			if (fDims[fIndex] == sDims[sIndex]) {
				p.setLength(fDims[fIndex]);
			}
		} else {
			if (fValid) {
				p.setLength(fDims[fIndex]);
			} else if (sValid) {
				p.setLength(sDims[sIndex]);
			}
		}
	}

	private boolean updateIndexPanel(SGDataColumnInfo[] cols, List<SGDataColumnInfo> colList,
			SGIndexPanel indexPanel, String key) {
        int dimLen = -1;
        boolean dimLenValid = true;
        for (SGDataColumnInfo info : colList) {
        	SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) info;
        	final int len = mdInfo.getGenericDimensionLength();
        	if (dimLen == -1) {
        		dimLen = len;
        	} else {
        		if (len != dimLen) {
        			dimLenValid = false;
        			break;
        		}
        	}
        }
        if (dimLen != -1 && dimLenValid) {
        	final int lenOld = indexPanel.getLength();
        	indexPanel.setLength(dimLen);
        	if (lenOld != dimLen) {
        		Map<String, Object> infoMap = new HashMap<String, Object>(this.mInfoMap);
        		infoMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_GRID_PLOT_FLAG, 
        				this.isSXYZGridPlotSelected());
        		infoMap.put(SGIDataInformationKeyConstants.KEY_VXY_GRID_PLOT_FLAG, 
        				this.isVXYGridPlotSelected());
        		Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility.calcMDArrayDefaultStride(
        				cols, infoMap);
        		if (strideMap == null) {
        			return false;
        		}
        		SGIntegerSeriesSet indices = strideMap.get(key);
	        	indexPanel.setIndices(indices);
        	}
        } else {
        	return false;
        }
        return true;
	}

	private boolean updateIndexPanel(SGDataColumnInfo[] cols, SGDataColumnInfo valueCol,
			SGIndexPanel indexPanel, String key, String dimKey) {
		return this.updateIndexPanel(cols, new SGDataColumnInfo[] { valueCol }, indexPanel, key, dimKey);
	}

	private boolean updateIndexPanel(SGDataColumnInfo[] cols, SGDataColumnInfo[] valueCols,
			SGIndexPanel indexPanel, String key, String dimKey) {
		int dimLen = -1;
		for (SGDataColumnInfo col : valueCols) {
	    	SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) col;
	    	Integer dimIndex = mdInfo.getDimensionIndex(dimKey);
	    	if (dimIndex == null) {
	    		return false;
	    	}
	    	if (dimIndex == -1) {
	    		return false;
	    	}
	    	int[] dims = mdInfo.getDimensions();
	    	final int len = dims[dimIndex.intValue()];
	    	if (dimLen == -1) {
	    		dimLen = len;
	    	} else {
	    		if (dimLen != len) {
	    			return false;
	    		}
	    	}
		}
		if (dimLen == -1) {
			return false;
		}

    	final int lenOld = indexPanel.getLength();
    	indexPanel.setLength(dimLen);
    	if (lenOld != dimLen) {
    		Map<String, Object> infoMap = new HashMap<String, Object>(this.mInfoMap);
    		infoMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_GRID_PLOT_FLAG, 
    				this.isSXYZGridPlotSelected());
    		infoMap.put(SGIDataInformationKeyConstants.KEY_VXY_GRID_PLOT_FLAG, 
    				this.isVXYGridPlotSelected());
    		Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility.calcMDArrayDefaultStride(
    				cols, infoMap);
    		if (strideMap == null) {
    			return false;
    		}
    		SGIntegerSeriesSet indices = strideMap.get(key);
        	indexPanel.setIndices(indices);
    	}

    	return true;
	}

	private void itemStateChangedSub(String columnType, Object item, String key, final boolean equals) {
		SGDataColumnInfo[] columns = this.mDataColumnSelectionPanel.getDataColumnInfoArray();
		SGMDArrayDataColumnInfo col = null;
		int cnt = 0;
		for (int ii = 0; ii < columns.length; ii++) {
			if (equals) {
				if (columns[ii].getColumnType().equals(columnType)) {
					col = (SGMDArrayDataColumnInfo) columns[ii];
					cnt++;
				}
			} else {
				if (columns[ii].getColumnType().startsWith(columnType)) {
					col = (SGMDArrayDataColumnInfo) columns[ii];
					cnt++;
				}
			}
		}
		if (cnt != 1) {
			return;
		}
		this.itemStateChangedSub2(col, item, key);
	}

	private void itemStateChangedSub2(SGDataColumnInfo col, Object item, String key) {
		Integer num = SGUtilityText.getInteger(item.toString());
		this.mDataColumnSelectionPanel.setDimensionIndex(col.getName(), key, num);

		// updates dimension panel
		final int rowIndex = this.getTable().getSelectedRow();
		if (rowIndex != -1) {
			this.updateDimensionPanelsEnabled(rowIndex);

			// updates the combo box
			this.mDataColumnSelectionPanel.updateDimensionComboBox(rowIndex);
		}
	}

    /**
     * Adds an item listener.
     *
     * @param l
     *          an item listener
     */
	@Override
	public void addItemListener(ItemListener l) {
		// SXYZ
		this.mSXYZDataZVariableDimensionXComboBox.addItemListener(l);
		this.mSXYZDataZVariableDimensionYComboBox.addItemListener(l);
		this.mSXYZDataZVariableDimensionIndexComboBox.addItemListener(l);
		this.mSXYZDataXVariableDimensionComboBox.addItemListener(l);
		this.mSXYZDataYVariableDimensionComboBox.addItemListener(l);

		// VXY
		this.mVXYDataFirstVariableDimensionXComboBox.addItemListener(l);
		this.mVXYDataFirstVariableDimensionYComboBox.addItemListener(l);
		this.mVXYDataFirstVariableDimensionIndexComboBox.addItemListener(l);
		this.mVXYDataSecondVariableDimensionXComboBox.addItemListener(l);
		this.mVXYDataSecondVariableDimensionYComboBox.addItemListener(l);
		this.mVXYDataSecondVariableDimensionIndexComboBox.addItemListener(l);
		this.mVXYDataXVariableDimensionComboBox.addItemListener(l);
		this.mVXYDataYVariableDimensionComboBox.addItemListener(l);
	}

	@Override
	public Boolean isVariableDataType() {
		return !this.isPickUpAvailable();
	}

	private boolean isPickUpAvailable() {
		return (this.findValidPickUpXYColumns() != null);
	}

	public List<String> getSXYDataPickUpDatasetName() {
		List<SGMDArrayDataColumnInfo> pickUpColList = this.findValidPickUpXYColumns();
		if (pickUpColList == null) {
			return null;
		} else {
			List<String> nameList = new ArrayList<String>();
			for (SGMDArrayDataColumnInfo mdCol : pickUpColList) {
				nameList.add(mdCol.getName());
			}
			return nameList;
		}
	}

	public Map<String, Integer> getSXYDataPickUpDimensionIndexMap() {
		Map<String, Integer> map = new HashMap<String, Integer>();
		SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
		for (int ii = 0; ii < cols.length; ii++) {
			SGMDArrayDataColumnInfo mdCol = (SGMDArrayDataColumnInfo) cols[ii];
			String name = mdCol.getName();
			Integer index = mdCol.getDimensionIndex(SGIMDArrayConstants.KEY_SXY_PICKUP_DIMENSION);
			map.put(name, index);
		}
		return map;
	}

	public Map<String, Integer> getTimeDimensionIndexMap() {
		Map<String, Integer> map = new HashMap<String, Integer>();
		SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
		for (int ii = 0; ii < cols.length; ii++) {
			SGMDArrayDataColumnInfo mdCol = (SGMDArrayDataColumnInfo) cols[ii];
			String name = mdCol.getName();
			Integer index = mdCol.getDimensionIndex(SGIMDArrayConstants.KEY_TIME_DIMENSION);
			map.put(name, index);
		}
		return map;
	}

	private List<SGMDArrayDataColumnInfo> findValidPickUpXYColumns() {
		SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
		return SGDataUtility.findValidPickUpXYColumns(cols);
	}

	// Updates the panel showing attributes.
	private void updateAttributePanel() {
		JTable table = this.getTable();
		final int cnt = table.getSelectedRowCount();
		if (cnt == 1) {
			final int row = table.getSelectedRow();
			SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
			SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) cols[row];
	        List<SGAttribute> attrList = mdInfo.getAttributes();
	        this.mAttributePanel.setAttributes(attrList);
	        String name = mdInfo.getName();
	        this.mAttributeNameTextField.setText(name);
	        this.mAttributeNameTextField.setToolTipText(name);
		}
	}

	private void initStride() {
		SGDataColumnInfo[] cols = this.getDataColumnInfoArray();
		Map<String, SGMDArrayDimensionInfo> dimNameMap = new HashMap<String, SGMDArrayDimensionInfo>();
		final boolean strideAvailable = this.isStrideAvailable();

		if (SGDataUtility.isSXYTypeData(this.mDataType)) {
			SGIntegerSeriesSet stride = (SGIntegerSeriesSet) this.mInfoMap
					.get(SGIDataInformationKeyConstants.KEY_SXY_STRIDE);
			final int len;
			if (stride == null) {
				Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility
						.calcMDArrayDefaultStride(cols, this.mInfoMap, dimNameMap);
				SGMDArrayDimensionInfo dimInfo = dimNameMap
						.get(SGIDataInformationKeyConstants.KEY_SXY_STRIDE);
				String name = dimInfo.getName();
				final int dimIndex = dimInfo.getIndex();
				SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) this.findColumnWithName(
						cols, name);
				len = mdInfo.getDimensions()[dimIndex];
				if (strideAvailable) {
					stride = strideMap.get(SGIDataInformationKeyConstants.KEY_SXY_STRIDE);
				} else {
					stride = SGIntegerSeriesSet.createInstance(len);
				}
			} else {
				len = SGDataUtility.getSXYMDArrayDataLength(cols);
				stride = SGUtility.createIndicesWithinRange(stride, len);
			}
			this.mSXYDataLineAndBarStridePanel.setLength(len);
			this.mSXYDataLineAndBarStridePanel.setIndices(stride);

			// tick label
			this.initTickLabelStride(stride, len, cols);

		} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
			final boolean gridPlot = this.isSXYZGridPlotSelected();
    		Map<String, Object> infoMap = new HashMap<String, Object>(this.mInfoMap);
    		infoMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_GRID_PLOT_FLAG, gridPlot);

			if (gridPlot) {
				// grid plot
				SGIntegerSeriesSet xStride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X);
				SGIntegerSeriesSet yStride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y);
				Integer lenX = null;
				Integer lenY = null;
				if (xStride == null || yStride == null) {
					Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility
							.calcMDArrayDefaultStride(cols, infoMap, dimNameMap);
					if (xStride == null) {
						final SGMDArrayDimensionInfo dimInfoX = dimNameMap
								.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X);
						final String nameX = dimInfoX.getName();
						SGMDArrayDataColumnInfo mdInfoX = (SGMDArrayDataColumnInfo) this
								.findColumnWithName(cols, nameX);
						final int dimIndexX = dimInfoX.getIndex();
						lenX = mdInfoX.getDimensions()[dimIndexX];
						if (strideAvailable) {
							xStride = strideMap
									.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X);
						} else {
							xStride = SGIntegerSeriesSet.createInstance(lenX);
						}
					}
					if (yStride == null) {
						final SGMDArrayDimensionInfo dimInfoY = dimNameMap
								.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y);
						final String nameY = dimInfoY.getName();
						SGMDArrayDataColumnInfo mdInfoY = (SGMDArrayDataColumnInfo) this
								.findColumnWithName(cols, nameY);
						final int dimIndexY = dimInfoY.getIndex();
						lenY = mdInfoY.getDimensions()[dimIndexY];
						if (strideAvailable) {
							yStride = strideMap
									.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y);
						} else {
							yStride = SGIntegerSeriesSet.createInstance(lenY);
						}
					}
				} else {
					lenX = SGDataUtility.getSXYZMDArrayDataXLength(cols);
					lenY = SGDataUtility.getSXYZMDArrayDataYLength(cols);
				}
				if (lenX != null) {
					xStride = SGUtility.createIndicesWithinRange(xStride, lenX);
					this.mSXYZDataXStridePanel.setLength(lenX);
				}
				if (lenY != null) {
					yStride = SGUtility.createIndicesWithinRange(yStride, lenY);
					this.mSXYZDataYStridePanel.setLength(lenY);
				}
				this.mSXYZDataXStridePanel.setIndices(xStride);
				this.mSXYZDataYStridePanel.setIndices(yStride);
				
			} else {
				// scatter plot
				SGIntegerSeriesSet indexStride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE);
				Integer lenIndex = null;
				if (indexStride == null) {
					Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility
							.calcMDArrayDefaultStride(cols, infoMap, dimNameMap);
					final SGMDArrayDimensionInfo dimInfo = dimNameMap
							.get(SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE);
					final String name = dimInfo.getName();
					SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) this
							.findColumnWithName(cols, name);
					final int dimIndex = dimInfo.getIndex();
					lenIndex = mdInfo.getDimensions()[dimIndex];
					if (strideAvailable) {
						indexStride = strideMap
								.get(SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE);
					} else {
						indexStride = SGIntegerSeriesSet.createInstance(lenIndex);
					}
				} else {
					lenIndex = SGDataUtility.getSXYZMDArrayDataZGenericDimensionLength(cols);
				}
				if (lenIndex != null) {
					indexStride = SGUtility.createIndicesWithinRange(indexStride, lenIndex);
					this.mSXYZDataIndexStridePanel.setLength(lenIndex);
				}
				this.mSXYZDataIndexStridePanel.setIndices(indexStride);
			}
			
		} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
			final boolean gridPlot = this.isVXYGridPlotSelected();
    		Map<String, Object> infoMap = new HashMap<String, Object>(this.mInfoMap);
    		infoMap.put(SGIDataInformationKeyConstants.KEY_VXY_GRID_PLOT_FLAG, this.isVXYGridPlotSelected());

			if (gridPlot) {
				// grid plot
				SGIntegerSeriesSet xStride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X);
				SGIntegerSeriesSet yStride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y);
				Integer lenX = null;
				Integer lenY = null;
				if (xStride == null || yStride == null) {
					Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility
							.calcMDArrayDefaultStride(cols, infoMap, dimNameMap);
					if (xStride == null) {
						final SGMDArrayDimensionInfo dimInfoX = dimNameMap
								.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X);
						final String nameX = dimInfoX.getName();
						SGMDArrayDataColumnInfo mdInfoX = (SGMDArrayDataColumnInfo) this
								.findColumnWithName(cols, nameX);
						final int dimIndexX = dimInfoX.getIndex();
						lenX = mdInfoX.getDimensions()[dimIndexX];
						if (strideAvailable) {
							xStride = strideMap
									.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X);
						} else {
							xStride = SGIntegerSeriesSet.createInstance(lenX);
						}
					}
					if (yStride == null) {
						final SGMDArrayDimensionInfo dimInfoY = dimNameMap
								.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y);
						final String nameY = dimInfoY.getName();
						SGMDArrayDataColumnInfo mdInfoY = (SGMDArrayDataColumnInfo) this
								.findColumnWithName(cols, nameY);
						final int dimIndexY = dimInfoY.getIndex();
						lenY = mdInfoY.getDimensions()[dimIndexY];
						if (strideAvailable) {
							yStride = strideMap
									.get(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y);
						} else {
							yStride = SGIntegerSeriesSet.createInstance(lenY);
						}
					}
				} else {
					Boolean polar = SGDataUtility.isPolar(this.mInfoMap);
					lenX = SGDataUtility.getVXYMDArrayDataXLength(cols, polar);
					lenY = SGDataUtility.getVXYMDArrayDataYLength(cols, polar);
				}
				if (lenX != null) {
					xStride = SGUtility.createIndicesWithinRange(xStride, lenX);
					this.mVXYDataXStridePanel.setLength(lenX);
				}
				if (lenY != null) {
					yStride = SGUtility.createIndicesWithinRange(yStride, lenY);
					this.mVXYDataYStridePanel.setLength(lenY);
				}
				this.mVXYDataXStridePanel.setIndices(xStride);
				this.mVXYDataYStridePanel.setIndices(yStride);

			} else {
				// scatter plot
				SGIntegerSeriesSet indexStride = (SGIntegerSeriesSet) this.mInfoMap
						.get(SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE);
				Boolean polar = (Boolean) this.mInfoMap.get(SGIDataInformationKeyConstants.KEY_VXY_POLAR_SELECTED);
				Integer lenIndex = null;
				if (indexStride == null) {
					Map<String, SGIntegerSeriesSet> strideMap = SGDataUtility
							.calcMDArrayDefaultStride(cols, infoMap, dimNameMap);
					final SGMDArrayDimensionInfo dimInfo = dimNameMap
							.get(SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE);
					final String name = dimInfo.getName();
					SGMDArrayDataColumnInfo mdInfo = (SGMDArrayDataColumnInfo) this
							.findColumnWithName(cols, name);
					final int dimIndex = dimInfo.getIndex();
					lenIndex = mdInfo.getDimensions()[dimIndex];
					if (strideAvailable) {
						indexStride = strideMap
								.get(SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE);
					} else {
						indexStride = SGIntegerSeriesSet
								.createInstance(lenIndex);
					}
				} else {
					lenIndex = SGDataUtility.getVXYMDArrayDataComponentGenericDimensionLength(cols, polar);
				}
				if (lenIndex != null) {
					indexStride = SGUtility.createIndicesWithinRange(
							indexStride, lenIndex);
					this.mVXYDataIndexStridePanel.setLength(lenIndex);
				}
				this.mVXYDataIndexStridePanel.setIndices(indexStride);
			}
		}
	}

    // Initializes the stride for tick labels.
	private void initTickLabelStride(final SGIntegerSeriesSet stride, final int len,
			SGDataColumnInfo[] cols) {
		SGIntegerSeriesSet strideTickLabel = (SGIntegerSeriesSet) this.mInfoMap
				.get(SGIDataInformationKeyConstants.KEY_SXY_TICK_LABEL_STRIDE);
		boolean sync = SGUtility.equals(strideTickLabel, stride);
		final int lenTickLabel;
		if (strideTickLabel == null) {
			// synchronize with main stride
			strideTickLabel = stride;
			lenTickLabel = len;
			sync = true;
		} else {
			if (sync) {
				strideTickLabel = stride;
				lenTickLabel = len;
			} else {
				lenTickLabel = SGDataUtility.getSXYMDArrayDataLength(cols);
			}
		}
		strideTickLabel = SGUtility.createIndicesWithinRange(strideTickLabel, lenTickLabel);

		this.mSXYDataTickLabelStridePanel.setLength(lenTickLabel);
		this.mSXYDataTickLabelStridePanel.setIndices(strideTickLabel);
		this.mSXYDataTickLabelStrideSyncCheckBox.setSelected(sync);
		this.mTickLabelStrideComponentGroup.setEnabled(!sync);
	}

	@Override
	public void insertUpdate(DocumentEvent e) {
		this.onDocumentUpdate(e);
	}

	@Override
	public void removeUpdate(DocumentEvent e) {
		this.onDocumentUpdate(e);
	}

	@Override
	public void changedUpdate(DocumentEvent e) {
		this.onDocumentUpdate(e);
	}

	private void onDocumentUpdate(DocumentEvent e) {
		Document doc = e.getDocument();
		if (this.mSXYDataPickUpDimensionIndexPanel.hasDocument(doc)) {
			SGIntegerSeriesSet indices = this.mSXYDataPickUpDimensionIndexPanel.getIndices();
			this.mInfoMap.put(SGIDataInformationKeyConstants.KEY_SXY_PICKUP_INDICES, indices);
		} else if (this.mSXYDataLineAndBarStridePanel.hasDocument(doc)) {
			this.syncTickLabelStride();
		}
	}

	// Synchronizes the stride for tick labels.
	private void syncTickLabelStride() {
		if (this.mSXYDataTickLabelStrideSyncCheckBox.isSelected()) {
			SGIntegerSeriesSet indices = this.mSXYDataLineAndBarStridePanel.getIndices();
			this.mSXYDataTickLabelStridePanel.setLength(this.mSXYDataLineAndBarStridePanel.getLength());
			this.mSXYDataTickLabelStridePanel.setIndices(indices);
		}
	}

	@Override
    public void actionPerformed(ActionEvent e) {
    	super.actionPerformed(e);
    	Object source = e.getSource();
    	if (source.equals(this.mSXYDataTickLabelStrideSyncCheckBox)) {
    		final boolean bSync = this.mSXYDataTickLabelStrideSyncCheckBox.isSelected();
    		this.mTickLabelStrideComponentGroup.setEnabled(!bSync);

    		// synchronizes the stride
    		if (bSync) {
    			this.syncTickLabelStride();
    		}
    	} else if (source.equals(this.mStrideAvailableCheckBox)) {
    		final boolean enabled = this.mStrideAvailableCheckBox.isSelected();
    		this.mStrideComponentGroup.setEnabled(enabled);

    		// initializes the stride
    		this.initStride();
    	} else if (source.equals(this.mSXYZGridPlotRadioButton)
    			|| source.equals(this.mSXYZScatterPlotRadioButton)
    			|| source.equals(this.mVXYGridPlotRadioButton)
    			|| source.equals(this.mVXYScatterPlotRadioButton)) {
    		this.updateComponentsWithTable();
    	}
    }

    private boolean isTickLabelAvailable(SGDataColumnInfo[] cols) {
		List<SGDataColumnInfo> tickLabelColumnList = this.findColumnsWithColumnTypeStartsWith(
				cols, TICK_LABEL);
		return (tickLabelColumnList.size() > 0);
    }

    /**
     * Returns the map of the stride for arrays.
     *
     * @return the map of the stride for arrays
     */
	@Override
	public Map<String, SGIntegerSeriesSet> getStrideMap() {
		Map<String, SGIntegerSeriesSet> strideMap = new HashMap<String, SGIntegerSeriesSet>();
		if (SGDataUtility.isSXYTypeData(this.mDataType)) {
			this.updateStrideMap(this.mSXYDataLineAndBarStridePanel,
					SGIDataInformationKeyConstants.KEY_SXY_STRIDE, strideMap);
			this.updateStrideMap(this.mSXYDataTickLabelStridePanel,
					SGIDataInformationKeyConstants.KEY_SXY_TICK_LABEL_STRIDE, strideMap);
		} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
			this.updateStrideMap(this.mSXYZDataXStridePanel,
					SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X, strideMap);
			this.updateStrideMap(this.mSXYZDataYStridePanel,
					SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y, strideMap);
			this.updateStrideMap(this.mSXYZDataIndexStridePanel,
					SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE, strideMap);
		} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
			this.updateStrideMap(this.mVXYDataXStridePanel,
					SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X, strideMap);
			this.updateStrideMap(this.mVXYDataYStridePanel,
					SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y, strideMap);
			this.updateStrideMap(this.mVXYDataIndexStridePanel,
					SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE, strideMap);
		}
		return strideMap;
	}

	@Override
	public void setStrideMap(Map<String, SGIntegerSeriesSet> strideMap) {
		if (SGDataUtility.isSXYTypeData(this.mDataType)) {
			this.setStride(this.mSXYDataLineAndBarStridePanel,
					SGIDataInformationKeyConstants.KEY_SXY_STRIDE, strideMap);
			this.setStride(this.mSXYDataTickLabelStridePanel,
					SGIDataInformationKeyConstants.KEY_SXY_TICK_LABEL_STRIDE, strideMap);
		} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
			this.setStride(this.mSXYZDataXStridePanel,
					SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X, strideMap);
			this.setStride(this.mSXYZDataYStridePanel,
					SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y, strideMap);
			this.setStride(this.mSXYZDataIndexStridePanel,
					SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE, strideMap);
		} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
			this.setStride(this.mVXYDataXStridePanel,
					SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X, strideMap);
			this.setStride(this.mVXYDataYStridePanel,
					SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y, strideMap);
			this.setStride(this.mVXYDataIndexStridePanel,
					SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE, strideMap);
		}
	}

	@Override
	protected Map<String, Integer> getFullLengthMap() {
		Map<String, Integer> lengthMap = new HashMap<String, Integer>();
		if (SGDataUtility.isSXYTypeData(this.mDataType)) {
			this.updateLengthMap(this.mSXYDataLineAndBarStridePanel,
					SGIDataInformationKeyConstants.KEY_SXY_STRIDE, lengthMap);
			this.updateLengthMap(this.mSXYDataTickLabelStridePanel,
					SGIDataInformationKeyConstants.KEY_SXY_TICK_LABEL_STRIDE, lengthMap);
		} else if (SGDataUtility.isSXYZTypeData(this.mDataType)) {
			this.updateLengthMap(this.mSXYZDataXStridePanel,
					SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X, lengthMap);
			this.updateLengthMap(this.mSXYZDataYStridePanel,
					SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y, lengthMap);
			this.updateLengthMap(this.mSXYZDataIndexStridePanel,
					SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE, lengthMap);
		} else if (SGDataUtility.isVXYTypeData(this.mDataType)) {
			this.updateLengthMap(this.mVXYDataXStridePanel,
					SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X, lengthMap);
			this.updateLengthMap(this.mVXYDataYStridePanel,
					SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y, lengthMap);
			this.updateLengthMap(this.mVXYDataIndexStridePanel,
					SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE, lengthMap);
		}
		return lengthMap;
	}

	private boolean isSXYZGridPlotSelected() {
		return this.mSXYZGridPlotRadioButton.isSelected();
	}
	
	public boolean isSXYZIndexAvailable() {
		return !this.isSXYZGridPlotSelected();
	}
	
	public void setSXYZGridPlotSelected(final boolean b) {
		this.mSXYZGridPlotRadioButton.setSelected(b);
		this.mSXYZScatterPlotRadioButton.setSelected(!b);
	}
	
	private boolean isVXYGridPlotSelected() {
		return this.mVXYGridPlotRadioButton.isSelected();
	}

	public boolean isVXYIndexAvailable() {
		return !this.isVXYGridPlotSelected();
	}

	public void setVXYGridPlotSelected(final boolean b) {
		this.mVXYGridPlotRadioButton.setSelected(b);
		this.mVXYScatterPlotRadioButton.setSelected(!b);
	}

	private boolean isValidDimensionIndex(Integer index) {
		return SGDataUtility.isValidDimensionIndex(index);
	}
}
