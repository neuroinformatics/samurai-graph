/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SGMDArrayDimensionPanel.java
 *
 * Created on 2011/05/13, 17:50:02
 */
package jp.riken.brain.ni.samuraigraph.data;

public class SGMDArrayDimensionPanel extends SGDimensionPanel {

	private static final long serialVersionUID = 1590644477955028951L;

	/** Creates new form SGMDArrayDimensionPanel */
    public SGMDArrayDimensionPanel() {
    	super();
        initComponents();
        this.initProperty();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mCenterPanel = new javax.swing.JPanel();
        mWestPanel = new javax.swing.JPanel();
        mNameLabel = new javax.swing.JLabel();
        mWestSpaceLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        mCenterPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        add(mCenterPanel, gridBagConstraints);

        mWestPanel.setLayout(new java.awt.GridBagLayout());

        mNameLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        mNameLabel.setText("Name");
        mNameLabel.setPreferredSize(new java.awt.Dimension(60, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        mWestPanel.add(mNameLabel, gridBagConstraints);

        mWestSpaceLabel.setFont(new java.awt.Font("Dialog", 0, 10));
        mWestSpaceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mWestSpaceLabel.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mWestPanel.add(mWestSpaceLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
        add(mWestPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mCenterPanel;
    private javax.swing.JLabel mNameLabel;
    private javax.swing.JPanel mWestPanel;
    private javax.swing.JLabel mWestSpaceLabel;
    // End of variables declaration//GEN-END:variables
    
    private SGSliderPanel mSliderPanel;
    
    private void initProperty() {
    	// setup the slider panel
        mSliderPanel = new jp.riken.brain.ni.samuraigraph.data.SGSliderPanel();
        mCenterPanel.add(mSliderPanel, new java.awt.GridBagConstraints());
    	this.mSliderPanel.setSliderPreferredWidth(350);
    }
    
    /**
     * Sets the components enabled.
     * 
     * @param enabled
     *           true to enable
     */
    public void setComponentsEnabled(final boolean enabled) {
        this.mNameLabel.setEnabled(enabled);
        this.mSliderPanel.setComponentsEnabled(enabled);
    }

    /**
     * Returns the name of the dimension.
     * 
     * @return the name of the dimension
     */
    public String getDimensionName() {
    	return this.mNameLabel.getText();
    }

    /**
     * Sets the name of dimension.
     * 
     * @param name
     *           the name to set
     */
    public void setDimensionName(final String name) {
        this.mNameLabel.setText(name);
        this.mNameLabel.setToolTipText(name);
    }

    /**
     * Returns the slider panel.
     * 
     * @return the slider panel
     */
    protected SGSliderPanel getSliderPanel() {
    	return this.mSliderPanel;
    }
    
    /**
     * Adds a listener for the change of slider.
     * 
     * @param l
     *          a listener
     */
    public void addSliderChangeListener(SGSliderPanel.ISliderChangeListener l) {
    	this.mSliderPanel.addSliderChangeListener(l);
    }

}
