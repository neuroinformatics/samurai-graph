package jp.riken.brain.ni.samuraigraph.data;

import java.util.List;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import jp.riken.brain.ni.samuraigraph.base.SGDataColumnInfoSet;
import jp.riken.brain.ni.samuraigraph.base.SGIConstants;
import jp.riken.brain.ni.samuraigraph.base.SGIntegerSeriesSet;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;

/**
 * A dialog to duplicate multidimensional array data.
 *
 */
public class SGMDArrayDataDuplicationDialog extends SGDataDuplicationDialog {

	private static final long serialVersionUID = 4079423120287962285L;
	
    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Setup for Duplication";

	/** Creates new form SGMDArrayDataDuplicationDialog */
    public SGMDArrayDataDuplicationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mDataNamePanel = new javax.swing.JPanel();
        mDataNameLabel = new javax.swing.JLabel();
        mDataNameTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mMDArrayDataSetupPanel = new jp.riken.brain.ni.samuraigraph.data.SGMDArrayDataSetupPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mDataNamePanel.setLayout(new java.awt.GridBagLayout());

        mDataNameLabel.setFont(new java.awt.Font("Dialog", 1, 12));
        mDataNameLabel.setText("Data Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameLabel, gridBagConstraints);

        mDataNameTextField.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(mDataNamePanel, gridBagConstraints);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 4);
        getContentPane().add(mButtonPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(mMDArrayDataSetupPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JLabel mDataNameLabel;
    private javax.swing.JPanel mDataNamePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mDataNameTextField;
    private jp.riken.brain.ni.samuraigraph.data.SGMDArrayDataSetupPanel mMDArrayDataSetupPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Initialize the properties.
     */
    private void initProperty() {
        // set the title
        this.setTitle(TITLE);
    }
    
    /**
     * Returns the text field to set data name.
     * 
     * @return a text field to set the data name
     */
	@Override
	protected JTextField getDataNameTextField() {
		return this.mDataNameTextField;
	}

    /**
     * Called when the OK button is pressed.
     *
     * @return true if succeeded
     */
	@Override
	protected JButton getOKButton() {
		return this.mOKButton;
	}

    /**
     * Called when the cancel button is pressed.
     *
     * @return true if succeeded
     */
	@Override
	protected JButton getCancelButton() {
		return this.mCancelButton;
	}

    /**
     * Returns an object that has a table to setup data.
     * 
     * @return an object that has a table to setup data
     */
	@Override
	protected SGIDataSetupTableHolder getTableHolder() {
		return this.mMDArrayDataSetupPanel;
	}

    /**
     * Returns the panel to set up the data.
     * 
     * @return the panel to set up the data
     */
	@Override
	protected SGDataSetupPanel getDataSetupPanel() {
		return this.mMDArrayDataSetupPanel;
	}

    /**
     * Sets the data to this dialog.
     *
     * @param initName
     *           initial value for the data name
     * @param data
     *           the netCDF data
     * @param colInfoSet
     *           column information
     * @param infoMap
     *           the information map
     * @return true if succeeded
     */
    public boolean setData(String initName, SGMDArrayData data, 
    		SGDataColumnInfoSet colInfoSet, Map<String, Object> infoMap) {
    	
    	// set the title
    	this.setupTitle(data.getDataType());

        // set the name
        this.mDataNameTextField.setText(initName);

        // set to the panel
        if (this.mMDArrayDataSetupPanel.setData(data, colInfoSet, infoMap, false
        		) == false) {
            return false;
        }
        this.pack();
        return true;
    }

    /**
     * Overrode to check validity of the input value.
     */
    protected boolean onOK() {
        // check the data name
        boolean ok = true;
        String name = this.getDataName();
        if (!SGUtilityText.isValidString(name)) {
            ok = false;
        }
        if (!ok) {
            SGUtility.showMessageDialog(this, INVALID_INPUT_VALUE,
                    SGIConstants.ERROR, JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return super.onOK();
    }

	public SGIntegerSeriesSet getSXYStride() {
		return this.mMDArrayDataSetupPanel.getStride(SGIDataInformationKeyConstants.KEY_SXY_STRIDE);
	}

	public SGIntegerSeriesSet getVXYStrideX() {
		return this.mMDArrayDataSetupPanel.getStride(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_X);
	}

	public SGIntegerSeriesSet getVXYStrideY() {
		return this.mMDArrayDataSetupPanel.getStride(SGIDataInformationKeyConstants.KEY_VXY_STRIDE_Y);
	}

	public SGIntegerSeriesSet getSXYZStrideX() {
		return this.mMDArrayDataSetupPanel.getStride(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X);
	}

	public SGIntegerSeriesSet getSXYZStrideY() {
		return this.mMDArrayDataSetupPanel.getStride(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y);
	}

	public List<String> getSXYDataPickUpDatasetName() {
		return this.mMDArrayDataSetupPanel.getSXYDataPickUpDatasetName();
	}
	
	public Map<String, Integer> getSXYDataPickUpDimensionIndexMap() {
		return this.mMDArrayDataSetupPanel.getSXYDataPickUpDimensionIndexMap();
	}
	
    /**
     * Returns the indices for picked up dimension of scalar XY data.
     * 
     * @return the indices for picked up dimension of scalar XY data
     */
	public SGIntegerSeriesSet getSXYPickUpIndices() {
		return this.mMDArrayDataSetupPanel.getSXYPickUpIndices();
	}

}
