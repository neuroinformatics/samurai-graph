package jp.riken.brain.ni.samuraigraph.data;

import java.awt.Dialog;
import java.awt.Frame;
import java.util.Map;

import javax.swing.JButton;

import jp.riken.brain.ni.samuraigraph.base.SGDataColumnInfoSet;
import jp.riken.brain.ni.samuraigraph.base.SGIntegerSeriesSet;

/**
 * A dialog to set up the single-dimensional array data.
 * 
 */
public class SGSDArrayDataSetupDialog extends SGDataSetupDialog implements
        SGIDataColumnTypeConstants {

    /**
     * Serial Version UID
     */
    private static final long serialVersionUID = -6874865640705737852L;

    /**
     * Builds this dialog.
     * 
     * @param owner
     *           the owner of this dialog
     * @param modal
     *           true for modal dialog
     */
    public SGSDArrayDataSetupDialog(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /**
     * Builds this dialog.
     * 
     * @param owner
     *           the owner of this dialog
     * @param modal
     *           true for modal dialog
     */
    public SGSDArrayDataSetupDialog(Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mDataSetupPanel = new jp.riken.brain.ni.samuraigraph.data.SGSDArrayDataSetupPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);
        getContentPane().add(mDataSetupPanel, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.data.SGSDArrayDataSetupPanel mDataSetupPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Initialize this dialog.
     */
    private void initProperty() {
    }

    /**
     * Returns the OK button of this dialog.
     * 
     * @return the OK button
     */
    protected JButton getOKButton() {
        return this.mOKButton;
    }

    /**
     * Returns the Cancel button of this dialog.
     * 
     * @return the Cancel button
     */
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }

    /**
     * Returns an object that has a table to setup data.
     * 
     * @return an object that has a table to setup data
     */
    protected SGIDataSetupTableHolder getTableHolder() {
        return this.mDataSetupPanel;
    }

    /**
     * Set information of data columns.
     * 
     * @param data
     *            single-dimensional array data
     * @param colInfoSet
     *            data columns
     * @param infoMap
     *            a map of information
     * @param showDefault
     *            a flag whether to show default column type
     * @return true if succeeded
     */
    public boolean setData(SGSDArrayData data, SGDataColumnInfoSet colInfoSet,
    		Map<String, Object> infoMap, 
    		final boolean showDefault) {
    	// set the title
    	this.setupTitle(data.getDataType());
    	
    	// set to the panel
        if (this.mDataSetupPanel.setData(data, colInfoSet, infoMap, showDefault
        		) == false) {
        	return false;
        }
        this.pack();
        
        return true;
    }

	@Override
	protected SGDataSetupPanel getDataSetupPanel() {
		return this.mDataSetupPanel;
	}

	public SGIntegerSeriesSet getSXYStride() {
		return this.mDataSetupPanel.getStride(SGIDataInformationKeyConstants.KEY_SXY_INDEX_STRIDE);
	}

	public SGIntegerSeriesSet getSXYZStride() {
		return this.mDataSetupPanel.getStride(SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE);
	}

	public SGIntegerSeriesSet getVXYStride() {
		return this.mDataSetupPanel.getStride(SGIDataInformationKeyConstants.KEY_VXY_INDEX_STRIDE);
	}
	
	public SGIntegerSeriesSet getSXYTickLabelStride() {
		return this.mDataSetupPanel.getStride(SGIDataInformationKeyConstants.KEY_SXY_TICK_LABEL_STRIDE);
	}

}
