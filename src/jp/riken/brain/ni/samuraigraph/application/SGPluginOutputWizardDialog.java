package jp.riken.brain.ni.samuraigraph.application;

import javax.swing.JButton;

import jp.riken.brain.ni.samuraigraph.application.SGPluginDataSelectionPanel.NamedDataBuffer;
import jp.riken.brain.ni.samuraigraph.base.SGDataBuffer;

/**
 * The wizard dialog to setup output data from the plug-in.
 *
 */
public class SGPluginOutputWizardDialog extends SGWizardDialog {

	private static final long serialVersionUID = 9171344042100804951L;
	
	public static final String TITLE = "Setup Output Data from Plug-in";
	
	/** Creates new form SGPluginOutputWizardDialog */
    public SGPluginOutputWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mDataPanel = new jp.riken.brain.ni.samuraigraph.application.SGPluginDataSelectionPanel();
        mButtonPanel = new javax.swing.JPanel();
        mPreviousButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(mDataPanel, gridBagConstraints);

        mPreviousButton.setText("<Prev");
        mPreviousButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mPreviousButton);

        mNextButton.setText("Next>");
        mNextButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mNextButton);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mButtonPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.application.SGPluginDataSelectionPanel mDataPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviousButton;
    // End of variables declaration//GEN-END:variables
    
    private void initProperty() {
    	this.setTitle(TITLE);
    }
    
	@Override
	protected JButton getPreviousButton() {
		return this.mPreviousButton;
	}

	@Override
	protected JButton getNextButton() {
		return this.mNextButton;
	}

	@Override
	protected JButton getOKButton() {
		return this.mOKButton;
	}

	@Override
	protected JButton getCancelButton() {
		return this.mCancelButton;
	}
	
    /**
     * Adds a data buffer.
     * 
     * @param name
     *           the name of data
     * @param buffer
     *           a data buffer
     */
    public void addDataBuffer(String name, SGDataBuffer buffer) {
    	this.mDataPanel.addData(name, buffer);
    }
    
	void syncDataTable() {
		this.mDataPanel.syncDataTable();
	}

    /**
     * Returns an array of data buffers of selected data.
     * 
     * @return an array of data buffers of selected data
     */
    public NamedDataBuffer[] getSelectedDataBuffers() {
    	return this.mDataPanel.getSelectedDataBuffers();
    }

    void deleteTreeNode() {
    	this.mDataPanel.deleteTreeNode();
    }
}
