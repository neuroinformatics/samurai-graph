package jp.riken.brain.ni.samuraigraph.application;

import java.util.List;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;

import jp.riken.brain.ni.samuraigraph.base.SGDataColumnInfoSet;
import jp.riken.brain.ni.samuraigraph.base.SGIntegerSeriesSet;
import jp.riken.brain.ni.samuraigraph.data.SGDataSetupPanel;
import jp.riken.brain.ni.samuraigraph.data.SGIDataSetupTableHolder;
import jp.riken.brain.ni.samuraigraph.data.SGMDArrayFile;

/**
 *
 */
public class SGPropertyFileMDArrayDataDialog extends SGPropertyFileDataDialog {

	private static final long serialVersionUID = 877971321663036187L;
	
	/** Creates new form SGPropertyFileMDArrayDataDialog */
    public SGPropertyFileMDArrayDataDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

	/** Creates new form SGPropertyFileMDArrayDataDialog */
    public SGPropertyFileMDArrayDataDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mMDArrayDataSetupPanel = new jp.riken.brain.ni.samuraigraph.data.SGMDArrayDataSetupPanel();
        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(mMDArrayDataSetupPanel, gridBagConstraints);

        mButtonPanel.setFont(new java.awt.Font("Dialog", 0, 11));

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(mButtonPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.data.SGMDArrayDataSetupPanel mMDArrayDataSetupPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    // End of variables declaration//GEN-END:variables

	@Override
	protected SGIDataSetupTableHolder getDataSetupTableHolder() {
		return this.mMDArrayDataSetupPanel;
	}

	@Override
	protected SGDataSetupPanel getDataSetupPanel() {
		return this.mMDArrayDataSetupPanel;
	}

	@Override
	protected JTextComponent getFileNameTextComponent() {
		// always returns null
		return null;
	}

	@Override
	protected JButton getFileChooserButton() {
		// always returns null
		return null;
	}

	@Override
	protected JButton getOKButton() {
		return this.mOKButton;
	}

	@Override
	protected JButton getCancelButton() {
		return this.mCancelButton;
	}

    /**
     * Sets the multidimensional array data.
     * 
     * @param fileName
     *           the name of data file
     * @param mdFile
     *           multidimensional array file
     * @param dataType
     *           type of data
     * @param colInfoSet
     *           data columns
     * @param infoMap
     *           a map of information
     * @param showDefault
     *           a flag whether to show default column type
     * @return true if succeeded
     */
    public boolean setData(String fileName, SGMDArrayFile mdFile, String dataType,
    		SGDataColumnInfoSet colInfoSet,
            Map<String, Object> infoMap, final boolean showDefault) {
        
        // set the data type and information map
        this.setDataType(dataType, infoMap);

        // set the file name
        this.setFileName(fileName);
        
        if (this.mMDArrayDataSetupPanel.setData(mdFile, dataType, colInfoSet,
        		infoMap, showDefault) == false) {
            return false;
        }

        // packs this dialog
        SwingUtilities.invokeLater(new Runnable() {
        	public void run() {
                pack();
        	}
        });

        return true;
    }

	public List<String> getSXYDataPickUpDatasetName() {
		return this.mMDArrayDataSetupPanel.getSXYDataPickUpDatasetName();
	}
	
	public Map<String, Integer> getSXYDataPickUpDimensionIndexMap() {
		return this.mMDArrayDataSetupPanel.getSXYDataPickUpDimensionIndexMap();
	}
	
	public SGIntegerSeriesSet getSXYPickUpIndices() {
		return this.mMDArrayDataSetupPanel.getSXYPickUpIndices();
	}
	
	public Map<String, Integer> getTimeDimensionIndexMap() {
		return this.mMDArrayDataSetupPanel.getTimeDimensionIndexMap();
	}
}
