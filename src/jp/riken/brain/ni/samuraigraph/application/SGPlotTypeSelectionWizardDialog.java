package jp.riken.brain.ni.samuraigraph.application;

import java.awt.event.ActionEvent;

import javax.swing.ButtonGroup;
import javax.swing.JButton;

/**
 * A dialog to setup the plot type.
 *
 */
public class SGPlotTypeSelectionWizardDialog extends SGWizardDialog {

    private static final long serialVersionUID = 394661814157143777L;
    
    public static final String TITLE = "Select the Plot Type";
    
    /** Creates new form SGPlotTypeSelectionWizardDialog */
    public SGPlotTypeSelectionWizardDialog() {
        super();
        initComponents();
        this.initProperty();
    }

    public SGPlotTypeSelectionWizardDialog(java.awt.Frame parent,
            boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mPlotTypeSelectionPanel = new javax.swing.JPanel();
        mLineCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mSymbolCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mBarCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mErrorBarPlacePanel = new javax.swing.JPanel();
        mErrorBarPlaceLineSymbolRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mErrorBarPlaceBarRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mButtonPanel = new javax.swing.JPanel();
        mPreviousButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mLineColorPanel = new javax.swing.JPanel();
        mAutoAssignmentCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mDataNamePanel = new javax.swing.JPanel();
        mDataNameLabel = new javax.swing.JLabel();
        mDataNameTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPlotTypeSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plot Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        mPlotTypeSelectionPanel.setLayout(new java.awt.GridBagLayout());

        mLineCheckBox.setText("Line");
        mLineCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 10);
        mPlotTypeSelectionPanel.add(mLineCheckBox, gridBagConstraints);

        mSymbolCheckBox.setText("Symbol");
        mSymbolCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 0);
        mPlotTypeSelectionPanel.add(mSymbolCheckBox, gridBagConstraints);

        mBarCheckBox.setText("Bar");
        mBarCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 20);
        mPlotTypeSelectionPanel.add(mBarCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 5, 20);
        getContentPane().add(mPlotTypeSelectionPanel, gridBagConstraints);

        mErrorBarPlacePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Error Bar Places", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        mErrorBarPlacePanel.setLayout(new java.awt.GridBagLayout());

        mErrorBarPlaceLineSymbolRadioButton.setText("Line, Symbol");
        mErrorBarPlaceLineSymbolRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        mErrorBarPlacePanel.add(mErrorBarPlaceLineSymbolRadioButton, gridBagConstraints);

        mErrorBarPlaceBarRadioButton.setText("Bar");
        mErrorBarPlaceBarRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 20);
        mErrorBarPlacePanel.add(mErrorBarPlaceBarRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 10, 0);
        getContentPane().add(mErrorBarPlacePanel, gridBagConstraints);

        mPreviousButton.setText("<Prev");
        mPreviousButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mPreviousButton);

        mNextButton.setText("Next>");
        mNextButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mNextButton);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mLineColorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Line Color", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        mLineColorPanel.setLayout(new java.awt.GridBagLayout());

        mAutoAssignmentCheckBox.setText("Auto Assignment");
        mAutoAssignmentCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 10);
        mLineColorPanel.add(mAutoAssignmentCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 5, 20);
        getContentPane().add(mLineColorPanel, gridBagConstraints);

        mDataNamePanel.setLayout(new java.awt.GridBagLayout());

        mDataNameLabel.setFont(new java.awt.Font("Dialog", 1, 12));
        mDataNameLabel.setText("Data Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameLabel, gridBagConstraints);

        mDataNameTextField.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(mDataNamePanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    @Override
    protected JButton getPreviousButton() {
        return this.mPreviousButton;
    }

    @Override
    protected JButton getNextButton() {
        return this.mNextButton;
    }

    @Override
    protected JButton getOKButton() {
        return this.mOKButton;
    }

    @Override
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mAutoAssignmentCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mBarCheckBox;
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JLabel mDataNameLabel;
    private javax.swing.JPanel mDataNamePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mDataNameTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mErrorBarPlaceBarRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mErrorBarPlaceLineSymbolRadioButton;
    private javax.swing.JPanel mErrorBarPlacePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mLineCheckBox;
    private javax.swing.JPanel mLineColorPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JPanel mPlotTypeSelectionPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviousButton;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mSymbolCheckBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Initialize this dialog.
     */
    private boolean initProperty() {
        // set the title
        this.setTitle(TITLE);

        // group
        ButtonGroup group = new ButtonGroup();
        group.add(this.mErrorBarPlaceLineSymbolRadioButton);
        group.add(this.mErrorBarPlaceBarRadioButton);
        
        // initial
        this.mLineCheckBox.setSelected(true);
        this.mSymbolCheckBox.setSelected(false);
        this.mBarCheckBox.setSelected(false);
        
        this.mErrorBarPlaceLineSymbolRadioButton.setSelected(true);
        
        this.mDataNameTextField.setEditable(false);
        
        // action listener
        this.mLineCheckBox.addActionListener(this);
        this.mSymbolCheckBox.addActionListener(this);
        this.mBarCheckBox.addActionListener(this);
        this.mErrorBarPlaceLineSymbolRadioButton.addActionListener(this);
        this.mErrorBarPlaceBarRadioButton.addActionListener(this);

        return true;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        super.actionPerformed(e);
        Object source = e.getSource();
        if (source.equals(this.mLineCheckBox) ||
                source.equals(this.mSymbolCheckBox) ||
                source.equals(this.mBarCheckBox)) {
            if (this.isLineSelected() || this.isSymbolSelected() || this.isBarSelected()) {
                this.getOKButton().setEnabled(true);
            } else {
                this.getOKButton().setEnabled(false);
            }
        }
    }
    
    public boolean isLineSelected() {
        return this.mLineCheckBox.isSelected();
    }
    
    public boolean isSymbolSelected() {
        return this.mSymbolCheckBox.isSelected();
    }
    
    public boolean isBarSelected() {
        return this.mBarCheckBox.isSelected();
    }
    
    public boolean isErrorBarPlaceLineSymbolSelected() {
        return this.mErrorBarPlaceLineSymbolRadioButton.isSelected();
    }
    
    public boolean isErrorBarPlaceBarSelected() {
        return this.mErrorBarPlaceBarRadioButton.isSelected();
    }
    
    public boolean isLineColorAutoAssignmentSelected() {
    	if (this.mAutoAssignmentCheckBox.isEnabled()) {
        	return this.mAutoAssignmentCheckBox.isSelected();
    	} else {
    		return false;
    	}
    }
    
    public void setLineColorAutoAssignmentEnabled(final boolean b) {
    	this.mAutoAssignmentCheckBox.setEnabled(b);
    }

    public void setDataName(String name) {
    	SGApplicationUtility.setDataName(this.mDataNameTextField, this.mDataNamePanel, name);
    }
    
    public String getDataName() {
    	return this.mDataNameTextField.getText();
    }
}
