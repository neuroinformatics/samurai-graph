/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SGNetCDFDataSetupWizardDialog.java
 *
 * Created on 2009/08/12, 14:12:54
 */

package jp.riken.brain.ni.samuraigraph.application;

import java.util.Map;

import javax.swing.JButton;

import jp.riken.brain.ni.samuraigraph.base.SGDataColumnInfoSet;
import jp.riken.brain.ni.samuraigraph.base.SGTextField;
import jp.riken.brain.ni.samuraigraph.data.SGDataSetupPanel;
import jp.riken.brain.ni.samuraigraph.data.SGDataUtility;
import jp.riken.brain.ni.samuraigraph.data.SGIDataInformationKeyConstants;
import jp.riken.brain.ni.samuraigraph.data.SGNetCDFFile;

/**
 * A wizard dialog to setup netCDF data when it is added.
 * 
 */
public class SGNetCDFDataSetupWizardDialog extends SGDataSetupWizardDialog {

    /**
     * Serial Version UID
     */
    private static final long serialVersionUID = 9030133791210821567L;
    
    /** Creates new form SGNetCDFDataSetupWizardDialog */
    public SGNetCDFDataSetupWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mPreviousButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNetCDFDataSetupPanel = new jp.riken.brain.ni.samuraigraph.data.SGNetCDFDataSetupPanel();
        mDataNamePanel = new javax.swing.JPanel();
        mDataNameLabel = new javax.swing.JLabel();
        mDataNameTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPreviousButton.setText("<Prev");
        mPreviousButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mPreviousButton);

        mNextButton.setText("Next>");
        mNextButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mNextButton);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mButtonPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(mNetCDFDataSetupPanel, gridBagConstraints);

        mDataNamePanel.setLayout(new java.awt.GridBagLayout());

        mDataNameLabel.setFont(new java.awt.Font("Dialog", 1, 12));
        mDataNameLabel.setText("Data Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameLabel, gridBagConstraints);

        mDataNameTextField.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        getContentPane().add(mDataNamePanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JLabel mDataNameLabel;
    private javax.swing.JPanel mDataNamePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mDataNameTextField;
    private jp.riken.brain.ni.samuraigraph.data.SGNetCDFDataSetupPanel mNetCDFDataSetupPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviousButton;
    // End of variables declaration//GEN-END:variables
        
	@Override
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }

	@Override
    protected JButton getNextButton() {
        return this.mNextButton;
    }

	@Override
    protected JButton getOKButton() {
        return this.mOKButton;
    }

	@Override
    protected JButton getPreviousButton() {
        return this.mPreviousButton;
    }

	@Override
	protected SGDataSetupPanel getDataSetupPanel() {
		return this.mNetCDFDataSetupPanel;
	}

	@Override
	protected SGTextField getDataNameTextField() {
		return this.mDataNameTextField;
	}

    /**
     * Sets the netCDF data.
     * 
     * @param ncFile
     *           the netCDF data
     * @param dataType
     *            type of data
     * @param colInfoSet
     *            data columns
     * @param infoMap
     *            a map of information
     * @param showDefault
     *            a flag whether to show default column type
     * @return true if succeeded
     */
    public boolean setData(SGNetCDFFile ncFile, String dataType,
            SGDataColumnInfoSet colInfoSet,
            Map<String, Object> infoMap, final boolean showDefault) {
        
    	// set the title
    	this.setupTitle(dataType);

        if (this.mNetCDFDataSetupPanel.setData(ncFile, dataType, colInfoSet,
        		infoMap, showDefault) == false) {
            return false;
        }
        
        // set data name
        String name = (String) infoMap.get(SGIDataInformationKeyConstants.KEY_DATA_NAME);
        this.setDataName(name);

        // set visible of next button
        if (SGDataUtility.isSXYTypeData(dataType)) {
            this.getNextButton().setVisible(true);
        } else {
            this.getNextButton().setVisible(false);
        }
        
        // enable the OK button
        this.getOKButton().setEnabled(true);
        this.getNextButton().setEnabled(true);

        // packs this dialog
        this.pack();

        return true;
    }
    
    /**
     * Returns whether stride of data arrays is available.
     * 
     * @return true if stride of data arrays is available
     */
    public boolean isStrideAvailable() {
    	return this.mNetCDFDataSetupPanel.isStrideAvailable();
    }
}
