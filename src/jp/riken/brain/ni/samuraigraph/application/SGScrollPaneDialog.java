package jp.riken.brain.ni.samuraigraph.application;

import java.awt.event.ActionEvent;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.URL;

import javax.swing.JScrollBar;
import javax.swing.JViewport;

import jp.riken.brain.ni.samuraigraph.base.SGDialog;

/**
 * A dialog with the scroll pane.
 * 
 */
public class SGScrollPaneDialog extends SGDialog 
    implements AdjustmentListener {

    /**
     * 
     */
    private static final long serialVersionUID = -6570199755712913714L;

    /** Creates new form SGUpgradeConfirmDialog */
    public SGScrollPaneDialog() {
        super();
        initComponents();
        this.initProperty();
    }

    /** Creates new form SGUpgradeConfirmDialog */
    public SGScrollPaneDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }

    /** Creates new form SGUpgradeConfirmDialog */
    public SGScrollPaneDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
    }


	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mPanel = new javax.swing.JPanel();
        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mMessageEditorPane = new javax.swing.JEditorPane();
        mDetailScrollPane = new javax.swing.JScrollPane();
        mDetailEditorPane = new javax.swing.JEditorPane();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPanel.setLayout(new java.awt.GridBagLayout());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(9, 6, 4, 6);
        mPanel.add(mButtonPanel, gridBagConstraints);

        mMessageEditorPane.setEditable(false);
        mMessageEditorPane.setOpaque(false);
        mMessageEditorPane.setPreferredSize(new java.awt.Dimension(304, 48));
        mPanel.add(mMessageEditorPane, new java.awt.GridBagConstraints());

        mDetailScrollPane.setPreferredSize(new java.awt.Dimension(304, 104));

        mDetailEditorPane.setEditable(false);
        mDetailEditorPane.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mDetailScrollPane.setViewportView(mDetailEditorPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mPanel.add(mDetailScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(mPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel mButtonPanel;
    protected jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    protected javax.swing.JEditorPane mDetailEditorPane;
    protected javax.swing.JScrollPane mDetailScrollPane;
    protected javax.swing.JEditorPane mMessageEditorPane;
    protected jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    protected javax.swing.JPanel mPanel;
    // End of variables declaration//GEN-END:variables



	private boolean mCanceledFlag = false;

    private boolean initProperty() {
        // this.mDetailEditorPane.setContentType("text/html");

        // add an event listener
        this.mOKButton.addActionListener(this);
        this.mCancelButton.addActionListener(this);
        
        this.getHorizontalScrollBar().addAdjustmentListener(this);
        this.getVerticalScrollBar().addAdjustmentListener(this);

        return true;
    }

    /**
     * 
     */
    public boolean setMessage(String msg) {
        this.mMessageEditorPane.setText(msg);
        return true;
    }

    /**
     * 
     * @return
     */
    public String getMessage() {
        return this.mMessageEditorPane.getText();
    }

    /**
     * 
     * @param t
     * @return
     */
    public boolean setDetailText(String t) {
        this.mDetailEditorPane.setText(t);
        return true;
    }

    /**
     * 
     * @param url
     * @return
     */
    public boolean setPage(URL url) {
        try {
            this.mDetailEditorPane.setPage(url);
        } catch (IOException ex) {
            return false;
        }
        return true;
    }

    /**
     * 
     * @return
     */
    public String getDetailText() {
        return this.mDetailEditorPane.getText();
    }

    /**
     * 
     * @return
     */
    public JScrollBar getVerticalScrollBar() {
        return this.mDetailScrollPane.getVerticalScrollBar();
    }

    /**
     * 
     * @return
     */
    public JScrollBar getHorizontalScrollBar() {
        return this.mDetailScrollPane.getHorizontalScrollBar();
    }

    /**
     * 
     * @return
     */
    public JViewport getViewport() {
        return this.mDetailScrollPane.getViewport();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
    	super.actionPerformed(e);
        String command = e.getActionCommand();
        if (command.equals(SGDialog.OK_BUTTON_TEXT)) {
            this.onOK();
        } else if (command.equals(SGDialog.CANCEL_BUTTON_TEXT)) {
            this.onCanceled();
        }
    }

    /**
     * 
     */
    public void windowClosing(final WindowEvent e) {
        super.windowClosing(e);
        this.onCanceled();
    }

    /**
     * 
     */
    protected boolean onOK() {
        this.mCanceledFlag = false;
        this.setVisible(false);
        this.notifyToListener(OK_BUTTON_TEXT);
        return true;
    }

    /**
     * 
     */
    protected boolean onCanceled() {
        this.mCanceledFlag = true;
        this.setVisible(false);
        this.notifyToListener(CANCEL_BUTTON_TEXT);
        return true;
    }

    /**
     * 
     * @return
     */
    public boolean isCanceled() {
        return this.mCanceledFlag;
    }

    /**
     * 
     * @param e
     */
    public void adjustmentValueChanged(AdjustmentEvent e) {
    }

    /**
     * Called when the escape key is typed.
     *
     */
    protected void onEscKeyTyped() {
        this.onCanceled();
    }

}
