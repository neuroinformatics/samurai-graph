package jp.riken.brain.ni.samuraigraph.application;

import java.awt.Frame;
import java.awt.event.ActionEvent;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.SwingUtilities;

/**
 * A wizard dialog to select the figure id.
 * 
 */
public class SGFigureIDSelectionWizardDialog extends SGWizardDialog {

    /**
     * Serial Version UID
     */
    private static final long serialVersionUID = 8059862285692736832L;

    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Figure ID";

    /**
     * Builds this dialog.
     * 
     * @param owner
     *              the owner of this dialog
     * @param modal
     *              true if this dialog is modal
     */
    public SGFigureIDSelectionWizardDialog(final Frame owner,
            final boolean modal) {
        super(owner, modal);
        this.initComponents();
        this.initProperty();
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mPreviousButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mNextButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPanel = new javax.swing.JPanel();
        mFigureIDLabel = new javax.swing.JLabel();
        mFigureIDComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mCreateRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mAddRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mDataNamePanel = new javax.swing.JPanel();
        mDataNameLabel = new javax.swing.JLabel();
        mDataNameTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPreviousButton.setText("<Prev");
        mPreviousButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mPreviousButton);

        mNextButton.setText("Next>");
        mNextButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mNextButton);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mPanel.setLayout(new java.awt.GridBagLayout());

        mFigureIDLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        mFigureIDLabel.setText("Figure ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 10, 5);
        mPanel.add(mFigureIDLabel, gridBagConstraints);

        mFigureIDComboBox.setPreferredSize(new java.awt.Dimension(80, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 20);
        mPanel.add(mFigureIDComboBox, gridBagConstraints);

        mCreateRadioButton.setText("Create a New Figure");
        mCreateRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        mPanel.add(mCreateRadioButton, gridBagConstraints);

        mAddRadioButton.setText("Add to an Existing Figure");
        mAddRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPanel.add(mAddRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 10);
        getContentPane().add(mPanel, gridBagConstraints);

        mDataNamePanel.setLayout(new java.awt.GridBagLayout());

        mDataNameLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mDataNameLabel.setText("Data Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameLabel, gridBagConstraints);

        mDataNameTextField.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        mDataNamePanel.add(mDataNameTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(mDataNamePanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mAddRadioButton;
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mCreateRadioButton;
    private javax.swing.JLabel mDataNameLabel;
    private javax.swing.JPanel mDataNamePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mDataNameTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mFigureIDComboBox;
    private javax.swing.JLabel mFigureIDLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mNextButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JPanel mPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviousButton;
    // End of variables declaration//GEN-END:variables
    
    
    /**
     * The figure ID for a new figure.
     */
    private int mNewFigureId = -1;
        
    /**
     * Initialize the property.
     */
    private void initProperty() {

        // set the title
        this.setTitle(SGFigureIDSelectionWizardDialog.TITLE);

        // create a button group
        ButtonGroup group = new ButtonGroup();
        group.add(this.mCreateRadioButton);
        group.add(this.mAddRadioButton);

        // add an action event listener
        this.mCreateRadioButton.addActionListener(this);
        this.mAddRadioButton.addActionListener(this);

        this.mDataNameTextField.setEditable(false);

    	SwingUtilities.invokeLater(new Runnable() {
    		public void run() {
    			setDataName(null);
    		}
    	});
    }

    /**
     * Set the array of figure ID numbers of existing figures.
     * @param idArray
     *                an array of figure ID numbers
     */
    public void setIDNumbers(int[] idArray) {
        
        // check the input
        if (idArray == null) {
            throw new IllegalArgumentException("idArray == null");
        }
        
        // create an array of items
        final int len = idArray.length;
        String[] items = new String[len];
        for (int ii = 0; ii < len; ii++) {
            items[ii] = Integer.toString(idArray[ii]);
        }
        
        // set the creation button selected by default
        if (len == 0) {
            // select the radio button
            this.mCreateRadioButton.setSelected(true);
            
            // enable and disable items
            this.enableItems(true);
            
            // disable the addition radio button
            this.mAddRadioButton.setEnabled(false);
        } else {

            // if both radio button is not selected, select the add radio button
            if (!this.mCreateRadioButton.isSelected() && !this.mAddRadioButton.isSelected()) {
                this.mAddRadioButton.setSelected(true);
                this.enableItems(false);
            }
            
            // disable the addition radio button
            this.mAddRadioButton.setEnabled(true);
        }

        // set to the combo box
        this.mFigureIDComboBox.removeAllItems();
        for (int ii = 0; ii < items.length; ii++) {
            this.mFigureIDComboBox.addItem(items[ii]);
        }

        // set to an attribute
        if (len == 0) {
            this.mNewFigureId = 1;
        } else {
            this.mNewFigureId = idArray[len - 1] + 1;
        }
    }
    
    /**
     * Enable and disable items.
     * 
     * @param b
     *          true for creation
     */
    private void enableItems(final boolean b) {        
        // disable items
        this.mFigureIDLabel.setEnabled(!b);
        this.mFigureIDComboBox.setEnabled(!b);
    }

    /**
     * Returns the selected ID number.
     * @return
     *         the selected ID number
     */
    public int getFigureID() {
        if (this.mCreateRadioButton.isSelected()) {
            return this.mNewFigureId;            
        } else {
            Object obj = this.mFigureIDComboBox.getSelectedItem();
            String str = (String) obj;
            Integer n = Integer.valueOf(str);
            return n.intValue();
        }
    }

    protected JButton getPreviousButton() {
        return this.mPreviousButton;
    }

    protected JButton getNextButton() {
        return this.mNextButton;
    }

    protected JButton getOKButton() {
        return this.mOKButton;
    }

    protected JButton getCancelButton() {
        return this.mCancelButton;
    }

    /**
     * Called when an action event is invoked.
     * 
     * @param e
     *          an action event
     */
    public void actionPerformed(ActionEvent e) {
        super.actionPerformed(e);
        Object source = e.getSource();
        if (source.equals(this.mCreateRadioButton)) {
            this.enableItems(true);
        } else if (source.equals(this.mAddRadioButton)) {
            this.enableItems(false);
        }
    }
    
    public void setOKButtonVisible(final boolean b) {
    	this.mOKButton.setVisible(b);
    }
    
    public void setDataName(String name) {
    	SGApplicationUtility.setDataName(this.mDataNameTextField, this.mDataNamePanel, name);
    }

    public String getDataName() {
    	return this.mDataNameTextField.getText();
    }
}
