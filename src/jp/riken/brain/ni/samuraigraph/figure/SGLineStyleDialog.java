package jp.riken.brain.ni.samuraigraph.figure;

import java.awt.Dialog;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.util.List;
import java.util.Map;

import javax.swing.JDialog;

import jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton;
import jp.riken.brain.ni.samuraigraph.base.SGDialog;
import jp.riken.brain.ni.samuraigraph.base.SGProperties;

/**
 * A dialog to set the line style.
 *
 */
public class SGLineStyleDialog extends SGDialog {

	private static final long serialVersionUID = 7044130346210006545L;
	
	public static final String TITLE = "Line Style";

	public SGLineStyleDialog(Dialog owner, boolean modal) {
		super(owner, modal);
		initComponents();
		this.initProperty();
	}

	public SGLineStyleDialog(Frame owner, boolean modal) {
		super(owner, modal);
		initComponents();
		this.initProperty();
	}

	private void initProperty() {
		this.setTitle(TITLE);
    	
    	this.mPanel.add(this.mLineStylePanel);
    	
    	this.mOKButton.addActionListener(this);
    	this.mCancelButton.addActionListener(this);
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mPanel = new javax.swing.JPanel();
        mlButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mPanel.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(mPanel, new java.awt.GridBagConstraints());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mlButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12));
        mlButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mlButtonPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JPanel mPanel;
    private javax.swing.JPanel mlButtonPanel;
    // End of variables declaration//GEN-END:variables

    // The panel to set the line style.
	private SGLineStylePanel mLineStylePanel = new SGLineStylePanel(this, this.mColorDialog);

	// A map of color map properties at initial state.
    private Map<String, SGProperties> mInitColorMapProperties = null;
    
    @Override
    public void actionPerformed(ActionEvent e) {
    	super.actionPerformed(e);
        String command = e.getActionCommand();
        if (OK_BUTTON_TEXT.equals(command)) {
            // notify to the listener
            this.notifyToListener(OK_BUTTON_TEXT);

            // hide this dialog
            this.setVisible(false);
        } else if (CANCEL_BUTTON_TEXT.equals(command)) {
        	this.mLineStylePanel.setColorMapProperties(this.mInitColorMapProperties);
            this.setVisible(false);
        }
	}

	@Override
	protected void onEscKeyTyped() {
        this.setVisible(false);
        this.setCloseOption(CANCEL_OPTION);
	}

    public List<SGLineStyle> getLineStyleList() {
//    	List<SGLineStyle> list = new ArrayList<SGLineStyle>();
//    	List<SGSingleLineStylePanel> pList = this.mLineStylePanel.getLineStylePanelList();
//    	for (SGSingleLineStylePanel p : pList) {
//    		list.add(p.getLineStyle());
//    	}
//    	return list;
    	return this.mLineStylePanel.getLineStyleList();
    }
    
    /**
     * Invoked when the color of a color selection button is changed.
     * 
     * @param b
     *          a button
     */
	@Override
    protected void buttonColorAssigned(SGColorSelectionButton b) {
		super.buttonColorAssigned(b);
		this.mLineStylePanel.buttonColorAssigned(b);
    }

	public String getSelectedColorMapName() {
		return this.mLineStylePanel.getSelectedColorMapName();
	}

	public void setSelectedColorMapName(String name) {
		this.mLineStylePanel.setSelectedColorMapName(name);
	}
	
    public void setColorMapProperties(Map<String, SGProperties> colorMapProperties) {
    	this.mLineStylePanel.setColorMapProperties(colorMapProperties);
    }

    /**
     * Adds a line style with the name.
     * 
     * @param name
     *           the name
     * @param lineStyle
     *           the line style
     */
    public void addLineStyle(String name, SGLineStyle lineStyle) {
    	this.mLineStylePanel.addLineStyle(name, lineStyle);
    }
    
    @Override
    public List<SGColorSelectionButton> getColorSelectionButtonsList() {
    	List<SGColorSelectionButton> list = super.getColorSelectionButtonsList();
    	list.addAll(this.mLineStylePanel.getColorSelectionButtonsList());
    	return list;
    }

    public SGProperties getColorMapProperties(final String name) {
    	return this.mLineStylePanel.getColorMapProperties(name);
    }

    public Map<String, SGProperties> getColorMapProperties() {
    	return this.mLineStylePanel.getColorMapProperties();
    }

    @Override
    public void setVisible(final boolean b) {
    	if (b) {
    		this.mInitColorMapProperties = this.mLineStylePanel.getColorMapProperties();
    	} else {
    		this.mInitColorMapProperties = null;
    	}
    	super.setVisible(b);
    }

    public boolean isLineColorAutoAssigned() {
    	return this.mLineStylePanel.isLineColorAutoAssigned();
    }

    public void setLineColorAutoAssigned(final boolean b) {
    	this.mLineStylePanel.setLineColorAutoAssigned(b);
    }
}
