package jp.riken.brain.ni.samuraigraph.figure.java2d;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;

import jp.riken.brain.ni.samuraigraph.base.SGAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGIConstants;
import jp.riken.brain.ni.samuraigraph.base.SGIDrawingElementConstants;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGITwoAxesDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyDialog;
import jp.riken.brain.ni.samuraigraph.base.SGSpinner;
import jp.riken.brain.ni.samuraigraph.base.SGTextField;
import jp.riken.brain.ni.samuraigraph.base.SGTransparentPaint;
import jp.riken.brain.ni.samuraigraph.base.SGTwoAxesSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;
import jp.riken.brain.ni.samuraigraph.figure.SGILegendConstants;
import jp.riken.brain.ni.samuraigraph.figure.SGPaintConstants;

/**
 * A dialog to set the properties of legend.
 */
public class SGLegendDialog extends SGPropertyDialog implements
        SGILegendConstants, SGIDrawingElementConstants, SGITwoAxesDialog {

    // serialVersionUID
    private static final long serialVersionUID = -54582360939741917L;

    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Legend Properties";

    /** Creates new form SGLegendDialog */
    public SGLegendDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.initialize();
        this.pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mLabelSpace1 = new javax.swing.JLabel();
        mLegendPanel = new javax.swing.JPanel();
        mLegendVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mFrameVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mFrameLabel = new javax.swing.JLabel();
        mFrameLineWidthLabel = new javax.swing.JLabel();
        mFrameLineColorLabel = new javax.swing.JLabel();
        mBackgroundColorLabel = new javax.swing.JLabel();
        mFrameLineWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mFrameLineColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mFrameSeparator = new javax.swing.JSeparator();
        mBackgroundColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mFontFamilyLabel = new javax.swing.JLabel();
        mFontSizeLabel = new javax.swing.JLabel();
        mStringColorLabel = new javax.swing.JLabel();
        mFontNameComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mFontSizeSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mFontStyleComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mStringColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mStringLabel = new javax.swing.JLabel();
        mStringSeparator = new javax.swing.JSeparator();
        mLeftSpaceLabel = new javax.swing.JLabel();
        mRightSpaceLabel = new javax.swing.JLabel();
        mBackgroundLabel = new javax.swing.JLabel();
        mLocationLabel = new javax.swing.JLabel();
        mBackgroundSeparator = new javax.swing.JSeparator();
        mXValueLabel = new javax.swing.JLabel();
        mYValueLabel = new javax.swing.JLabel();
        mFontStyleLabel = new javax.swing.JLabel();
        mLocationSeparator = new javax.swing.JSeparator();
        mSpanSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mSpanLabel = new javax.swing.JLabel();
        mSymbolLabel = new javax.swing.JLabel();
        mDataSeparator = new javax.swing.JSeparator();
        mBackgroundTransparencyPanel = new javax.swing.JPanel();
        mBackgroundTransparencyLabel = new javax.swing.JLabel();
        mBackgroundTransparencySpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mXPanel = new javax.swing.JPanel();
        mXValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mXDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mYPanel = new javax.swing.JPanel();
        mYValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mlButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mHeadPanel = new javax.swing.JPanel();

        mLabelSpace1.setText("  ");

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mLegendPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mLegendPanel.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        mLegendPanel.setLayout(new java.awt.GridBagLayout());

        mLegendVisibleCheckBox.setText("Visible");
        mLegendVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mLegendPanel.add(mLegendVisibleCheckBox, gridBagConstraints);

        mFrameVisibleCheckBox.setText("Visible");
        mFrameVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        mLegendPanel.add(mFrameVisibleCheckBox, gridBagConstraints);

        mFrameLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mFrameLabel.setText("Frame");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mFrameLabel, gridBagConstraints);

        mFrameLineWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFrameLineWidthLabel.setText("Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 10, 5);
        mLegendPanel.add(mFrameLineWidthLabel, gridBagConstraints);

        mFrameLineColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFrameLineColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 10, 5);
        mLegendPanel.add(mFrameLineColorLabel, gridBagConstraints);

        mBackgroundColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBackgroundColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 10, 5);
        mLegendPanel.add(mBackgroundColorLabel, gridBagConstraints);

        mFrameLineWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFrameLineWidthSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mLegendPanel.add(mFrameLineWidthSpinner, gridBagConstraints);

        mFrameLineColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mLegendPanel.add(mFrameLineColorButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 50, 5, 5);
        mLegendPanel.add(mFrameSeparator, gridBagConstraints);

        mBackgroundColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mLegendPanel.add(mBackgroundColorButton, gridBagConstraints);

        mFontFamilyLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontFamilyLabel.setText("Family");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mLegendPanel.add(mFontFamilyLabel, gridBagConstraints);

        mFontSizeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontSizeLabel.setText("Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mLegendPanel.add(mFontSizeLabel, gridBagConstraints);

        mStringColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mStringColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        mLegendPanel.add(mStringColorLabel, gridBagConstraints);

        mFontNameComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mFontNameComboBox, gridBagConstraints);

        mFontSizeSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontSizeSpinner.setMinimumSize(new java.awt.Dimension(25, 20));
        mFontSizeSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mFontSizeSpinner, gridBagConstraints);

        mFontStyleComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mFontStyleComboBox, gridBagConstraints);

        mStringColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mStringColorButton, gridBagConstraints);

        mStringLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mStringLabel.setText("String");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mStringLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 45, 5, 5);
        mLegendPanel.add(mStringSeparator, gridBagConstraints);

        mLeftSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mLegendPanel.add(mLeftSpaceLabel, gridBagConstraints);

        mRightSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        mLegendPanel.add(mRightSpaceLabel, gridBagConstraints);

        mBackgroundLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mBackgroundLabel.setText("Background");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mBackgroundLabel, gridBagConstraints);

        mLocationLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mLocationLabel.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mLocationLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 5);
        mLegendPanel.add(mBackgroundSeparator, gridBagConstraints);

        mXValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mXValueLabel.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mXValueLabel, gridBagConstraints);

        mYValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYValueLabel.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mYValueLabel, gridBagConstraints);

        mFontStyleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontStyleLabel.setText("Style");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mLegendPanel.add(mFontStyleLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        mLegendPanel.add(mLocationSeparator, gridBagConstraints);

        mSpanSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSpanSpinner.setMinimumSize(new java.awt.Dimension(25, 20));
        mSpanSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mLegendPanel.add(mSpanSpinner, gridBagConstraints);

        mSpanLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSpanLabel.setText("Span");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 10, 5);
        mLegendPanel.add(mSpanLabel, gridBagConstraints);

        mSymbolLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mSymbolLabel.setText("Symbol ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mSymbolLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 60, 5, 5);
        mLegendPanel.add(mDataSeparator, gridBagConstraints);

        mBackgroundTransparencyPanel.setLayout(new java.awt.GridBagLayout());

        mBackgroundTransparencyLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBackgroundTransparencyLabel.setText("Transparency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mBackgroundTransparencyPanel.add(mBackgroundTransparencyLabel, gridBagConstraints);

        mBackgroundTransparencySpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBackgroundTransparencySpinner.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        mBackgroundTransparencyPanel.add(mBackgroundTransparencySpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mLegendPanel.add(mBackgroundTransparencyPanel, gridBagConstraints);

        mXPanel.setLayout(new java.awt.GridBagLayout());

        mXValueTextField.setColumns(6);
        mXValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXPanel.add(mXValueTextField, gridBagConstraints);

        mXDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXPanel.add(mXDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mXPanel, gridBagConstraints);

        mYPanel.setLayout(new java.awt.GridBagLayout());

        mYValueTextField.setColumns(6);
        mYValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYPanel.add(mYValueTextField, gridBagConstraints);

        mYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYPanel.add(mYDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLegendPanel.add(mYPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(mLegendPanel, gridBagConstraints);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mlButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mlButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mlButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mlButtonPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(mHeadPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mBackgroundColorButton;
    private javax.swing.JLabel mBackgroundColorLabel;
    private javax.swing.JLabel mBackgroundLabel;
    private javax.swing.JSeparator mBackgroundSeparator;
    private javax.swing.JLabel mBackgroundTransparencyLabel;
    private javax.swing.JPanel mBackgroundTransparencyPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mBackgroundTransparencySpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JSeparator mDataSeparator;
    private javax.swing.JLabel mFontFamilyLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mFontNameComboBox;
    private javax.swing.JLabel mFontSizeLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mFontSizeSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mFontStyleComboBox;
    private javax.swing.JLabel mFontStyleLabel;
    private javax.swing.JLabel mFrameLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mFrameLineColorButton;
    private javax.swing.JLabel mFrameLineColorLabel;
    private javax.swing.JLabel mFrameLineWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mFrameLineWidthSpinner;
    private javax.swing.JSeparator mFrameSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mFrameVisibleCheckBox;
    private javax.swing.JPanel mHeadPanel;
    private javax.swing.JLabel mLabelSpace1;
    private javax.swing.JLabel mLeftSpaceLabel;
    private javax.swing.JPanel mLegendPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mLegendVisibleCheckBox;
    private javax.swing.JLabel mLocationLabel;
    private javax.swing.JSeparator mLocationSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    private javax.swing.JLabel mRightSpaceLabel;
    private javax.swing.JLabel mSpanLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mSpanSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mStringColorButton;
    private javax.swing.JLabel mStringColorLabel;
    private javax.swing.JLabel mStringLabel;
    private javax.swing.JSeparator mStringSeparator;
    private javax.swing.JLabel mSymbolLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mXDateButton;
    private javax.swing.JPanel mXPanel;
    private javax.swing.JLabel mXValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mXValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mYDateButton;
    private javax.swing.JPanel mYPanel;
    private javax.swing.JLabel mYValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mYValueTextField;
    private javax.swing.JPanel mlButtonPanel;
    // End of variables declaration//GEN-END:variables
    
    private SGTwoAxesSelectionPanel mAxisPanel = new SGTwoAxesSelectionPanel();

    protected SGComponentGroup mDateXComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateYComponentGroup = new SGComponentGroup();

    private boolean initProperty() {
    	
    	this.mHeadPanel.add(this.mAxisPanel);
    	this.mAxisPanel.addAxisSelectionListener(this);

        // set the title
        this.setTitle(SGLegendDialog.TITLE);

        // set up the combo boxes
        this.initFontFamilyNameComboBox(this.mFontNameComboBox);
        this.initFontStyleComboBox(this.mFontStyleComboBox);

        //
        // set the spinner model
        //

        // axis line width
        this.mFrameLineWidthSpinner.initProperties(
                getLineWidthSpinnerNumberModel(), LINE_WIDTH_UNIT,
                LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);

        // font size
        this.mFontSizeSpinner.initProperties(getFontSizeSpinnerNumberModel(),
                FONT_SIZE_UNIT, FONT_SIZE_FRAC_DIGIT_MIN, FONT_SIZE_FRAC_DIGIT_MAX);

        // data width
        this.mSpanSpinner.initProperties(new SpinnerNumberModel(1.0,
                SYMBOL_SPAN_MIN, SYMBOL_SPAN_MAX, SYMBOL_SPAN_STEP),
                SYMBOL_SPAN_UNIT, SYMBOL_SPAN_FRAC_DIFIT_MIN, SYMBOL_SPAN_FRAC_DIFIT_MAX);
        
        // background transparency
        this.mBackgroundTransparencySpinner.initProperties(
                new SpinnerNumberModel(100.0,
                        (float)SGPaintConstants.TRANSPARENCY_MIN,
                        (float)SGPaintConstants.TRANSPARENCY_MAX,
                        (float)SGPaintConstants.TRANSPARENCY_STEP),
                SGIConstants.percent,
                SGPaintConstants.TRANSPARENCY_FRAC_DIGIT_MIN,
                SGPaintConstants.TRANSPARENCY_FRAC_DIGIT_MAX);

        // add an action event listener
        this.mLegendVisibleCheckBox.addActionListener(this);
        this.mFrameVisibleCheckBox.addActionListener(this);
        this.mFontNameComboBox.addActionListener(this);
        this.mFontStyleComboBox.addActionListener(this);
        this.mAxisPanel.addActionListener(this);
        this.mXDateButton.addActionListener(this);
        this.mYDateButton.addActionListener(this);

        this.mBackgroundTransparencySpinner.addChangeListener(this);

        // set the name
        this.mXValueTextField.setDescription("Location-> X");
        this.mYValueTextField.setDescription("Location-> Y");
        this.mFrameLineWidthSpinner.setDescription("Frame-> Width");
        this.mFontSizeSpinner.setDescription("String-> Size");
        this.mSpanSpinner.setDescription("Symbol-> Span");
        this.mBackgroundTransparencySpinner.setDescription("Background-> Transparency");

        SGComponentGroupElement[] frameComponents = {
                new SGComponentGroupElement(this.mFrameLineWidthLabel),
                new SGComponentGroupElement(this.mFrameLineWidthSpinner),
                new SGComponentGroupElement(this.mFrameLineColorLabel),
                new SGComponentGroupElement(this.mFrameLineColorButton) };

        SGComponentGroupElement[] backgroundComponents = {
                new SGComponentGroupElement(this.mBackgroundColorLabel),
                new SGComponentGroupElement(this.mBackgroundColorButton) };

        SGComponentGroupElement[] spanComponents = {
                new SGComponentGroupElement(this.mSpanLabel),
                new SGComponentGroupElement(this.mSpanSpinner) };

        SGComponentGroupElement[] dateXComponents = {
                new SGComponentGroupElement(this.mXDateButton) };

        SGComponentGroupElement[] dateYComponents = {
                new SGComponentGroupElement(this.mYDateButton) };

        SGComponentGroupElement[] allComponents = {

                // Location
                new SGComponentGroupElement(this.mLocationLabel),
                new SGComponentGroupElement(this.mXValueLabel),
                new SGComponentGroupElement(this.mXValueTextField),
                new SGComponentGroupElement(this.mYValueLabel),
                new SGComponentGroupElement(this.mYValueTextField),
                dateXComponents[0],
                dateYComponents[0],

                // String
                new SGComponentGroupElement(this.mStringLabel),

                new SGComponentGroupElement(this.mFontFamilyLabel),
                new SGComponentGroupElement(this.mFontStyleLabel),
                new SGComponentGroupElement(this.mFontNameComboBox),
                new SGComponentGroupElement(this.mFontStyleComboBox),
                new SGComponentGroupElement(this.mFontSizeLabel),
                new SGComponentGroupElement(this.mFontSizeSpinner),
                new SGComponentGroupElement(this.mStringColorLabel),
                new SGComponentGroupElement(this.mStringColorButton),

                // Frame
                new SGComponentGroupElement(this.mFrameLabel),
                new SGComponentGroupElement(this.mFrameVisibleCheckBox),

                frameComponents[0],
                frameComponents[1],
                frameComponents[2],
                frameComponents[3],

                // Background
                new SGComponentGroupElement(this.mBackgroundLabel),
                new SGComponentGroupElement(this.mBackgroundTransparencyLabel),
                new SGComponentGroupElement(this.mBackgroundTransparencySpinner),

                backgroundComponents[0], backgroundComponents[1],

                // Data
                new SGComponentGroupElement(this.mSymbolLabel),

                spanComponents[0], spanComponents[1] };

        this.mVisibleComponentGroup.addElement(allComponents);
        this.mFrameVisibleComponentGroup.addElement(frameComponents);
        this.mBackgroundComponentGroup.addElement(backgroundComponents);
        this.mDateXComponentGroup.addElement(dateXComponents);
        this.mDateYComponentGroup.addElement(dateYComponents);
        
        // sets the calendar icon
        this.setCalendarIcon(this.mXDateButton);
        this.setCalendarIcon(this.mYDateButton);

        return true;
    }

    /**
     * 
     */
    private SGComponentGroup mVisibleComponentGroup = new SGComponentGroup();

    /**
     * 
     */
    private SGComponentGroup mFrameVisibleComponentGroup = new SGComponentGroup();

    /**
     * 
     */
    private SGComponentGroup mBackgroundComponentGroup = new SGComponentGroup();

    // /**
    // *
    // *
    // */
    // public void dispose()
    // {
    // if( this.mAxisPanel!=null )
    // {
    // this.mAxisPanel.dispose();
    // this.mAxisPanel = null;
    // }
    //
    // this.mVisibleComponentGroup.dispose();
    // this.mVisibleComponentGroup = null;
    //
    // this.mFrameVisibleComponentGroup.dispose();
    // this.mFrameVisibleComponentGroup = null;
    //		
    // this.mBackgroundComponentGroup.dispose();
    // this.mBackgroundComponentGroup = null;
    //
    // super.dispose();
    // }

    /**
     * 
     */
    @Override
    public void actionPerformed(final ActionEvent e) {
        super.actionPerformed(e);
        Object source = e.getSource();
        if (source.equals(this.mLegendVisibleCheckBox)) {
            // this.mVisibleComponentGroup.setEnabled(
            // this.mLegendVisibleCheckBox.isSelected() );
            this.setLegendVisible(this.mLegendVisibleCheckBox.getSelected());
        } else if (source.equals(this.mFrameVisibleCheckBox)) {
            // this.mFrameVisibleComponentGroup.setEnabled(
            // this.mFrameVisibleCheckBox.isSelected() );
            this.setFrameComponentsEnabled(this.mFrameVisibleCheckBox
                    .getSelected());
        } else if (source.equals(this.mXDateButton)) {
    		this.onDateButtonPressed(this.mXValueTextField);
    	} else if (source.equals(this.mYDateButton)) {
    		this.onDateButtonPressed(this.mYValueTextField);
    	}
    }
    
    @Override
    public void stateChanged(final ChangeEvent e) {
        Object source = e.getSource();
        if (source==this.mBackgroundTransparencySpinner) {
            if (null!=this.getBackgroundTransparency()) {
                this.setBackgroundTransparentComponentEnabled(Integer.valueOf(this.getBackgroundTransparency().intValue()));
            }
        }
        super.stateChanged(e);
    }
    
    /**
     * 
     * @param b
     * @return
     */
    private boolean setAllLegendComponentsEnabled(final Boolean flag) {
        boolean b = true;
        if (flag != null) {
            b = flag.booleanValue();
        }

        // // Location
        // this.mLocationLabel.setEnabled(b);
        // this.mXValueLabel.setEnabled(b);
        // this.mXValueTextField.setEnabled(b);
        // this.mYValueLabel.setEnabled(b);
        // this.mYValueTextField.setEnabled(b);
        //		
        // // String
        // this.mStringLabel.setEnabled(b);
        // this.setStringComponentsEnabled(b);
        //
        // // Frame
        // this.mFrameLabel.setEnabled(b);
        // this.mFrameVisibleCheckBox.setEnabled(b);
        // final Boolean frameVisible =
        // this.mFrameVisibleCheckBox.getSelected();
        // this.setFrameVisible( frameVisible );
        //
        //
        // // Background
        // this.mBackgroundLabel.setEnabled(b);
        // this.mBackgroundTransparentCheckBox.setEnabled(b);
        // final Boolean transparent =
        // this.mBackgroundTransparentCheckBox.getSelected();
        // this.setBackgroundComponentsEnabled( transparent );

        this.mVisibleComponentGroup.setEnabled(b);

        return true;
    }

    // /**
    // *
    // * @param b
    // * @return
    // */
    // private boolean setStringComponentsEnabled( final boolean b )
    // {
    // this.mFontFamilyLabel.setEnabled(b);
    // this.mFontStyleLabel.setEnabled(b);
    // this.mFontNameComboBox.setEnabled(b);
    // this.mFontStyleComboBox.setEnabled(b);
    // this.mFontSizeLabel.setEnabled(b);
    // this.mFontSizeSpinner.setEnabled(b);
    // this.mStringColorLabel.setEnabled(b);
    // this.mStringColorButton.setEnabled(b);
    //
    // return true;
    // }

    /**
     * 
     * @param b
     * @return
     */
    private boolean setFrameComponentsEnabled(final Boolean frameVisible) {
        // boolean b;
        // if( frameVisible==null )
        // {
        // b = false;
        // }
        // else
        // {
        // final boolean fVisible = frameVisible.booleanValue();
        //
        // Boolean legendVisible = this.getLegendVisible();
        // boolean lVisible;
        // if( legendVisible==null )
        // {
        // lVisible = false;
        // }
        // else
        // {
        // lVisible = legendVisible.booleanValue();
        // }
        //
        // b = fVisible && lVisible;
        // }

        boolean b = true;
        if (frameVisible != null) {
            b = frameVisible.booleanValue();
        }

        this.setFrameComponentsEnabled(b);

        return true;
    }

    /**
     * 
     * @param b
     * @return
     */
    private boolean setFrameComponentsEnabled(final boolean b) {
        this.mFrameVisibleComponentGroup.setEnabled(b);
        return true;
    }

    /**
     * 
     */
    private boolean setBackgroundComponentsEnabled(final boolean b) {
        this.mBackgroundComponentGroup.setEnabled(b);
        return true;
    }

    /**
     * 
     * @return
     */
    public Number getXValue() {
        return this.getNumber(this.mXValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getYValue() {
        return this.getNumber(this.mYValueTextField);
    }

    /**
     * 
     */
    public Boolean getLegendVisible() {
        return this.mLegendVisibleCheckBox.getSelected();
    }

    /**
     * 
     */
    public Boolean getFrameVisible() {
        return this.mFrameVisibleCheckBox.getSelected();
    }

    /**
     * 
     */
    public Number getFrameLineWidth() {
        return this.mFrameLineWidthSpinner.getNumber();
    }

    /**
     * 
     */
    public Color getFrameLineColor() {
        return this.mFrameLineColorButton.getColor();
    }

    /**
     * 
     */
    public Color getBackgroundColor() {
        return this.mBackgroundColorButton.getColor();
    }

    /**
     * 
     */
    public Number getFontSize() {
        return this.mFontSizeSpinner.getNumber();
    }

    /**
     * 
     */
    public String getFontName() {
        return (String) this.mFontNameComboBox.getSelectedItem();
    }

    /**
     * 
     */
    public Integer getFontStyle() {
        final String item = (String) this.mFontStyleComboBox.getSelectedItem();
        return SGUtilityText.getFontStyle(item);
    }

    /**
     * 
     */
    public Color getTextColor() {
        return this.mStringColorButton.getColor();
    }

    /**
     * 
     * @return
     */
    public Number getBackgroundTransparency() {
        return this.mBackgroundTransparencySpinner.getNumber();
    }

    /**
     * 
     * @return
     */
    public Number getSymbolSpan() {
        return this.mSpanSpinner.getNumber();
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setXValue(final Object obj) {
        return this.setValue(this.mXValueTextField, obj);
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setYValue(final Object obj) {
        return this.setValue(this.mYValueTextField, obj);
    }

    /**
     * 
     */
    public void setLegendVisible(final Boolean b) {
        this.mLegendVisibleCheckBox.setSelected(b);
        this.setAllLegendComponentsEnabled(b);
    }

    /**
     * 
     */
    public void setFrameVisible(final Boolean b) {
        this.mFrameVisibleCheckBox.setSelected(b);
        this.setFrameComponentsEnabled(b);
    }

    /**
     * 
     */
    public boolean setFrameLineWidth(final Object value) {
        return this.setValue(this.mFrameLineWidthSpinner, value);
    }

    /**
     * 
     */
    public void setFrameLineColor(final Color cl) {
        this.mFrameLineColorButton.setColor(cl);
    }

    /**
     * 
     */
    public void setBackgroundColor(final Color cl) {
        Color color;
        if (cl != null) {
            color = new Color(cl.getRed(), cl.getGreen(), cl.getBlue(), 255);
        } else {
        	color = null;
        }
        this.mBackgroundColorButton.setColor(color);
    }

    /**
     * 
     */
    public boolean setFontSize(final Object value) {
        return this.setValue(this.mFontSizeSpinner, value);
    }

    /**
     * Sets the font name.
     * 
     * @param name
     *           the font name to set
     * @return true if succeeded
     */
    public boolean setFontName(final String name) {
    	final String fName = SGUtility.findFontFamilyName(name);
        this.mFontNameComboBox.setSelectedItem(fName);
        return true;
    }

    /**
     * 
     */
    public boolean setFontStyle(final Integer style) {
        String styleName = null;
        if (style != null) {
            styleName = SGUtilityText.getFontStyleName(style.intValue());
        }
        this.mFontStyleComboBox.setSelectedItem(styleName);

        return true;
    }

    /**
     * 
     */
    public void setTextColor(final Color cl) {
        this.mStringColorButton.setColor(cl);
    }

    /**
     * 
     * @param flag
     * @return
     */
    public boolean setBackgroundTransparent(final Integer alpha) {
    	if (alpha != null) {
            setBackgroundTransparentComponentEnabled(alpha);
            return this.setValue(this.mBackgroundTransparencySpinner, Float.valueOf(alpha.floatValue()));
    	} else {
            return this.setValue(this.mBackgroundTransparencySpinner, null);
    	}
    }
    
    private boolean setBackgroundTransparentComponentEnabled(final Integer alpha) {
        if (alpha.equals(Integer.valueOf(SGTransparentPaint.ALL_TRANSPARENT_VALUE))) {
            return setBackgroundComponentsEnabled(Boolean.FALSE.booleanValue());
        } else {
            return setBackgroundComponentsEnabled(Boolean.TRUE.booleanValue());
        }
    }

    /**
     * 
     * @param value
     * @return
     */
    public boolean setSymbolSpan(final Object value) {
        return this.setValue(this.mSpanSpinner, value);
    }

    /**
     * 
     */
    public List<SGColorSelectionButton> getColorSelectionButtonsList() {
        List<SGColorSelectionButton> list = new ArrayList<SGColorSelectionButton>();

        list.add(this.mBackgroundColorButton);
        list.add(this.mFrameLineColorButton);
        list.add(this.mStringColorButton);

        return list;
    }

    /**
     * 
     */
    public List getTextFieldComponentsList() {
        final List list = this.getFormattedTextFieldsListFromSpinners();
        list.addAll(this.getAxisNumberTextFieldList());
        return list;
    }

    /**
     * Returns a list of text fields to set number.
     * 
     * @return
     */
    @Override
    public List<SGTextField> getAxisNumberTextFieldList() {
        final List<SGTextField> list = new ArrayList<SGTextField>();
        list.add(this.mXValueTextField);
        list.add(this.mYValueTextField);
        return list;
    }

    /**
     * 
     */
    @Override
    public List<SGSpinner> getSpinnerList() {
        List<SGSpinner> list = new ArrayList<SGSpinner>();
        list.add(this.mFontSizeSpinner);
        list.add(this.mFrameLineWidthSpinner);
        list.add(this.mSpanSpinner);
        list.add(this.mBackgroundTransparencySpinner);
        return list;
    }

    /**
     * 
     */
    public boolean setDialogProperty() {
        List<SGIPropertyDialogObserver> list = this.mPropertyDialogObserverList;
        
        // select axis panel
        selectAxisPanel(this, this.mAxisPanel, list);

        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, list);

        SGILegendDialogObserver legend0 = (SGILegendDialogObserver) list.get(0);

        final double xValue0 = legend0.getXValue();
        final double yValue0 = legend0.getYValue();
        final String fontName0 = legend0.getFontName();
        final float fontSize0 = legend0.getFontSize(pt);
        final int fontStyle0 = legend0.getFontStyle();
        final Color stringColor0 = legend0.getFontColor();
        final float frameLineWidth0 = legend0.getFrameLineWidth(pt);
        final Color frameLineColor0 = legend0.getFrameColor();
        final Color bgColor0 = legend0.getBackgroundColor();
        final boolean legendVisible0 = legend0.isVisible();
        final boolean frameLineVisible0 = legend0.isFrameVisible();
        final int bgTransparent0 = legend0.getBackgroundTransparency();
        final float dataWidth0 = legend0.getSymbolSpan(cm);

        Double xValue = Double.valueOf(xValue0);
        Double yValue = Double.valueOf(yValue0);
        String fontName = fontName0;
        Float fontSize = Float.valueOf(fontSize0);
        Integer fontStyle = Integer.valueOf(fontStyle0);
        Color stringColor = stringColor0;
        Float frameLineWidth = Float.valueOf(frameLineWidth0);
        Color frameLineColor = frameLineColor0;
        Color bgColor = bgColor0;
        Boolean legendVisible = Boolean.valueOf(legendVisible0);
        Boolean frameLineVisible = Boolean.valueOf(frameLineVisible0);
        Integer bgTransparent = Integer.valueOf(bgTransparent0);
        Float dataWidth = Float.valueOf(dataWidth0);

        if (list.size() > 1) {
            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final double xValue1 = legend1.getXValue();
                if (xValue0 != xValue1) {
                    xValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final double yValue1 = legend1.getYValue();
                if (yValue0 != yValue1) {
                    yValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final String fontName1 = legend1.getFontName();
                if (fontName0.equals(fontName1) == false) {
                    fontName = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final float fontSize1 = legend1.getFontSize(pt);
                if (fontSize0 != fontSize1) {
                    fontSize = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final int fontStyle1 = legend1.getFontStyle();
                if (fontStyle0 != fontStyle1) {
                    fontStyle = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final Color stringColor1 = legend1.getFontColor();
                if (stringColor.equals(stringColor1) == false) {
                    stringColor = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final float frameLineWidth1 = legend1.getFrameLineWidth(pt);
                if (frameLineWidth0 != frameLineWidth1) {
                    frameLineWidth = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final Color frameLineColor1 = legend1.getFrameColor();
                if (frameLineColor.equals(frameLineColor1) == false) {
                    frameLineColor = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final Color bgColor1 = legend1.getBackgroundColor();
                if (bgColor.equals(bgColor1) == false) {
                    bgColor = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final boolean legendVisible1 = legend1.isVisible();
                if (legendVisible0 != legendVisible1) {
                    legendVisible = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final boolean frameLineVisible1 = legend1.isFrameVisible();
                if (frameLineVisible0 != frameLineVisible1) {
                    frameLineVisible = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final int bgTransparent1 = legend1.getBackgroundTransparency();
                if (bgTransparent0 != bgTransparent1) {
                    bgTransparent = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILegendDialogObserver legend1 = (SGILegendDialogObserver) list
                        .get(ii);

                final float dataWidth1 = legend1.getSymbolSpan(cm);
                if (dataWidth0 != dataWidth1) {
                    dataWidth = null;
                    break;
                }
            }

        }

        // location
        this.setXValue(xValue);
        this.setYValue(yValue);

        //
        this.setFrameVisible(frameLineVisible);
        this.setFrameLineWidth(frameLineWidth);
        this.setFrameLineColor(frameLineColor);

        //
        this.setFontName(fontName);
        this.setFontSize(fontSize);
        this.setFontStyle(fontStyle);
        this.setTextColor(stringColor);

        //
        this.setBackgroundColor(bgColor);
        this.setBackgroundTransparent(bgTransparent);

        //
        this.setLegendVisible(legendVisible);

        //
        this.setSymbolSpan(dataWidth);

//        this.setColorButtonBorder(true);

        return true;
    }

    /**
     * 
     */
    public boolean setPropertiesToObserver(SGIPropertyDialogObserver l) {

        SGILegendDialogObserver legend = (SGILegendDialogObserver) l;

        // get values
        final int xConfig = this.mAxisPanel.getXAxisLocation();
        final int yConfig = this.mAxisPanel.getYAxisLocation();
        final Number xValue = this.getXValue();
        final Number yValue = this.getYValue();
        final Boolean visible = this.getLegendVisible();
        final Boolean frameVisible = this.getFrameVisible();
        final Number frameLineWidth = this.getFrameLineWidth();
        final Color frameLineColor = this.getFrameLineColor();
        final Color bgColor = this.getBackgroundColor();
        final Number bgTransparency = this.getBackgroundTransparency();
        final String fontName = this.getFontName();
        final Number fontSize = this.getFontSize();
        final Integer fontStyle = this.getFontStyle();
        final Color textColor = this.getTextColor();
        final Number dataWidth = this.getSymbolSpan();

        // check values
        ArrayList list = new ArrayList();
        if (legend.hasValidXAxisValue(xConfig, xValue) == false) {
            list.add("X");
        }
        if (legend.hasValidYAxisValue(yConfig, yValue) == false) {
            list.add("Y");
        }
        if (list.size() != 0) {
            StringBuffer sb = new StringBuffer();
            sb.append(ERRMSG_AXIS_VALUE_INVALID);
            sb.append(":\n");
            for (int ii = 0; ii < list.size(); ii++) {
                String str = (String) list.get(ii);
                sb.append('-');
                sb.append(str);
                sb.append('\n');
            }
            this.setInputErrorMessage(sb.toString());
            return false;
        }

        // set the related axes
        if (xConfig != -1) {
            legend.setXAxisLocation(xConfig);
        }

        if (yConfig != -1) {
            legend.setYAxisLocation(yConfig);
        }

        // x value
        if (xValue != null) {
            legend.setXValue(xValue.doubleValue());
        }

        // y value
        if (yValue != null) {
            legend.setYValue(yValue.doubleValue());
        }

        // visible
        if (visible != null) {
            legend.setVisible(visible.booleanValue());
        }

        // frame
        if (frameVisible != null) {
            legend.setFrameVisible(frameVisible.booleanValue());
        }

        if (frameLineWidth != null) {
            legend.setFrameLineWidth(frameLineWidth.floatValue(), pt);
        }

        if (frameLineColor != null) {
            legend.setFrameLineColor(frameLineColor);
        }

        if (bgColor != null) {
            legend.setBackgroundColor(bgColor);
        }

        if (bgTransparency != null) {
            legend.setBackgroundTransparent(bgTransparency.intValue());
        }

        // font
        if (fontName != null) {
            legend.setFontName(fontName);
        }

        if (fontSize != null) {
            legend.setFontSize(fontSize.floatValue(), pt);
        }

        if (fontStyle != null) {
            legend.setFontStyle(fontStyle);
        }

        if (textColor != null) {
            legend.setFontColor(textColor);
        }

        // data
        if (dataWidth != null) {
            legend.setSymbolSpan(dataWidth.floatValue(), cm);
        }

        return true;

    }

    /**
     * Returns the OK button.
     * @return
     *        the OK button
     */
    protected JButton getOKButton() {
        return this.mOKButton;
    }
    
    /**
     * Returns the cancel button.
     * @return
     *        the cancel button
     */
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    /**
     * Returns the preview button.
     * @return
     *        the preview button
     */
    protected JButton getPreviewButton() {
        return this.mPreviewButton;
    }

    /**
     * Overrode this method to check the input values.
     * 
     * @return true if all input values are valid
     */
    protected boolean hasValidInputValues() {
        boolean valid = true;
        if (super.hasValidInputValues() == false) {
            valid = false;
        }
        if (this.hasValidNumber(this.mXValueTextField) == false) {
        	valid = false;
        }
        if (this.hasValidNumber(this.mYValueTextField) == false) {
        	valid = false;
        }
    	return valid;
    }

	@Override
	public void onXAxisDateSelected(boolean selected) {
		this.mDateXComponentGroup.setEnabled(selected);
	}

	@Override
	public void onYAxisDateSelected(boolean selected) {
		this.mDateYComponentGroup.setEnabled(selected);
	}

	@Override
	public void onAxisSelectionStateChanged(SGAxisSelectionPanel axisPanel) {
        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, 
        		this.mPropertyDialogObserverList);
	}
}
