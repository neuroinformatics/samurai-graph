
package jp.riken.brain.ni.samuraigraph.figure.java2d;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JSpinner;
import javax.swing.JTextField;

import jp.riken.brain.ni.samuraigraph.base.SGAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGData;
import jp.riken.brain.ni.samuraigraph.base.SGDataColumnInfo;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGITwoAxesDialog;
import jp.riken.brain.ni.samuraigraph.base.SGIntegerSeriesSet;
import jp.riken.brain.ni.samuraigraph.base.SGTwoAxesSelectionPanel;
import jp.riken.brain.ni.samuraigraph.data.SGDataSetupDialog;
import jp.riken.brain.ni.samuraigraph.data.SGDataUtility;
import jp.riken.brain.ni.samuraigraph.data.SGIDataColumnTypeConstants;
import jp.riken.brain.ni.samuraigraph.data.SGIDataInformationKeyConstants;
import jp.riken.brain.ni.samuraigraph.data.SGIIndexData;
import jp.riken.brain.ni.samuraigraph.data.SGINetCDFConstants;
import jp.riken.brain.ni.samuraigraph.data.SGMDArrayDataSetupDialog;
import jp.riken.brain.ni.samuraigraph.data.SGNetCDFDataSetupDialog;
import jp.riken.brain.ni.samuraigraph.data.SGSDArrayDataSetupDialog;

/**
 *
 */
public class SGPropertyDialogSXYZData extends SGDataDialog 
		implements SGIDataColumnTypeConstants, SGINetCDFConstants, SGITwoAxesDialog {

    /**
     * Serial Version UID
     */
    private static final long serialVersionUID = 4413621536454191591L;
    
    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Data Properties";

    /** Creates new form SGPropertyDialogSXYZData */
    public SGPropertyDialogSXYZData(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.initialize();
    	this.pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mCommonPanel = new javax.swing.JPanel();
        mLegendVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mNameLabel = new javax.swing.JLabel();
        mNameField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mDataColumnSelectionButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mColorMapPanel = new javax.swing.JPanel();
        mWidthLabel = new javax.swing.JLabel();
        mHeightLabel = new javax.swing.JLabel();
        mSizeLabel = new javax.swing.JLabel();
        mSizeSeparator = new javax.swing.JSeparator();
        mWidthPanel = new javax.swing.JPanel();
        mWidthTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mWidthDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mHeightPanel = new javax.swing.JPanel();
        mHeightTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mHeightDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mHeadPanel = new javax.swing.JPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mCommonPanel.setLayout(new java.awt.GridBagLayout());

        mLegendVisibleCheckBox.setText("Legend Visible");
        mLegendVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        mCommonPanel.add(mLegendVisibleCheckBox, gridBagConstraints);

        mNameLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mNameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        mCommonPanel.add(mNameLabel, gridBagConstraints);

        mNameField.setColumns(16);
        mNameField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        mCommonPanel.add(mNameField, gridBagConstraints);

        mDataColumnSelectionButton.setText("Data Column");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        mCommonPanel.add(mDataColumnSelectionButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(mCommonPanel, gridBagConstraints);

        mColorMapPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mColorMapPanel.setPreferredSize(new java.awt.Dimension(300, 200));
        mColorMapPanel.setLayout(new java.awt.GridBagLayout());

        mWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mWidthLabel.setText("Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 5);
        mColorMapPanel.add(mWidthLabel, gridBagConstraints);

        mHeightLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mHeightLabel.setText("Height");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mColorMapPanel.add(mHeightLabel, gridBagConstraints);

        mSizeLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mSizeLabel.setText("Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        mColorMapPanel.add(mSizeLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 40, 5, 0);
        mColorMapPanel.add(mSizeSeparator, gridBagConstraints);

        mWidthPanel.setLayout(new java.awt.GridBagLayout());

        mWidthTextField.setColumns(6);
        mWidthTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mWidthPanel.add(mWidthTextField, gridBagConstraints);

        mWidthDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mWidthPanel.add(mWidthDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        mColorMapPanel.add(mWidthPanel, gridBagConstraints);

        mHeightPanel.setLayout(new java.awt.GridBagLayout());

        mHeightTextField.setColumns(6);
        mHeightTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mHeightPanel.add(mHeightTextField, gridBagConstraints);

        mHeightDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mHeightPanel.add(mHeightDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        mColorMapPanel.add(mHeightPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        getContentPane().add(mColorMapPanel, gridBagConstraints);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(mHeadPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JPanel mColorMapPanel;
    private javax.swing.JPanel mCommonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mDataColumnSelectionButton;
    private javax.swing.JPanel mHeadPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mHeightDateButton;
    private javax.swing.JLabel mHeightLabel;
    private javax.swing.JPanel mHeightPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mHeightTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mLegendVisibleCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mNameField;
    private javax.swing.JLabel mNameLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    private javax.swing.JLabel mSizeLabel;
    private javax.swing.JSeparator mSizeSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mWidthDateButton;
    private javax.swing.JLabel mWidthLabel;
    private javax.swing.JPanel mWidthPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mWidthTextField;
    // End of variables declaration//GEN-END:variables

    private SGTwoAxesSelectionPanel mAxisPanel = new SGTwoAxesSelectionPanel();

    protected SGComponentGroup mComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateXComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateYComponentGroup = new SGComponentGroup();

    private void initProperty() {
    	
    	this.mHeadPanel.add(this.mAxisPanel);
    	this.mAxisPanel.addAxisSelectionListener(this);

        // set the title
        this.setTitle(SGPropertyDialogSXYZData.TITLE);

        // add an action event listener
        this.mDataColumnSelectionButton.addActionListener(this);
        this.mAxisPanel.addActionListener(this);
        this.mLegendVisibleCheckBox.addActionListener(this);
        this.mWidthDateButton.addActionListener(this);
        this.mHeightDateButton.addActionListener(this);

        // set the name
        this.mNameField.setDescription("Name");
        this.mWidthTextField.setDescription("Width");
        this.mHeightTextField.setDescription("Height");
        
        SGComponentGroupElement[] dateXComponents = {
                new SGComponentGroupElement(this.mWidthDateButton) };
        SGComponentGroupElement[] dateYComponents = {
                new SGComponentGroupElement(this.mHeightDateButton) };
        this.mDateXComponentGroup.addElement(dateXComponents);
        this.mDateYComponentGroup.addElement(dateYComponents);
        
        SGComponentGroupElement[] components = {
        		dateXComponents[0],
        		dateYComponents[0],
        		new SGComponentGroupElement(this.mSizeLabel),
        		new SGComponentGroupElement(this.mWidthLabel),
        		new SGComponentGroupElement(this.mWidthTextField),
        		new SGComponentGroupElement(this.mHeightLabel),
        		new SGComponentGroupElement(this.mHeightTextField)
        };
        this.mComponentGroup.addElement(components);
        
        // sets the calendar icon
        this.setCalendarIcon(this.mWidthDateButton);
        this.setCalendarIcon(this.mHeightDateButton);
    }

    public List getColorSelectionButtonsList() {
        return new ArrayList();
    }

    public List getTextFieldComponentsList() {
        final List list = this.getFormattedTextFieldsListFromSpinners();
        list.addAll(this.getAxisNumberTextFieldList());
        list.add(this.mNameField);
        return list;
    }

    public List getAxisNumberTextFieldList() {
        final List<JTextField> list = new ArrayList<JTextField>();
        list.add(this.mWidthTextField);
        list.add(this.mHeightTextField);
        return list;
    }

    public List getSpinnerList() {
        return new ArrayList<JSpinner>();
    }

    protected JButton getOKButton() {
        return this.mOKButton;
    }

    protected JButton getCancelButton() {
        return this.mCancelButton;
    }

    protected JButton getPreviewButton() {
        return this.mPreviewButton;
    }

    public boolean setDialogProperty() {
        List<SGIPropertyDialogObserver>  list = this.mPropertyDialogObserverList;
        final int len = list.size();

        // column selection button
        final boolean single = (len == 1);
        this.mDataColumnSelectionButton.setEnabled(single);

        // select axis panel
        selectAxisPanel(this, this.mAxisPanel, list);

        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, list);

        // data name
        String name = this.getDataNameFromObservers();
        this.mNameField.setText(name);

        // visible in legend
        Boolean legendVisible = this.getLegendVisibleFromObservers();
        this.mLegendVisibleCheckBox.setSelected(legendVisible);
        
        SGISXYZDataDialogObserver obs0 = (SGISXYZDataDialogObserver) list.get(0);
        
        final double widthValue0 = obs0.getRectangleWidthValue();
        final double heightValue0 = obs0.getRectangleHeightValue();
        
        Double widthValue = Double.valueOf(widthValue0);
        Double heightValue = Double.valueOf(heightValue0);

        if (list.size() > 1) {
            for (int ii = 1; ii < list.size(); ii++) {
                SGISXYZDataDialogObserver obs1 = (SGISXYZDataDialogObserver) list
                        .get(ii);
                final double widthValue1 = obs1.getRectangleWidthValue();
                if (widthValue0 != widthValue1) {
                    widthValue = null;
                    break;
                }
            }
            for (int ii = 1; ii < list.size(); ii++) {
                SGISXYZDataDialogObserver obs1 = (SGISXYZDataDialogObserver) list
                        .get(ii);
                final double heightValue1 = obs1.getRectangleHeightValue();
                if (heightValue0 != heightValue1) {
                    heightValue = null;
                    break;
                }
            }
        }

        // set values to the components
        this.setValue(this.mWidthTextField, widthValue);
        this.setValue(this.mHeightTextField, heightValue);

        // update the components
        this.updateComponents();

        return true;
    }
    
    // Set enabled or disabled the components depending on the data type.
    private void updateComponents() {
        List list = this.mPropertyDialogObserverList;
        boolean enabled = true;
        for (int ii = 0; ii < list.size(); ii++) {
            SGISXYZDataDialogObserver obs = (SGISXYZDataDialogObserver) list.get(ii);
            SGData data = obs.getData();
            if (SGDataUtility.isSDArrayData(data)) {
                enabled = true;
            } else if (data instanceof SGIIndexData) {
            	if (this.mDataInfoArray != null) {
        			enabled = false;
                	break;
            	} else {
            		SGIIndexData indexData = (SGIIndexData) data;
            		enabled = indexData.isIndexAvailable();
            	}
            } else {
                throw new Error("Unsupported data type: " + data.getDataType());
            }
            if (!enabled) {
            	break;
            }
        }
        this.mComponentGroup.setEnabled(enabled);
    }
    
    public static final String ERRMSG_WIDTH_VALUE_INVALID = "Width value is invalid.";
    
    public static final String ERRMSG_HEIGHT_VALUE_INVALID = "Width value is invalid.";

    protected boolean commit() {
    	if (!this.setDataColumnInfo()) {
    		return false;
    	}
    	return super.commit();
    }
    
    protected boolean preview() {
    	if (!this.setDataColumnInfo()) {
    		return false;
    	}
    	return super.preview();
    }
    
    private boolean setDataColumnInfo() {
        if (this.mDataInfoArray != null) {
            SGISXYZDataDialogObserver l = (SGISXYZDataDialogObserver) this.mPropertyDialogObserverList.get(0);
        	SGData data = l.getData();
            
        	// sets the stride
            if (SGDataUtility.isSDArrayData(data)) {
            	SGIntegerSeriesSet stride = this.mStrideMap.get(SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE);
            	if (!l.setSDArrayStride(stride)) {
            		return false;
            	}
            }
            if (data instanceof SGIIndexData) {
            	final boolean indexAvailable;
            	if (SGDataUtility.isNetCDFData(data)) {
                	SGNetCDFDataSetupDialog dg = (SGNetCDFDataSetupDialog) this.mDataColumnSelectionDialog;
            		indexAvailable = dg.isIndexAvailable();
            	} else if (SGDataUtility.isMDArrayData(data)) {
                	SGMDArrayDataSetupDialog dg = (SGMDArrayDataSetupDialog) this.mDataColumnSelectionDialog;
            		indexAvailable = dg.isSXYZIndexAvailable();
            	} else {
            		return false;
            	}
            	if (indexAvailable) {
                	SGIntegerSeriesSet indexStride = this.mStrideMap.get(SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE);
                	if (!l.setIndexStride(indexStride)) {
                		return false;
                	}
                	if (!l.setStrideX(null)) {
                		return false;
                	}
                	if (!l.setStrideY(null)) {
                		return false;
                	}
            	} else {
                	SGIntegerSeriesSet xStride = this.mStrideMap.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X);
                	if (!l.setStrideX(xStride)) {
                		return false;
                	}
                	SGIntegerSeriesSet yStride = this.mStrideMap.get(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y);
                	if (!l.setStrideY(yStride)) {
                		return false;
                	}
                	if (!l.setIndexStride(null)) {
                		return false;
                	}
            	}
            }
            l.setStrideAvailable(this.mDataColumnSelectionDialog.isStrideAvailable());

            // set data columns
            if (l.setColumnInfo(this.mDataInfoArray, this.mCommitActionStateMessage) == false) {
            	return false;
            }
        }
        return true;
    }
    
    public boolean setPropertiesToObserver(SGIPropertyDialogObserver l) {
        SGISXYZDataDialogObserver obs = (SGISXYZDataDialogObserver) l;
        
        // get values
        final int xConfig = this.mAxisPanel.getXAxisLocation();
        final int yConfig = this.mAxisPanel.getYAxisLocation();
        final Number widthValue = this.getNumber(this.mWidthTextField);
        final Number heightValue = this.getNumber(this.mHeightTextField);

        if (obs.hasValidRectangleWidthValue(xConfig, widthValue) == false) {
            this.setInputErrorMessage(ERRMSG_WIDTH_VALUE_INVALID);
            return false;
        }
        if (obs.hasValidRectangleWidthValue(yConfig, heightValue) == false) {
            this.setInputErrorMessage(ERRMSG_HEIGHT_VALUE_INVALID);
            return false;
        }

        // set the related axes
        if (xConfig != -1) {
            obs.setXAxisLocation(xConfig);
        }

        if (yConfig != -1) {
            obs.setYAxisLocation(yConfig);
        }

        // data name
        String name = this.mNameField.getText();
        if (name != null) {
            obs.setName(name);
        }

        // visibility in legend
        Boolean legendVisible = this.mLegendVisibleCheckBox.getSelected();
        if (legendVisible != null) {
            obs.setVisibleInLegend(legendVisible.booleanValue());
        }

        // width
        if (widthValue != null) {
            obs.setRectangleWidthValue(widthValue.doubleValue());
        }

        // height
        if (heightValue != null) {
            obs.setRectangleHeightValue(heightValue.doubleValue());
        }

        return true;
    }

    public void actionPerformed(ActionEvent e) {
        super.actionPerformed(e);
        Object source = e.getSource();
        String command = e.getActionCommand();
        if (source.equals(this.mDataColumnSelectionButton)) {
            this.showDataColumnSelectionDialog();
        } else if (source.equals(this.mDataColumnSelectionDialog)) {
            SGDataSetupDialog dg = (SGDataSetupDialog) source;
            if (OK_BUTTON_TEXT.equals(command)) {
            	SGDataColumnInfo[] colInfo = dg.getDataColumnInfoSet().getDataColumnInfoArray();
                this.mDataInfoArray = colInfo;
                
                // update components
                this.updateComponents();
                
                // get stride
                SGISXYZDataDialogObserver obs = (SGISXYZDataDialogObserver) this.mPropertyDialogObserverList.get(0);
                SGData data = obs.getData();
                if (SGDataUtility.isSDArrayData(data)) {
                    SGSDArrayDataSetupDialog sdg = (SGSDArrayDataSetupDialog) dg;
                    SGIntegerSeriesSet stride = sdg.getSXYZStride();
                    this.mStrideMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE, stride);
                } else if (SGDataUtility.isNetCDFData(data)) {
                    SGNetCDFDataSetupDialog ndg = (SGNetCDFDataSetupDialog) dg;
                    if (ndg.isIndexAvailable()) {
                        SGIntegerSeriesSet stride = ndg.getSXYZIndexStride();
                        this.mStrideMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE, stride);
                    } else {
                        SGIntegerSeriesSet xStride = ndg.getSXYZStrideX();
                        SGIntegerSeriesSet yStride = ndg.getSXYZStrideY();
                        this.mStrideMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X, xStride);
                        this.mStrideMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y, yStride);
                    }
                } else if (SGDataUtility.isMDArrayData(data)) {
                	SGMDArrayDataSetupDialog mdg = (SGMDArrayDataSetupDialog) dg;
                    if (mdg.isSXYZIndexAvailable()) {
                    	SGIntegerSeriesSet stride = mdg.getSXYZIndexStride();
                        this.mStrideMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_INDEX_STRIDE, stride);
                    } else {
                        SGIntegerSeriesSet xStride = mdg.getSXYZStrideX();
                        SGIntegerSeriesSet yStride = mdg.getSXYZStrideY();
                        this.mStrideMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_X, xStride);
                        this.mStrideMap.put(SGIDataInformationKeyConstants.KEY_SXYZ_STRIDE_Y, yStride);
                    }
                }
            }
        } else if (source.equals(this.mWidthDateButton)) {
    		this.onPeriodButtonPressedForDoubleValue(this.mWidthTextField);
    	} else if (source.equals(this.mHeightDateButton)) {
    		this.onPeriodButtonPressedForDoubleValue(this.mHeightTextField);
        }
    }

    /**
     * Overrode this method to check the input values.
     * 
     * @return true if all input values are valid
     */
    protected boolean hasValidInputValues() {
        boolean valid = true;
        if (super.hasValidInputValues() == false) {
            valid = false;
        }
        
        // check the data name
        if (this.mNameField.hasValidText() == false) {
            this.addInputErrorDescription(this.mNameField.getDescription());
            valid = false;
        }

        if (this.mColorMapPanel.isVisible()) {
            if (this.hasValidNumber(this.mWidthTextField, Float.MIN_VALUE, null) == false) {
            	valid = false;
            }
            if (this.hasValidNumber(this.mHeightTextField, Float.MIN_VALUE, null) == false) {
            	valid = false;
            }
        }
    	return valid;
    }

	@Override
	public void onXAxisDateSelected(boolean selected) {
		this.mDateXComponentGroup.setEnabled(selected);
	}

	@Override
	public void onYAxisDateSelected(boolean selected) {
		this.mDateYComponentGroup.setEnabled(selected);
	}

	@Override
	public void onAxisSelectionStateChanged(SGAxisSelectionPanel axisPanel) {
        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, 
        		this.mPropertyDialogObserverList);
	}

}
