package jp.riken.brain.ni.samuraigraph.figure.java2d;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.SpinnerNumberModel;

import jp.riken.brain.ni.samuraigraph.base.SGAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGITwoAxesDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyDialog;
import jp.riken.brain.ni.samuraigraph.base.SGTwoAxesSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;
import jp.riken.brain.ni.samuraigraph.figure.SGIStringConstants;

/**
 * A dialog to set the properties of labels.
 */
public class SGStringElementDialog extends SGPropertyDialog implements
        SGIStringConstants, SGITwoAxesDialog {

    // serialVersionUID
    private static final long serialVersionUID = -4468422972213746464L;

    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Label Properties";

    /** Creates new form SGStringElementDialog */
    public SGStringElementDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.initialize();
        this.pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mTextPanel = new javax.swing.JPanel();
        mFontFamilyLabel = new javax.swing.JLabel();
        mFontStyleComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mFontSizeLabel = new javax.swing.JLabel();
        mTextAngleSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mTextColorLabel = new javax.swing.JLabel();
        mTextAngleLabel = new javax.swing.JLabel();
        mFontSizeSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mFontNameComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mRightSpaceLabel = new javax.swing.JLabel();
        mLeftSpaceLabel = new javax.swing.JLabel();
        mStringLabel = new javax.swing.JLabel();
        mStringSeparator = new javax.swing.JSeparator();
        mXValueLabel = new javax.swing.JLabel();
        mYValueLabel = new javax.swing.JLabel();
        mLocationLabel = new javax.swing.JLabel();
        mLocationSeparator = new javax.swing.JSeparator();
        mFontStyleLabel = new javax.swing.JLabel();
        mTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mTextLabel = new javax.swing.JLabel();
        mXPanel = new javax.swing.JPanel();
        mXValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mXDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mYPanel = new javax.swing.JPanel();
        mYValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mHeadPanel = new javax.swing.JPanel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mTextPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mTextPanel.setLayout(new java.awt.GridBagLayout());

        mFontFamilyLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontFamilyLabel.setText("Family");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mTextPanel.add(mFontFamilyLabel, gridBagConstraints);

        mFontStyleComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mTextPanel.add(mFontStyleComboBox, gridBagConstraints);

        mFontSizeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontSizeLabel.setText("Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 10, 5);
        mTextPanel.add(mFontSizeLabel, gridBagConstraints);

        mTextAngleSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTextAngleSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mTextPanel.add(mTextAngleSpinner, gridBagConstraints);

        mTextColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTextColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 10, 5);
        mTextPanel.add(mTextColorLabel, gridBagConstraints);

        mTextAngleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTextAngleLabel.setText("Angle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 10, 5);
        mTextPanel.add(mTextAngleLabel, gridBagConstraints);

        mFontSizeSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontSizeSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mTextPanel.add(mFontSizeSpinner, gridBagConstraints);

        mColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mTextPanel.add(mColorButton, gridBagConstraints);

        mFontNameComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mTextPanel.add(mFontNameComboBox, gridBagConstraints);

        mRightSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        mTextPanel.add(mRightSpaceLabel, gridBagConstraints);

        mLeftSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        mTextPanel.add(mLeftSpaceLabel, gridBagConstraints);

        mStringLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mStringLabel.setText("String");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mTextPanel.add(mStringLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 45, 0, 0);
        mTextPanel.add(mStringSeparator, gridBagConstraints);

        mXValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mXValueLabel.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mTextPanel.add(mXValueLabel, gridBagConstraints);

        mYValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYValueLabel.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 5);
        mTextPanel.add(mYValueLabel, gridBagConstraints);

        mLocationLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mLocationLabel.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mTextPanel.add(mLocationLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 0, 0);
        mTextPanel.add(mLocationSeparator, gridBagConstraints);

        mFontStyleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFontStyleLabel.setText("Style");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        mTextPanel.add(mFontStyleLabel, gridBagConstraints);

        mTextField.setColumns(16);
        mTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        mTextPanel.add(mTextField, gridBagConstraints);

        mTextLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mTextLabel.setText("Text");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 5, 5);
        mTextPanel.add(mTextLabel, gridBagConstraints);

        mXPanel.setLayout(new java.awt.GridBagLayout());

        mXValueTextField.setColumns(6);
        mXValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXPanel.add(mXValueTextField, gridBagConstraints);

        mXDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mXPanel.add(mXDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mTextPanel.add(mXPanel, gridBagConstraints);

        mYPanel.setLayout(new java.awt.GridBagLayout());

        mYValueTextField.setColumns(6);
        mYValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYPanel.add(mYValueTextField, gridBagConstraints);

        mYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mYPanel.add(mYDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mTextPanel.add(mYPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(mTextPanel, gridBagConstraints);

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(mHeadPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mColorButton;
    private javax.swing.JLabel mFontFamilyLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mFontNameComboBox;
    private javax.swing.JLabel mFontSizeLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mFontSizeSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mFontStyleComboBox;
    private javax.swing.JLabel mFontStyleLabel;
    private javax.swing.JPanel mHeadPanel;
    private javax.swing.JLabel mLeftSpaceLabel;
    private javax.swing.JLabel mLocationLabel;
    private javax.swing.JSeparator mLocationSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    private javax.swing.JLabel mRightSpaceLabel;
    private javax.swing.JLabel mStringLabel;
    private javax.swing.JSeparator mStringSeparator;
    private javax.swing.JLabel mTextAngleLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mTextAngleSpinner;
    private javax.swing.JLabel mTextColorLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mTextField;
    private javax.swing.JLabel mTextLabel;
    private javax.swing.JPanel mTextPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mXDateButton;
    private javax.swing.JPanel mXPanel;
    private javax.swing.JLabel mXValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mXValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mYDateButton;
    private javax.swing.JPanel mYPanel;
    private javax.swing.JLabel mYValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mYValueTextField;
    // End of variables declaration//GEN-END:variables

    private SGTwoAxesSelectionPanel mAxisPanel = new SGTwoAxesSelectionPanel();

    protected SGComponentGroup mDateXComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateYComponentGroup = new SGComponentGroup();

    private boolean initProperty() {

    	this.mHeadPanel.add(this.mAxisPanel);
    	this.mAxisPanel.addAxisSelectionListener(this);
    	
        // set the title
        this.setTitle(SGStringElementDialog.TITLE);

        // set up the combo boxes
        this.initFontFamilyNameComboBox(this.mFontNameComboBox);
        this.initFontStyleComboBox(this.mFontStyleComboBox);

        //
        // spinner model
        //

        // font size
        this.mFontSizeSpinner.initProperties(getFontSizeSpinnerNumberModel(),
                FONT_SIZE_UNIT, FONT_SIZE_FRAC_DIGIT_MIN, FONT_SIZE_FRAC_DIGIT_MAX);

        // angle
        this.mTextAngleSpinner.initProperties(new SpinnerNumberModel(0.0,
                STRING_ANGLE_MIN, STRING_ANGLE_MAX, STRING_ANGLE_STEP), degree,
                STRING_ANGLE_FRAC_DIFIT_MIN, STRING_ANGLE_FRAC_DIFIT_MAX);

        // add an action event listener
        this.mFontNameComboBox.addActionListener(this);
        this.mFontStyleComboBox.addActionListener(this);
        this.mAxisPanel.addActionListener(this);
        this.mXDateButton.addActionListener(this);
        this.mYDateButton.addActionListener(this);

        // set the name
        this.mTextField.setDescription("Text");
        this.mXValueTextField.setDescription("Location-> X");
        this.mYValueTextField.setDescription("Location-> Y");
        this.mFontSizeSpinner.setDescription("String-> Size");
        this.mTextAngleSpinner.setDescription("String-> Angle");

        SGComponentGroupElement[] dateXComponents = {
                new SGComponentGroupElement(this.mXDateButton) };
        SGComponentGroupElement[] dateYComponents = {
                new SGComponentGroupElement(this.mYDateButton) };
        this.mDateXComponentGroup.addElement(dateXComponents);
        this.mDateYComponentGroup.addElement(dateYComponents);

        // sets the calendar icon
        this.setCalendarIcon(this.mXDateButton);
        this.setCalendarIcon(this.mYDateButton);

        return true;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
    	super.actionPerformed(e);
    	Object source = e.getSource();
    	if (source.equals(this.mXDateButton)) {
    		this.onDateButtonPressed(this.mXValueTextField);
    	} else if (source.equals(this.mYDateButton)) {
    		this.onDateButtonPressed(this.mYValueTextField);
    	}
    }

    /**
     * 
     * @return
     */
    public String getText() {
        return this.mTextField.getText();
    }

    /**
     * 
     * @return
     */
    public Number getXValue() {
        return this.getNumber(this.mXValueTextField);
    }

    /**
     * 
     * @return
     */
    public Number getYValue() {
        return this.getNumber(this.mYValueTextField);
    }

    /**
     * 
     */
    public Number getFontSize() {
        return this.mFontSizeSpinner.getNumber();
    }

    /**
     * 
     */
    public String getFontName() {
        return (String) this.mFontNameComboBox.getSelectedItem();
    }

    /**
     * 
     */
    public Integer getFontStyle() {
        final String item = (String) this.mFontStyleComboBox.getSelectedItem();
        return SGUtilityText.getFontStyle(item);
    }

    /**
     * 
     */
    public Color getTextColor() {
        return this.mColorButton.getColor();
    }

    /**
     * 
     */
    public Number getAngle() {
        return this.mTextAngleSpinner.getNumber();
    }

    /**
     * 
     * @param str
     * @return
     */
    public boolean setText(final String str) {
        this.mTextField.setText(str);
        return true;
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setFontSize(final Object obj) {
        return this.setValue(this.mFontSizeSpinner, obj);
    }

    /**
     * Sets the font name.
     * 
     * @param name
     *           the font name to set
     * @return true if succeeded
     */
    public boolean setFontName(final String name) {
    	final String fName = SGUtility.findFontFamilyName(name);
        this.mFontNameComboBox.setSelectedItem(fName);
        return true;
    }

    /**
     * 
     */
    public boolean setFontStyle(final Integer style) {
        String styleName = null;
        if (style != null) {
            styleName = SGUtilityText.getFontStyleName(style.intValue());
        }
        this.mFontStyleComboBox.setSelectedItem(styleName);

        return true;
    }

    /**
     * 
     */
    public boolean setTextColor(final Color cl) {
        this.mColorButton.setColor(cl);
        return true;
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setAngle(final Object obj) {
        return this.setValue(this.mTextAngleSpinner, obj);
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setXValue(final Object obj) {
        return this.setValue(this.mXValueTextField, obj);
    }

    /**
     * 
     * @param obj
     * @return
     */
    public boolean setYValue(final Object obj) {
        return this.setValue(this.mYValueTextField, obj);
    }

    /**
     * 
     */
    public List getColorSelectionButtonsList() {
        final List list = new ArrayList();
        list.add(this.mColorButton);
        return list;
    }

    /**
     * 
     */
    public List getTextFieldComponentsList() {
        final List list = this.getFormattedTextFieldsListFromSpinners();
        list.addAll(this.getAxisNumberTextFieldList());
        list.add(this.mTextField);
        return list;
    }

    /**
     * Returns a list of text fields to set number.
     * 
     * @return
     */
    public List getAxisNumberTextFieldList() {
        final List list = new ArrayList();
        list.add(this.mXValueTextField);
        list.add(this.mYValueTextField);
        return list;
    }

    /**
     * 
     */
    public List getSpinnerList() {
        List list = new ArrayList();
        list.add(this.mFontSizeSpinner);
        list.add(this.mTextAngleSpinner);
        return list;
    }

    /**
     * Set properties to all listeners.
     * 
     * @param l
     * @return
     */
    public boolean setPropertiesToObserver(SGIPropertyDialogObserver l) {
        SGILabelDialogObserver label = (SGILabelDialogObserver) l;

        // get values
        final int xConfig = this.mAxisPanel.getXAxisLocation();
        final int yConfig = this.mAxisPanel.getYAxisLocation();
        final String text = this.getText();
        final Number xValue = this.getXValue();
        final Number yValue = this.getYValue();
        final Number fontSize = this.getFontSize();
        final String fontName = this.getFontName();
        final Integer fontStyle = this.getFontStyle();
        final Number angle = this.getAngle();
        final Color cl = this.getTextColor();

        // check values
        ArrayList list = new ArrayList();
        if (label.hasValidXValue(xConfig, xValue) == false) {
            list.add("X");
        }
        if (label.hasValidYValue(yConfig, yValue) == false) {
            list.add("Y");
        }
        if (list.size() != 0) {
            StringBuffer sb = new StringBuffer();
            sb.append(ERRMSG_AXIS_VALUE_INVALID);
            sb.append(":\n");
            for (int ii = 0; ii < list.size(); ii++) {
                String str = (String) list.get(ii);
                sb.append('-');
                sb.append(str);
                sb.append('\n');
            }
            this.setInputErrorMessage(sb.toString());
            return false;
        }

        // set the related axes
        if (xConfig != -1) {
            label.setXAxisLocation(xConfig);
        }

        if (yConfig != -1) {
            label.setYAxisLocation(yConfig);
        }

        // text
        if (text != null) {
            label.setString(text);
        }

        // x value
        if (xValue != null) {
            label.setXValue(xValue.doubleValue());
        }

        // y value
        if (yValue != null) {
            label.setYValue(yValue.doubleValue());
        }

        // font size
        if (fontSize != null) {
            label.setFontSize(fontSize.floatValue(), pt);
        }

        // font name
        if (fontName != null) {
            label.setFontName(fontName);
        }

        // font style
        if (fontStyle != null) {
            label.setFontStyle(fontStyle);
        }

        // angle
        if (angle != null) {
            label.setAngle(angle.floatValue());
        }

        // color
        if (cl != null) {
            label.setStringColor(cl);
        }

        return true;
    }

    /**
     * 
     * @return
     */
    public boolean setDialogProperty() {
        List<SGIPropertyDialogObserver>  list = this.mPropertyDialogObserverList;

        // select axis panel
        selectAxisPanel(this, this.mAxisPanel, list);

        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, list);

        SGILabelDialogObserver label0 = (SGILabelDialogObserver) list.get(0);

        final String str0 = label0.getString();
        final double xValue0 = label0.getXValue();
        final double yValue0 = label0.getYValue();
        final String fontName0 = label0.getFontName();
        final float fontSize0 = label0.getFontSize(pt);
        final int fontStyle0 = label0.getFontStyle();
        final float angle0 = label0.getAngle();
        final Color color0 = label0.getStringColor();

        String str = str0;
        Double xValue = Double.valueOf(xValue0);
        Double yValue = Double.valueOf(yValue0);
        String fontName = fontName0;
        Float fontSize = Float.valueOf(fontSize0);
        Integer fontStyle = Integer.valueOf(fontStyle0);
        Float angle = Float.valueOf(angle0);
        Color color = color0;

        if (list.size() > 1) {
            for (int ii = 1; ii < list.size(); ii++) {
                SGILabelDialogObserver label1 = (SGILabelDialogObserver) list
                        .get(ii);
                final String str1 = label1.getString();
                if (str0.equals(str1) == false) {
                    str = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILabelDialogObserver label1 = (SGILabelDialogObserver) list
                        .get(ii);
                final double xValue1 = label1.getXValue();
                if (xValue0 != xValue1) {
                    xValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILabelDialogObserver label1 = (SGILabelDialogObserver) list
                        .get(ii);
                final double yValue1 = label1.getYValue();
                if (yValue0 != yValue1) {
                    yValue = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILabelDialogObserver label1 = (SGILabelDialogObserver) list
                        .get(ii);
                final String fontName1 = label1.getFontName();
                if (fontName0.equals(fontName1) == false) {
                    fontName = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILabelDialogObserver label1 = (SGILabelDialogObserver) list
                        .get(ii);
                final float fontSize1 = label1.getFontSize(pt);
                if (fontSize0 != fontSize1) {
                    fontSize = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILabelDialogObserver label1 = (SGILabelDialogObserver) list
                        .get(ii);
                final int fontStyle1 = label1.getFontStyle();
                if (fontStyle0 != fontStyle1) {
                    fontStyle = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILabelDialogObserver label1 = (SGILabelDialogObserver) list
                        .get(ii);
                final float angle1 = label1.getAngle();
                if (angle0 != angle1) {
                    angle = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGILabelDialogObserver label1 = (SGILabelDialogObserver) list
                        .get(ii);
                final Color color1 = label1.getStringColor();
                if (color0.equals(color1) == false) {
                    color = null;
                    break;
                }
            }
        }

        //
        this.setText(str);
        this.setXValue(xValue);
        this.setYValue(yValue);
        this.setFontName(fontName);
        this.setFontSize(fontSize);
        this.setFontStyle(fontStyle);

        if (angle != null) {
            angle = Float.valueOf(angle.floatValue());
        }
        this.setAngle(angle);
        this.setTextColor(color);

//        this.setColorButtonBorder(true);

        return true;
    }

    /**
     * Overrode this method to check the input values.
     * 
     * @return true if all input values are valid
     */
    protected boolean hasValidInputValues() {
        boolean valid = true;
        if (super.hasValidInputValues() == false) {
            valid = false;
        }
        if (this.mTextField.hasValidText() == false) {
            this.addInputErrorDescription(this.mTextField.getDescription());
            valid = false;
        }
        if (this.hasValidNumber(this.mXValueTextField) == false) {
        	valid = false;
        }
        if (this.hasValidNumber(this.mYValueTextField) == false) {
        	valid = false;
        }
        return valid;
    }

    /**
     * Returns the OK button.
     * @return
     *        the OK button
     */
    protected JButton getOKButton() {
        return this.mOKButton;
    }
    
    /**
     * Returns the cancel button.
     * @return
     *        the cancel button
     */
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    /**
     * Returns the preview button.
     * @return
     *        the preview button
     */
    protected JButton getPreviewButton() {
        return this.mPreviewButton;
    }

	@Override
	public void onXAxisDateSelected(boolean selected) {
		this.mDateXComponentGroup.setEnabled(selected);
	}

	@Override
	public void onYAxisDateSelected(boolean selected) {
		this.mDateYComponentGroup.setEnabled(selected);
	}
	
	@Override
	public void onAxisSelectionStateChanged(SGAxisSelectionPanel axisPanel) {
        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, 
        		this.mPropertyDialogObserverList);
	}

}
