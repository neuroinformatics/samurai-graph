package jp.riken.brain.ni.samuraigraph.figure.java2d;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;

import jp.riken.brain.ni.samuraigraph.base.SGAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGISingleAxisDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyDialog;
import jp.riken.brain.ni.samuraigraph.base.SGSingleAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;
import jp.riken.brain.ni.samuraigraph.figure.SGDrawingElementLine;
import jp.riken.brain.ni.samuraigraph.figure.SGILineConstants;

/**
 * A dialog to set the properties of timing lines.
 */
public class SGTimingLineDialog extends SGPropertyDialog 
		implements SGILineConstants, SGISingleAxisDialog {

    // serialVersionUID
    private static final long serialVersionUID = 4323568731217858586L;

    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Timing Line Properties";

    /** Creates new form SGTimingLineDialog */
    public SGTimingLineDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.initialize();
        this.pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mStartValueLabel = new javax.swing.JLabel();
        mStartValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mEndValueLabel = new javax.swing.JLabel();
        mEndValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mTimingLinePanel = new javax.swing.JPanel();
        mValueLabel = new javax.swing.JLabel();
        mLineTypeLabel = new javax.swing.JLabel();
        mLineWidthLabel = new javax.swing.JLabel();
        mColorLabel = new javax.swing.JLabel();
        mLineWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mLineColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mLineTypeComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mAnchoredCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mRightSpaceLabel = new javax.swing.JLabel();
        mLeftSpaceLabel = new javax.swing.JLabel();
        mValuePanel = new javax.swing.JPanel();
        mValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mValueDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mHeadPanel = new javax.swing.JPanel();

        mStartValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mStartValueLabel.setText("Start");

        mStartValueTextField.setColumns(6);
        mStartValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        mEndValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mEndValueLabel.setText("End");

        mEndValueTextField.setColumns(6);
        mEndValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mTimingLinePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mTimingLinePanel.setFont(new java.awt.Font("MS Sans Serif", 0, 10)); // NOI18N
        mTimingLinePanel.setLayout(new java.awt.GridBagLayout());

        mValueLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mValueLabel.setText("Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        mTimingLinePanel.add(mValueLabel, gridBagConstraints);

        mLineTypeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineTypeLabel.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 5, 5);
        mTimingLinePanel.add(mLineTypeLabel, gridBagConstraints);

        mLineWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineWidthLabel.setText("Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mTimingLinePanel.add(mLineWidthLabel, gridBagConstraints);

        mColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 10, 5);
        mTimingLinePanel.add(mColorLabel, gridBagConstraints);

        mLineWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineWidthSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mTimingLinePanel.add(mLineWidthSpinner, gridBagConstraints);

        mLineColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        mTimingLinePanel.add(mLineColorButton, gridBagConstraints);

        mLineTypeComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mLineTypeComboBox.setPreferredSize(new java.awt.Dimension(140, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        mTimingLinePanel.add(mLineTypeComboBox, gridBagConstraints);

        mAnchoredCheckBox.setText("Anchored");
        mAnchoredCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        mTimingLinePanel.add(mAnchoredCheckBox, gridBagConstraints);

        mRightSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        mTimingLinePanel.add(mRightSpaceLabel, gridBagConstraints);

        mLeftSpaceLabel.setText("    ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        mTimingLinePanel.add(mLeftSpaceLabel, gridBagConstraints);

        mValuePanel.setLayout(new java.awt.GridBagLayout());

        mValueTextField.setColumns(6);
        mValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mValuePanel.add(mValueTextField, gridBagConstraints);

        mValueDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mValuePanel.add(mValueDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mTimingLinePanel.add(mValuePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(mTimingLinePanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(mHeadPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mAnchoredCheckBox;
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JLabel mColorLabel;
    private javax.swing.JLabel mEndValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mEndValueTextField;
    private javax.swing.JPanel mHeadPanel;
    private javax.swing.JLabel mLeftSpaceLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mLineColorButton;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mLineTypeComboBox;
    private javax.swing.JLabel mLineTypeLabel;
    private javax.swing.JLabel mLineWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mLineWidthSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    private javax.swing.JLabel mRightSpaceLabel;
    private javax.swing.JLabel mStartValueLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mStartValueTextField;
    private javax.swing.JPanel mTimingLinePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mValueDateButton;
    private javax.swing.JLabel mValueLabel;
    private javax.swing.JPanel mValuePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mValueTextField;
    // End of variables declaration//GEN-END:variables

    private SGSingleAxisSelectionPanel mAxisPanel = new SGSingleAxisSelectionPanel();

    /**
     * The component group for date values.
     */
    protected SGComponentGroup mDateComponentGroup = new SGComponentGroup();

    private boolean initProperty() {
    	
    	this.mHeadPanel.add(this.mAxisPanel);
    	this.mAxisPanel.addAxisSelectionListener(this);

        // set the title
        this.setTitle(SGTimingLineDialog.TITLE);

        // set up the combo box for the  line type
        for (int ii = 0; ii < LINE_NAME_ARRAY.length; ii++) {
            this.mLineTypeComboBox.addItem(LINE_NAME_ARRAY[ii]);
        }

        //
        // set up spinners
        //

        // line
        this.mLineWidthSpinner.initProperties(getLineWidthSpinnerNumberModel(),
                LINE_WIDTH_UNIT, LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);

        // set the name
        this.mValueTextField.setDescription("Value");
        this.mLineWidthSpinner.setDescription("Width");

        // add an action event listener
        this.mLineTypeComboBox.addActionListener(this);
        this.mAxisPanel.addActionListener(this);
        this.mValueDateButton.addActionListener(this);

        SGComponentGroupElement[] dateComponents = {
                new SGComponentGroupElement(this.mValueDateButton) };
        this.mDateComponentGroup.addElement(dateComponents);

        // sets the calendar icon
        this.setCalendarIcon(this.mValueDateButton);

        return true;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        super.actionPerformed(e);
        Object source = e.getSource();
        if (source.equals(this.mValueDateButton)) {
        	this.onDateButtonPressed(this.mValueTextField);
        }
    }
    
    /**
     * 
     */
    public String getTimingValueString() {
        return this.mValueTextField.getText();
    }

    /**
     * 
     * @return
     */
    public Number getTimingValue() {
        String str = this.getTimingValueString();
        if (str == null) {
            return null;
        }

        Number num = SGUtilityText.getDouble(str);

        return num;
    }

    /**
     * 
     */
    public boolean setValue(final Object obj) {
        return this.setValue(this.mValueTextField, obj);
    }

    /**
     * 
     */
    public boolean setLineType(final Integer type) {
        if (type != null) {
            final String typeName = SGDrawingElementLine.getLineTypeName(type
                    .intValue());
            this.mLineTypeComboBox.setSelectedItem(typeName);
        } else {
            this.mLineTypeComboBox.setSelectedItem(null);
        }

        return true;
    }

    /**
     * 
     */
    public int getLineType() {
        final String typeName = (String) this.mLineTypeComboBox
                .getSelectedItem();
        if (typeName == null) {
            return -1;
        }
        final Integer num = SGDrawingElementLine.getLineTypeFromName(typeName);
        return num.intValue();
    }

    /**
     * 
     */
    public boolean setLineWidth(final Object obj) {
        return this.setValue(this.mLineWidthSpinner, obj);
    }

    /**
     * 
     */
    public Number getLineWidth() {
        return this.mLineWidthSpinner.getNumber();
    }

    /**
     * 
     */
    public boolean setColor(final Color cl) {
        this.mLineColorButton.setColor(cl);
        return true;
    }

    /**
     * 
     */
    public Color getColor() {
        return this.mLineColorButton.getColor();
    }

    /**
     * 
     */
    public boolean setAnchored(final Boolean b) {
        this.mAnchoredCheckBox.setSelected(b);
        return true;
    }
    
    /**
     * 
     */
    public Boolean getAnchored() {
        return this.mAnchoredCheckBox.getSelected();
    }
    
    /**
     * 
     */
    public List getColorSelectionButtonsList() {
        final List list = new ArrayList();
        list.add(this.mLineColorButton);
        return list;
    }

    /**
     * 
     */
    public List getTextFieldComponentsList() {
        final List list = this.getFormattedTextFieldsListFromSpinners();
        list.addAll(this.getAxisNumberTextFieldList());
        return list;
    }

    /**
     * Returns a list of text fields to set number.
     * 
     * @return
     */
    public List getAxisNumberTextFieldList() {
        final List list = new ArrayList();
        list.add(this.mValueTextField);
        return list;
    }

    /**
     * 
     */
    public List getSpinnerList() {
        List list = new ArrayList();
        list.add(this.mLineWidthSpinner);
        return list;
    }

    /**
     * Set properties to all listeners.
     * 
     * @param l
     * @return
     */
    public boolean setPropertiesToObserver(SGIPropertyDialogObserver l) {
        SGITimingLineDialogObserver line = (SGITimingLineDialogObserver) l;

        // get values
        final int location = this.mAxisPanel.getAxisLocation();
        final Number value = this.getTimingValue();
        final int type = this.getLineType();
        final Number lineWidth = this.getLineWidth();
        final Color cl = this.getColor();
        final Boolean anchored = this.getAnchored();

        // check values
        ArrayList<String> list = new ArrayList<String>();
        if (line.hasValidValue(location, value) == false) {
            list.add("Value");
        }
        if (list.size() != 0) {
        	StringBuffer sb = new StringBuffer();
        	sb.append(ERRMSG_AXIS_VALUE_INVALID);
        	sb.append(":\n");
            for (int ii = 0; ii < list.size(); ii++) {
                String str = (String) list.get(ii);
                sb.append("- ");
                sb.append(str);
                sb.append('\n');
            }
            this.setInputErrorMessage(sb.toString());
            return false;
        }

        // set the related axes
        if (location != -1) {
            line.setAxisLocation(location);
        }

        // value
        if (value != null) {
            line.setValue(value.doubleValue());
        }

        // line type
        if (type != -1) {
            line.setLineType(type);
        }

        // line width
        if (lineWidth != null) {
            line.setLineWidth(lineWidth.floatValue(), pt);
        }

        // color
        if (cl != null) {
            line.setColor(cl);
        }

        // anchored
        if (anchored != null) {
            line.setAnchored(anchored.booleanValue());
        }
        
        return true;
    }

    /**
     * 
     * @return
     */
    public boolean setDialogProperty() {
        List<SGIPropertyDialogObserver>  list = this.mPropertyDialogObserverList;

        // select axis panel
        selectAxisPanel(this, this.mAxisPanel, list);

        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, list);
        
        SGITimingLineDialogObserver line0 = (SGITimingLineDialogObserver) list
                .get(0);

        final double value0 = line0.getValue();
        final float lineWidth0 = line0.getLineWidth(pt);
        final int lineType0 = line0.getLineType();
        final Color color0 = line0.getColor();
        final boolean anchored0 = line0.isAnchored();

        Double value = Double.valueOf(value0);
        Float lineWidth = Float.valueOf(lineWidth0);
        Integer lineType = Integer.valueOf(lineType0);
        Color color = color0;
        Boolean anchored = Boolean.valueOf(anchored0);

        if (list.size() > 1) {
            for (int ii = 1; ii < list.size(); ii++) {
                SGITimingLineDialogObserver line1 = (SGITimingLineDialogObserver) list
                        .get(ii);

                final double xValue1 = line1.getValue();
                if (value0 != xValue1) {
                    value = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGITimingLineDialogObserver line1 = (SGITimingLineDialogObserver) list
                        .get(ii);

                final float fontSize1 = line1.getLineWidth(pt);
                if (lineWidth0 != fontSize1) {
                    lineWidth = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGITimingLineDialogObserver line1 = (SGITimingLineDialogObserver) list
                        .get(ii);

                final int fontStyle1 = line1.getLineType();
                if (lineType0 != fontStyle1) {
                    lineType = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGITimingLineDialogObserver line1 = (SGITimingLineDialogObserver) list
                        .get(ii);

                final Color color1 = line1.getColor();
                if (color0.equals(color1) == false) {
                    color = null;
                    break;
                }
            }

            for (int ii = 1; ii < list.size(); ii++) {
                SGITimingLineDialogObserver line1 = (SGITimingLineDialogObserver) list
                        .get(ii);

                final boolean anchored1 = line1.isAnchored();
                if (anchored0 != anchored1) {
                    anchored = null;
                    break;
                }
            }
        }

        //
        this.setValue(value);

        this.setLineWidth(lineWidth);
        this.setLineType(lineType);
        this.setColor(color);

        this.setAnchored(anchored);
//        this.setColorButtonBorder(true);

        return true;
    }

    /**
     * Returns the OK button.
     * @return
     *        the OK button
     */
    protected JButton getOKButton() {
        return this.mOKButton;
    }
    
    /**
     * Returns the cancel button.
     * @return
     *        the cancel button
     */
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    /**
     * Returns the preview button.
     * @return
     *        the preview button
     */
    protected JButton getPreviewButton() {
        return this.mPreviewButton;
    }
    
    /**
     * Overrode this method to check the input values.
     * 
     * @return true if all input values are valid
     */
    protected boolean hasValidInputValues() {
        boolean valid = true;
        if (super.hasValidInputValues() == false) {
            valid = false;
        }
        if (this.hasValidNumber(this.mValueTextField) == false) {
        	valid = false;
        }
        return valid;
    }

	@Override
	public void setAxisDateComponentsEnabled(boolean enabled) {
		this.mDateComponentGroup.setEnabled(enabled);
	}

	@Override
	public void onAxisSelectionStateChanged(SGAxisSelectionPanel axisPanel) {
        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, 
        		this.mPropertyDialogObserverList);
	}

}
