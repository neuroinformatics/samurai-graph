package jp.riken.brain.ni.samuraigraph.figure;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;

import org.joda.time.Period;

import jp.riken.brain.ni.samuraigraph.base.SGAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGAxisStepValue;
import jp.riken.brain.ni.samuraigraph.base.SGAxisValue;
import jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGDate;
import jp.riken.brain.ni.samuraigraph.base.SGDateInputDialog;
import jp.riken.brain.ni.samuraigraph.base.SGDateUtility;
import jp.riken.brain.ni.samuraigraph.base.SGIFigureConstants;
import jp.riken.brain.ni.samuraigraph.base.SGIFigureDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGIRootObjectConstants;
import jp.riken.brain.ni.samuraigraph.base.SGITwoAxesDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPeriodInputDialog;
import jp.riken.brain.ni.samuraigraph.base.SGPropertyDialog;
import jp.riken.brain.ni.samuraigraph.base.SGTextField;
import jp.riken.brain.ni.samuraigraph.base.SGTwoAxesSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;
import jp.riken.brain.ni.samuraigraph.base.SGUtilityText;

/**
 * A property dialog for figures with two-dimensional data.
 */
public class SGXYFigureDialog extends SGPropertyDialog implements
        SGIFigureConstants, SGIFigureTypeConstants, SGILineConstants, 
        SGITwoAxesDialog {

    private static final long serialVersionUID = -5394120960119844819L;

    public static final String TITLE = "Figure Properties";

    /** Creates new form SGFigureDialog */
    public SGXYFigureDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.initialize();
    }
    
        
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mPreviewButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mTabbedPane = new javax.swing.JTabbedPane();
        mFigurePanel = new javax.swing.JPanel();
        mWidthLabel = new javax.swing.JLabel();
        mHeightLabel = new javax.swing.JLabel();
        mWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mHeightSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mLocationLabel = new javax.swing.JLabel();
        mSizeLabel = new javax.swing.JLabel();
        mXLabel = new javax.swing.JLabel();
        mXSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mYLabel = new javax.swing.JLabel();
        mYSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mBackgroundLabel = new javax.swing.JLabel();
        mBackgroundColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mLegendVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mLocationSeparator = new javax.swing.JSeparator();
        mSizeSeparator = new javax.swing.JSeparator();
        mColorSeparator = new javax.swing.JSeparator();
        mBackgroundTransparentCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mColorBarVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mFrameLabel = new javax.swing.JLabel();
        mFrameVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mFrameLineWidthLabel = new javax.swing.JLabel();
        mFrameLineWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mFrameLineColorLabel = new javax.swing.JLabel();
        mFrameColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mFrameSeparator = new javax.swing.JSeparator();
        mOthersLabel = new javax.swing.JLabel();
        mOthersSeparator = new javax.swing.JSeparator();
        mBackgroundColorLabel = new javax.swing.JLabel();
        mDataAnchorCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mAxisScaleVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mGridPanel = new javax.swing.JPanel();
        mInnerGridPanel = new javax.swing.JPanel();
        mGridLineLabel = new javax.swing.JLabel();
        mGridLineSeparator = new javax.swing.JSeparator();
        mGridVisibleCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mGridLocationLabel = new javax.swing.JLabel();
        mGridLocationSeparator = new javax.swing.JSeparator();
        mStepXLabel = new javax.swing.JLabel();
        mStepXTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mBaselineXLabel = new javax.swing.JLabel();
        mBaselineXTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mStepYLabel = new javax.swing.JLabel();
        mStepYTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mBaselineYLabel = new javax.swing.JLabel();
        mBaselineYTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mGridLineTypeLabel = new javax.swing.JLabel();
        mGridLineTypeComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mGridLineWidthLabel = new javax.swing.JLabel();
        mGridLineWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mGridLineColorLabel = new javax.swing.JLabel();
        mGridLineColorButton = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mAutoCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mBaselineXDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mBaselineYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mStepXDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mStepYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        mPreviewButton.setText("Preview");
        mPreviewButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mPreviewButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mTabbedPane.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        mFigurePanel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFigurePanel.setLayout(new java.awt.GridBagLayout());

        mWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mWidthLabel.setText("Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 2, 5);
        mFigurePanel.add(mWidthLabel, gridBagConstraints);

        mHeightLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mHeightLabel.setText("Height");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 2, 5);
        mFigurePanel.add(mHeightLabel, gridBagConstraints);

        mWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mWidthSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mWidthSpinner, gridBagConstraints);

        mHeightSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mHeightSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mHeightSpinner, gridBagConstraints);

        mLocationLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mLocationLabel.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mLocationLabel, gridBagConstraints);

        mSizeLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mSizeLabel.setText("Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mSizeLabel, gridBagConstraints);

        mXLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mXLabel.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 2, 5);
        mFigurePanel.add(mXLabel, gridBagConstraints);

        mXSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mXSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mXSpinner, gridBagConstraints);

        mYLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYLabel.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 2, 5);
        mFigurePanel.add(mYLabel, gridBagConstraints);

        mYSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mYSpinner, gridBagConstraints);

        mBackgroundLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mBackgroundLabel.setText("Background");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mBackgroundLabel, gridBagConstraints);

        mBackgroundColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mBackgroundColorButton, gridBagConstraints);

        mLegendVisibleCheckBox.setText("Legend On/Off");
        mLegendVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 2, 5);
        mFigurePanel.add(mLegendVisibleCheckBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 60, 2, 0);
        mFigurePanel.add(mLocationSeparator, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 35, 2, 0);
        mFigurePanel.add(mSizeSeparator, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 80, 2, 0);
        mFigurePanel.add(mColorSeparator, gridBagConstraints);

        mBackgroundTransparentCheckBox.setText("Transparent");
        mBackgroundTransparentCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 2, 5);
        mFigurePanel.add(mBackgroundTransparentCheckBox, gridBagConstraints);

        mColorBarVisibleCheckBox.setText("Color Bar On/Off");
        mColorBarVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 2, 5);
        mFigurePanel.add(mColorBarVisibleCheckBox, gridBagConstraints);

        mFrameLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mFrameLabel.setText("Frame");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mFrameLabel, gridBagConstraints);

        mFrameVisibleCheckBox.setText("Visible");
        mFrameVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 2, 5);
        mFigurePanel.add(mFrameVisibleCheckBox, gridBagConstraints);

        mFrameLineWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFrameLineWidthLabel.setText("Line Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 2, 5);
        mFigurePanel.add(mFrameLineWidthLabel, gridBagConstraints);

        mFrameLineWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFrameLineWidthSpinner.setPreferredSize(new java.awt.Dimension(70, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mFrameLineWidthSpinner, gridBagConstraints);

        mFrameLineColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mFrameLineColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 2, 5);
        mFigurePanel.add(mFrameLineColorLabel, gridBagConstraints);

        mFrameColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mFrameColorButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 50, 2, 0);
        mFigurePanel.add(mFrameSeparator, gridBagConstraints);

        mOthersLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mOthersLabel.setText("Others");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mFigurePanel.add(mOthersLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 50, 2, 0);
        mFigurePanel.add(mOthersSeparator, gridBagConstraints);

        mBackgroundColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBackgroundColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 2, 5);
        mFigurePanel.add(mBackgroundColorLabel, gridBagConstraints);

        mDataAnchorCheckBox.setText("Data Anchor On/Off");
        mDataAnchorCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 2, 5);
        mFigurePanel.add(mDataAnchorCheckBox, gridBagConstraints);

        mAxisScaleVisibleCheckBox.setText("Scale On/Off");
        mAxisScaleVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 2, 5);
        mFigurePanel.add(mAxisScaleVisibleCheckBox, gridBagConstraints);

        mTabbedPane.addTab("Figure", mFigurePanel);

        mGridPanel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mGridPanel.setLayout(new java.awt.GridBagLayout());

        mInnerGridPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mInnerGridPanel.setLayout(new java.awt.GridBagLayout());

        mGridLineLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mGridLineLabel.setText("Line");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 10, 2, 5);
        mInnerGridPanel.add(mGridLineLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 40, 2, 10);
        mInnerGridPanel.add(mGridLineSeparator, gridBagConstraints);

        mGridVisibleCheckBox.setText("Visible");
        mGridVisibleCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mInnerGridPanel.add(mGridVisibleCheckBox, gridBagConstraints);

        mGridLocationLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        mGridLocationLabel.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 10, 2, 5);
        mInnerGridPanel.add(mGridLocationLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 65, 2, 10);
        mInnerGridPanel.add(mGridLocationSeparator, gridBagConstraints);

        mStepXLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mStepXLabel.setText("Step X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mInnerGridPanel.add(mStepXLabel, gridBagConstraints);

        mStepXTextField.setColumns(6);
        mStepXTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 0);
        mInnerGridPanel.add(mStepXTextField, gridBagConstraints);

        mBaselineXLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBaselineXLabel.setText("Base X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mInnerGridPanel.add(mBaselineXLabel, gridBagConstraints);

        mBaselineXTextField.setColumns(6);
        mBaselineXTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 0);
        mInnerGridPanel.add(mBaselineXTextField, gridBagConstraints);

        mStepYLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mStepYLabel.setText("Step Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mInnerGridPanel.add(mStepYLabel, gridBagConstraints);

        mStepYTextField.setColumns(6);
        mStepYTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 0);
        mInnerGridPanel.add(mStepYTextField, gridBagConstraints);

        mBaselineYLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBaselineYLabel.setText("Base Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mInnerGridPanel.add(mBaselineYLabel, gridBagConstraints);

        mBaselineYTextField.setColumns(6);
        mBaselineYTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 0);
        mInnerGridPanel.add(mBaselineYTextField, gridBagConstraints);

        mGridLineTypeLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mGridLineTypeLabel.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 8, 5);
        mInnerGridPanel.add(mGridLineTypeLabel, gridBagConstraints);

        mGridLineTypeComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mGridLineTypeComboBox.setPreferredSize(new java.awt.Dimension(140, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 8, 5);
        mInnerGridPanel.add(mGridLineTypeComboBox, gridBagConstraints);

        mGridLineWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mGridLineWidthLabel.setText("Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mInnerGridPanel.add(mGridLineWidthLabel, gridBagConstraints);

        mGridLineWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mGridLineWidthSpinner.setMinimumSize(new java.awt.Dimension(65, 20));
        mGridLineWidthSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        mInnerGridPanel.add(mGridLineWidthSpinner, gridBagConstraints);

        mGridLineColorLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mGridLineColorLabel.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 2, 5);
        mInnerGridPanel.add(mGridLineColorLabel, gridBagConstraints);

        mGridLineColorButton.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 10);
        mInnerGridPanel.add(mGridLineColorButton, gridBagConstraints);

        mAutoCheckBox.setText("Auto");
        mAutoCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 5);
        mInnerGridPanel.add(mAutoCheckBox, gridBagConstraints);

        mBaselineXDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        mInnerGridPanel.add(mBaselineXDateButton, gridBagConstraints);

        mBaselineYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        mInnerGridPanel.add(mBaselineYDateButton, gridBagConstraints);

        mStepXDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        mInnerGridPanel.add(mStepXDateButton, gridBagConstraints);

        mStepYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        mInnerGridPanel.add(mStepYDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mGridPanel.add(mInnerGridPanel, gridBagConstraints);

        mTabbedPane.addTab("Grid", mGridPanel);

        getContentPane().add(mTabbedPane, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mAutoCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mAxisScaleVisibleCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mBackgroundColorButton;
    private javax.swing.JLabel mBackgroundColorLabel;
    private javax.swing.JLabel mBackgroundLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mBackgroundTransparentCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mBaselineXDateButton;
    private javax.swing.JLabel mBaselineXLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mBaselineXTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mBaselineYDateButton;
    private javax.swing.JLabel mBaselineYLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mBaselineYTextField;
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mColorBarVisibleCheckBox;
    private javax.swing.JSeparator mColorSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mDataAnchorCheckBox;
    private javax.swing.JPanel mFigurePanel;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mFrameColorButton;
    private javax.swing.JLabel mFrameLabel;
    private javax.swing.JLabel mFrameLineColorLabel;
    private javax.swing.JLabel mFrameLineWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mFrameLineWidthSpinner;
    private javax.swing.JSeparator mFrameSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mFrameVisibleCheckBox;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mGridLineColorButton;
    private javax.swing.JLabel mGridLineColorLabel;
    private javax.swing.JLabel mGridLineLabel;
    private javax.swing.JSeparator mGridLineSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mGridLineTypeComboBox;
    private javax.swing.JLabel mGridLineTypeLabel;
    private javax.swing.JLabel mGridLineWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mGridLineWidthSpinner;
    private javax.swing.JLabel mGridLocationLabel;
    private javax.swing.JSeparator mGridLocationSeparator;
    private javax.swing.JPanel mGridPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mGridVisibleCheckBox;
    private javax.swing.JLabel mHeightLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mHeightSpinner;
    private javax.swing.JPanel mInnerGridPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mLegendVisibleCheckBox;
    private javax.swing.JLabel mLocationLabel;
    private javax.swing.JSeparator mLocationSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JLabel mOthersLabel;
    private javax.swing.JSeparator mOthersSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mPreviewButton;
    private javax.swing.JLabel mSizeLabel;
    private javax.swing.JSeparator mSizeSeparator;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mStepXDateButton;
    private javax.swing.JLabel mStepXLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mStepXTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mStepYDateButton;
    private javax.swing.JLabel mStepYLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mStepYTextField;
    private javax.swing.JTabbedPane mTabbedPane;
    private javax.swing.JLabel mWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mWidthSpinner;
    private javax.swing.JLabel mXLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mXSpinner;
    private javax.swing.JLabel mYLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mYSpinner;
    // End of variables declaration//GEN-END:variables

    private jp.riken.brain.ni.samuraigraph.base.SGTwoAxesSelectionPanel mAxisPanel;

    protected SGComponentGroup mGridComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mAutoComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateXComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateYComponentGroup = new SGComponentGroup();

    private boolean initProperty() {

        // set the title
        this.setTitle(SGXYFigureDialog.TITLE);

        // setup the axis panel
        this.mAxisPanel = new SGTwoAxesSelectionPanel();
        java.awt.GridBagConstraints gridBagConstraints;
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mGridPanel.add(mInnerGridPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mGridPanel.add(mAxisPanel, gridBagConstraints);
    	this.mAxisPanel.addAxisSelectionListener(this);
        
        //
        // set up spinners
        //

        final int digits = -SGIRootObjectConstants.LENGTH_MINIMAL_ORDER;

        this.mXSpinner.initProperties(new SpinnerNumberModel(0.0, FIGURE_X_MIN,
                FIGURE_X_MAX, FIGURE_LOCATION_STEP), FIGURE_LOCATION_UNIT,
                digits, digits);

        this.mYSpinner.initProperties(new SpinnerNumberModel(0.0, FIGURE_Y_MIN,
                FIGURE_Y_MAX, FIGURE_LOCATION_STEP), FIGURE_LOCATION_UNIT,
                digits, digits);

        this.mWidthSpinner.initProperties(new SpinnerNumberModel(10.0,
                FIGURE_WIDTH_MIN, FIGURE_WIDTH_MAX, FIGURE_SIZE_STEP),
                FIGURE_SIZE_UNIT, digits, digits);

        this.mHeightSpinner.initProperties(new SpinnerNumberModel(10.0,
                FIGURE_HEIGHT_MIN, FIGURE_HEIGHT_MAX, FIGURE_SIZE_STEP),
                FIGURE_SIZE_UNIT, digits, digits);

        // frame line width
        this.mFrameLineWidthSpinner.initProperties(
                getLineWidthSpinnerNumberModel(), LINE_WIDTH_UNIT,
                LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);


        // set the combo box
        for (int ii = 0; ii < LINE_NAME_ARRAY.length; ii++) {
        	this.mGridLineTypeComboBox.addItem(LINE_NAME_ARRAY[ii]);
        }

        this.pack();

        // set spinner model
        this.mFrameLineWidthSpinner.initProperties(getLineWidthSpinnerNumberModel(),
                LINE_WIDTH_UNIT, LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);
        this.mGridLineWidthSpinner.initProperties(getLineWidthSpinnerNumberModel(),
                LINE_WIDTH_UNIT, LINE_WIDTH_FRAC_DIGIT_MIN, LINE_WIDTH_FRAC_DIGIT_MAX);

        // set the name
        this.mXSpinner.setDescription("Figure-> Location-> X");
        this.mYSpinner.setDescription("Figure-> Location-> Y");
        this.mWidthSpinner.setDescription("Figure-> Size-> Width");
        this.mHeightSpinner.setDescription("Figure-> Size-> Height");
        this.mFrameLineWidthSpinner.setDescription("Frame-> Width");
        this.mStepXTextField.setDescription("Grid-> Location-> StepX");
        this.mStepYTextField.setDescription("Grid-> Location-> StepY");
        this.mBaselineXTextField.setDescription("Grid-> Location-> BaseX");
        this.mBaselineYTextField.setDescription("Grid-> Location-> BaseY");
        this.mGridLineWidthSpinner.setDescription("Grid-> Line-> Width");

        // set action listeners
        this.mBackgroundTransparentCheckBox.addActionListener(this);
        this.mLegendVisibleCheckBox.addActionListener(this);
        this.mGridVisibleCheckBox.addActionListener(this);
        this.mAutoCheckBox.addActionListener(this);
        this.mGridLineTypeComboBox.addActionListener(this);
        this.mAxisPanel.addActionListener(this);
        this.mColorBarVisibleCheckBox.addActionListener(this);
        this.mFrameVisibleCheckBox.addActionListener(this);
        this.mBaselineXDateButton.addActionListener(this);
        this.mStepXDateButton.addActionListener(this);
        this.mBaselineYDateButton.addActionListener(this);
        this.mStepYDateButton.addActionListener(this);

        // add as a change listener
        this.mTabbedPane.addChangeListener(this);
        
        // creates a map of component groups
        Map<Component, SGComponentGroupElement> compMap = new HashMap<Component, SGComponentGroupElement>();
        this.addComponentGroupMap(this.mGridVisibleCheckBox, compMap);
        this.addComponentGroupMap(this.mGridLocationLabel, compMap);
        this.addComponentGroupMap(this.mAutoCheckBox, compMap);
        this.addComponentGroupMap(this.mBaselineXLabel, compMap);
        this.addComponentGroupMap(this.mBaselineXTextField, compMap);
        this.addComponentGroupMap(this.mBaselineXDateButton, compMap);
        this.addComponentGroupMap(this.mStepXLabel, compMap);
        this.addComponentGroupMap(this.mStepXTextField, compMap);
        this.addComponentGroupMap(this.mStepXDateButton, compMap);
        this.addComponentGroupMap(this.mBaselineYLabel, compMap);
        this.addComponentGroupMap(this.mBaselineYTextField, compMap);
        this.addComponentGroupMap(this.mBaselineYDateButton, compMap);
        this.addComponentGroupMap(this.mStepYLabel, compMap);
        this.addComponentGroupMap(this.mStepYTextField, compMap);
        this.addComponentGroupMap(this.mStepYDateButton, compMap);
        this.addComponentGroupMap(this.mGridLineLabel, compMap);
        this.addComponentGroupMap(this.mGridLineWidthLabel, compMap);
        this.addComponentGroupMap(this.mGridLineWidthSpinner, compMap);
        this.addComponentGroupMap(this.mGridLineTypeLabel, compMap);
        this.addComponentGroupMap(this.mGridLineTypeComboBox, compMap);
        this.addComponentGroupMap(this.mGridLineColorLabel, compMap);
        this.addComponentGroupMap(this.mGridLineColorButton, compMap);
        
        List<SGComponentGroupElement> autoComponents = new ArrayList<SGComponentGroupElement>();
        autoComponents.add(compMap.get(this.mBaselineXLabel));
        autoComponents.add(compMap.get(this.mBaselineXTextField));
        autoComponents.add(compMap.get(this.mBaselineXDateButton));
        autoComponents.add(compMap.get(this.mStepXLabel));
        autoComponents.add(compMap.get(this.mStepXTextField));
        autoComponents.add(compMap.get(this.mStepXDateButton));
        autoComponents.add(compMap.get(this.mBaselineYLabel));
        autoComponents.add(compMap.get(this.mBaselineYTextField));
        autoComponents.add(compMap.get(this.mBaselineYDateButton));
        autoComponents.add(compMap.get(this.mStepYLabel));
        autoComponents.add(compMap.get(this.mStepYTextField));
        autoComponents.add(compMap.get(this.mStepYDateButton));
        
        List<SGComponentGroupElement> dateXComponents = new ArrayList<SGComponentGroupElement>();
        dateXComponents.add(compMap.get(this.mBaselineXDateButton));
        dateXComponents.add(compMap.get(this.mStepXDateButton));

        List<SGComponentGroupElement> dateYComponents = new ArrayList<SGComponentGroupElement>();
        dateYComponents.add(compMap.get(this.mBaselineYDateButton));
        dateYComponents.add(compMap.get(this.mStepYDateButton));

        List<SGComponentGroupElement> gridComponents = new ArrayList<SGComponentGroupElement>();
        gridComponents.addAll(autoComponents);
        gridComponents.add(compMap.get(this.mGridLocationLabel));
        gridComponents.add(compMap.get(this.mAutoCheckBox));
        gridComponents.add(compMap.get(this.mGridLineLabel));
        gridComponents.add(compMap.get(this.mGridLineWidthLabel));
        gridComponents.add(compMap.get(this.mGridLineWidthSpinner));
        gridComponents.add(compMap.get(this.mGridLineTypeLabel));
        gridComponents.add(compMap.get(this.mGridLineTypeComboBox));
        gridComponents.add(compMap.get(this.mGridLineColorLabel));
        gridComponents.add(compMap.get(this.mGridLineColorButton));

        this.mGridComponentGroup.addElement(gridComponents);
        this.mAutoComponentGroup.addElement(autoComponents);
        this.mDateXComponentGroup.addElement(dateXComponents);
        this.mDateYComponentGroup.addElement(dateYComponents);

        // sets the calendar icon
        this.setCalendarIcon(this.mBaselineXDateButton);
        this.setCalendarIcon(this.mStepXDateButton);
        this.setCalendarIcon(this.mBaselineYDateButton);
        this.setCalendarIcon(this.mStepYDateButton);

        return true;
    }

    @Override
    public void actionPerformed(final ActionEvent e) {
        super.actionPerformed(e);
        Object source = e.getSource();
        if (source.equals(this.mBackgroundTransparentCheckBox)) {
            this.setBackgroundTransparent(this.isBackgroundTransparent());
        } else if (source.equals(this.mGridVisibleCheckBox)) {
            this.setGridVisible(this.mGridVisibleCheckBox.getSelected());
        } else if (source.equals(this.mAutoCheckBox)) {
            this.setAutoFlag(this.mAutoCheckBox.getSelected());
        } else if (source.equals(this.mFrameVisibleCheckBox)) {
            this.setFrameLineComponentsEnabled(this.mFrameVisibleCheckBox
                    .isSelected());
        } else if (source.equals(this.mBaselineXDateButton)) {
        	this.onGridDateButtonPressed(this.mBaselineXTextField, true);
        } else if (source.equals(this.mStepXDateButton)) {
        	this.onGridPeriodButtonPressed(this.mStepXTextField, true);
        } else if (source.equals(this.mBaselineYDateButton)) {
        	this.onGridDateButtonPressed(this.mBaselineYTextField, false);
        } else if (source.equals(this.mStepYDateButton)) {
        	this.onGridPeriodButtonPressed(this.mStepYTextField, false);
        }
    }

    private void onGridDateButtonPressed(SGTextField field, final boolean horizontal) {
    	SGDateInputDialog dg = new SGDateInputDialog(this, true);
    	String str = field.getText();
    	Double d = SGUtilityText.getDouble(str);
    	if (d != null) {
    		dg.setDate(d.doubleValue());
    	} else {
    		SGDate date = SGUtilityText.getDate(str);
    		if (date == null) {
    			return;
    		}
    		dg.setDate(date.getDateValue());
    	}
    	dg.setCenter(this);
    	dg.setVisible(true);
    	
    	final int closeOption = dg.getCloseOption();
    	if (closeOption == OK_OPTION) {
    		SGDate date = dg.getDate();
    		if (this.isDateMode(horizontal)) {
    			field.setText(date.toString());
    		} else {
        		field.setText(Double.toString(date.getDateValue()));
    		}
    	}
    }

    private void onGridPeriodButtonPressed(SGTextField field, final boolean horizontal) {
    	SGPeriodInputDialog dg = new SGPeriodInputDialog(this, true);
    	String str = field.getText();
    	Double d = SGUtilityText.getDouble(str);
    	if (d != null) {
        	dg.setPeriod(d.doubleValue());
    	} else {
    		Period p = SGUtilityText.getPeriod(str);
    		if (p == null) {
    			return;
    		}
    		dg.setPeriod(p);
    	}
    	dg.setCenter(this);
    	dg.setVisible(true);
    	
    	final int closeOption = dg.getCloseOption();
    	if (closeOption == OK_OPTION) {
    		Period p = dg.getPeriod();
    		if (this.isDateMode(horizontal)) {
        		field.setText(p.toString());
    		} else {
    			field.setText(Double.toString(SGDateUtility.toApproximateDateValue(p)));
    		}
    	}
    }

    /**
     * 
     */
    public Number getFigureX() {
        return this.mXSpinner.getNumber();
    }

    /**
     * 
     */
    public Number getFigureY() {
        return this.mYSpinner.getNumber();
    }

    /**
     * 
     */
    public Number getFigureWidth() {
        return this.mWidthSpinner.getNumber();
    }

    /**
     * 
     */
    public Number getFigureHeight() {
        return this.mHeightSpinner.getNumber();
    }

    /**
     * 
     */
    public Color getBackgroundColor() {
        return this.mBackgroundColorButton.getColor();
    }

    /**
     * 
     * @return
     */
    public Boolean isBackgroundTransparent() {
        return this.mBackgroundTransparentCheckBox.getSelected();
    }

    /**
     * 
     */
    public Boolean getFigureLegendVisible() {
        return this.mLegendVisibleCheckBox.getSelected();
    }

    /**
     * 
     */
    public boolean setFigureX(final Object value) {
        return this.setValue(this.mXSpinner, value);
    }

    /**
     * 
     */
    public boolean setFigureY(final Object value) {
        return this.setValue(this.mYSpinner, value);
    }

    /**
     * 
     */
    public boolean setFigureWidth(final Object value) {
        return this.setValue(this.mWidthSpinner, value);
    }

    /**
     * 
     */
    public boolean setFigureHeight(final Object value) {
        return this.setValue(this.mHeightSpinner, value);
    }

    /**
     * 
     */
    public boolean setBackgroundColor(final Color cl) {
        this.mBackgroundColorButton.setColor(cl);
        return true;
    }

    /**
     * 
     */
    public boolean setBackgroundTransparent(final Boolean b) {
        this.mBackgroundTransparentCheckBox.setSelected(b);
        this.setBackgroundComponentsEnabled(b);
        return true;
    }
    
    public boolean setDataAnchored(final Boolean b) {
    	this.mDataAnchorCheckBox.setSelected(b);
    	return true;
    }

    /**
     * 
     * @param transparent
     * @return
     */
    private boolean setBackgroundComponentsEnabled(final Boolean transparent) {
        boolean b = true;
        if (transparent != null) {
            b = !transparent.booleanValue();
        }
        this.mBackgroundColorButton.setEnabled(b);
        return true;
    }

    private boolean setFrameLineComponentsEnabled(final boolean b) {
        this.mFrameLineWidthLabel.setEnabled(b);
        this.mFrameLineWidthSpinner.setEnabled(b);
        this.mFrameLineColorLabel.setEnabled(b);
        this.mFrameColorButton.setEnabled(b);
        return true;
    }

    /**
     * 
     */
    public Boolean isFrameLinesVisible() {
        return this.mFrameVisibleCheckBox.getSelected();
    }

    /**
     * 
     */
    public Number getFrameLineWidth() {
        return this.mFrameLineWidthSpinner.getNumber();
    }

    /**
     * 
     */
    public Color getFrameLineColor() {
        return this.mFrameColorButton.getColor();
    }

    /**
     * 
     */
    public void setFrameVisible(final Boolean b) {
        this.mFrameVisibleCheckBox.setSelected(b);
        boolean flag = true;
        ;
        if (b != null) {
            flag = b.booleanValue();
        }
        this.setFrameLineComponentsEnabled(flag);
    }

    /**
     * 
     */
    public boolean setFrameLineWidth(final Object value) {
        return this.setValue(this.mFrameLineWidthSpinner, value);
    }

    /**
     * 
     */
    public boolean setFrameLineColor(final Color cl) {
        this.mFrameColorButton.setColor(cl);
        return true;
    }

    /**
     * 
     */
    public boolean setFigureLegendVisible(final Boolean b) {
        this.mLegendVisibleCheckBox.setSelected(b);
        return true;
    }

    public void setGridVisible(final Boolean b) {
        this.mGridVisibleCheckBox.setSelected(b);
        final boolean visible = (b != null) ? b.booleanValue() : false;
        this.mGridComponentGroup.setEnabled(visible);
    }

    public void setAutoFlag(final Boolean b) {
        this.mAutoCheckBox.setSelected(b);
        final boolean auto = (b != null) ? b.booleanValue() : false;
        this.mAutoComponentGroup.setEnabled(!auto);
    }

    public boolean setGridLineType(final Integer type) {
        if (type != null) {
            final String typeName = SGDrawingElementLine.getLineTypeName(type
                    .intValue());
            this.mGridLineTypeComboBox.setSelectedItem(typeName);
        } else {
            this.mGridLineTypeComboBox.setSelectedItem(null);
        }

        return true;
    }

    /**
     * 
     * @return
     */
    public Boolean getGridVisible() {
        return this.mGridVisibleCheckBox.getSelected();
    }

    /**
     * 
     */
    public int getGridLineType() {
        final String typeName = (String) this.mGridLineTypeComboBox
                .getSelectedItem();
        final Integer num = SGDrawingElementLine.getLineTypeFromName(typeName);
        if (num == null) {
            return -1;
        }
        return num.intValue();
    }

    /**
     * 
     */
    public boolean setGridLineWidth(final Object obj) {
        return this.setValue(this.mGridLineWidthSpinner, obj);
    }

    /**
     * 
     */
    public Number getGridLineWidth() {
        return this.mGridLineWidthSpinner.getNumber();
    }

    /**
     * 
     */
    public boolean setGridLineColor(final Color cl) {
        this.mGridLineColorButton.setColor(cl);
        return true;
    }

    /**
     * 
     */
    public Color getGridLineColor() {
        return this.mGridLineColorButton.getColor();
    }

    /**
     * 
     * @return
     */
    public Boolean getAutoFlag() {
        return this.mAutoCheckBox.getSelected();
    }

    /**
     * 
     */
    public SGAxisValue getBaseXValue() throws ParseException {
        String str = this.mBaselineXTextField.getText();
        return SGUtility.getAxisValue(str, this.isDateMode(true));
    }

    /**
     * 
     */
    public SGAxisValue getBaseYValue() throws ParseException {
        String str = this.mBaselineYTextField.getText();
        return SGUtility.getAxisValue(str, this.isDateMode(false));
    }
    
    /**
     * 
     */
    public SGAxisStepValue getStepXValue() throws ParseException {
        String str = this.mStepXTextField.getText();
        return SGUtility.getAxisStepValue(str, this.isDateMode(true));
    }

    /**
     * 
     */
    public SGAxisStepValue getStepYValue() throws ParseException {
        String str = this.mStepYTextField.getText();
        return SGUtility.getAxisStepValue(str, this.isDateMode(false));
    }

    private Boolean isDateMode(final boolean horizontal) {
    	final int location = horizontal ? this.mAxisPanel.getXAxisLocation()
    			: this.mAxisPanel.getYAxisLocation();
    	boolean[] bArray = new boolean[this.mPropertyDialogObserverList.size()];
    	for (int ii = 0; ii < this.mPropertyDialogObserverList.size(); ii++) {
    		SGIXYFigureDialogObserver l = (SGIXYFigureDialogObserver) this
    				.mPropertyDialogObserverList.get(ii);
    		bArray[ii] = l.getAxisDateMode(location);
    	}
    	Boolean dateMode = SGUtility.checkEquality(bArray);
    	return dateMode;
    }

    /**
     * 
     * @param value
     */
    public boolean setBaseXValue(final Object value, final boolean dateMode) {
    	if (dateMode) {
            return SGDateUtility.setDateValue(this.mBaselineXTextField, value,
            		SGDateUtility.getUTCTimeZoneInstance());
    	} else {
            return SGUtility.setDoubleValue(this.mBaselineXTextField, value);
    	}
    }

    /**
     * 
     * @param value
     */
    public boolean setStepXValue(final Object value, final boolean dateMode) {
    	if (dateMode) {
            return SGDateUtility.setPeriodValue(this.mStepXTextField, value);
    	} else {
            return SGUtility.setDoubleValue(this.mStepXTextField, value);
    	}
    }

    /**
     * 
     * @param value
     */
    public boolean setBaseYValue(final Object value, final boolean dateMode) {
    	if (dateMode) {
            return SGDateUtility.setDateValue(this.mBaselineYTextField, value,
            		SGDateUtility.getUTCTimeZoneInstance());
    	} else {
            return SGUtility.setDoubleValue(this.mBaselineYTextField, value);
    	}
    }

    /**
     * 
     * @param value
     */
    public boolean setStepYValue(final Object value, final boolean dateMode) {
    	if (dateMode) {
            return SGDateUtility.setPeriodValue(this.mStepYTextField, value);
    	} else {
            return SGUtility.setDoubleValue(this.mStepYTextField, value);
    	}
    }

    /**
     * 
     */
    public List getTextFieldComponentsList() {
        final List list = this.getFormattedTextFieldsListFromSpinners();
        list.addAll(this.getAxisNumberTextFieldList());
        return list;
    }

    /**
     * Returns a list of text fields to set number.
     * 
     * @return
     */
    public List getAxisNumberTextFieldList() {
        ArrayList list = new ArrayList();
        list.add(this.mStepXTextField);
        list.add(this.mStepYTextField);
        list.add(this.mBaselineXTextField);
        list.add(this.mBaselineYTextField);
        return list;
    }

    /**
     * 
     */
    public List getColorSelectionButtonsList() {
        final ArrayList list = new ArrayList();
        list.add(this.mBackgroundColorButton);
        list.add(this.mFrameColorButton);
        list.add(this.mGridLineColorButton);
        return list;
    }

    /**
     * 
     */
    public List getSpinnerList() {
        ArrayList list = new ArrayList();
        list.add(this.mXSpinner);
        list.add(this.mYSpinner);
        list.add(this.mWidthSpinner);
        list.add(this.mHeightSpinner);
        list.add(this.mFrameLineWidthSpinner);
        list.add(this.mGridLineWidthSpinner);
        return list;
    }

    /**
     * 
     */
    public boolean setDialogProperty() {
        final List<SGIPropertyDialogObserver> list = this.mPropertyDialogObserverList;
        final int num = list.size();

        final float[] xArray = new float[num];
        final float[] yArray = new float[num];
        final float[] widthArray = new float[num];
        final float[] heightArray = new float[num];
        final Color[] bgColorArray = new Color[num];
        final boolean[] transparentArray = new boolean[num];
        final float[] frameLineWidthArray = new float[num];
        final Color[] frameLineColorArray = new Color[num];
        final boolean[] frameLineVisibleArray = new boolean[num];
        final boolean[] legendVisibleArray = new boolean[num];
        final boolean[] colorBarVisibleArray = new boolean[num];
        final boolean[] scaleVisibleArray = new boolean[num];
        final boolean[] dataAnchoredArray = new boolean[num];
        
        for (int ii = 0; ii < num; ii++) {
        	SGIFigureDialogObserver l = (SGIFigureDialogObserver) list.get(ii);
        	xArray[ii] = l.getFigureX(FIGURE_LOCATION_UNIT);
        	yArray[ii] = l.getFigureY(FIGURE_LOCATION_UNIT);
        	widthArray[ii] = l.getFigureWidth(FIGURE_SIZE_UNIT);
        	heightArray[ii] = l.getFigureHeight(FIGURE_SIZE_UNIT);
        	bgColorArray[ii] = l.getBackgroundColor();
        	transparentArray[ii] = l.isTransparent();
        	frameLineWidthArray[ii] = l.getFrameLineWidth(LINE_WIDTH_UNIT);
        	frameLineColorArray[ii] = l.getFrameLineColor();
        	frameLineVisibleArray[ii] = l.isFrameLineVisible();
        	legendVisibleArray[ii] = l.isLegendVisible();
        	colorBarVisibleArray[ii] = l.isColorBarVisible();
        	scaleVisibleArray[ii] = l.isAxisScaleVisible();
        	dataAnchoredArray[ii] = l.isDataAnchored();
        }
        
        Float x = SGUtility.checkEquality(xArray);
        Float y = SGUtility.checkEquality(yArray);
        Float width = SGUtility.checkEquality(widthArray);
        Float height = SGUtility.checkEquality(heightArray);
        Color bgColor = SGUtility.checkEquality(bgColorArray);
        Boolean transparent = SGUtility.checkEquality(transparentArray);
        Float frameLineWidth = SGUtility.checkEquality(frameLineWidthArray);
        Color frameLineColor =SGUtility.checkEquality(frameLineColorArray);
        Boolean frameLineVisible = SGUtility.checkEquality(frameLineVisibleArray);
        Boolean legendVisible = SGUtility.checkEquality(legendVisibleArray);
        Boolean colorBarVisible = SGUtility.checkEquality(colorBarVisibleArray);
        Boolean scaleVisible = SGUtility.checkEquality(scaleVisibleArray);
        Boolean dataAnchored = SGUtility.checkEquality(dataAnchoredArray);

        this.setFigureX(x);
        this.setFigureY(y);
        this.setFigureWidth(width);
        this.setFigureHeight(height);
        this.setFrameVisible(frameLineVisible);
        this.setFrameLineWidth(frameLineWidth);
        this.setFrameLineColor(frameLineColor);
        this.setBackgroundColor(bgColor);
        this.setBackgroundTransparent(transparent);

        // legend visible
        this.setFigureLegendVisible(legendVisible);
        Boolean legendAvailable = true;
        for (int ii = 0; ii < list.size(); ii++) {
            SGIFigureDialogObserver figure = (SGIFigureDialogObserver) list
                    .get(ii);
            if (figure.isLegendAvailable() == false) {
                legendAvailable = false;
                break;
            }
        }
        this.mLegendVisibleCheckBox.setEnabled(legendAvailable);

        // color bar visible
        this.mColorBarVisibleCheckBox.setSelected(colorBarVisible);
        Boolean colorBarAvailable = true;
        for (int ii = 0; ii < list.size(); ii++) {
            SGIFigureDialogObserver figure = (SGIFigureDialogObserver) list
                    .get(ii);
            if (figure.isColorBarAvailable() == false) {
                colorBarAvailable = false;
                break;
            }
        }
        this.mColorBarVisibleCheckBox.setEnabled(colorBarAvailable);
        
        // scale visible
        this.mAxisScaleVisibleCheckBox.setSelected(scaleVisible);
        
        // data anchored
        this.setDataAnchored(dataAnchored);

        // grid properties
        if (this.setGridProperty() == false) {
            return false;
        }

        return true;
    }

    private boolean isGridTabEnable() {
        return this.mTabbedPane.isEnabledAt(1);
    }

    private boolean getDateMode(final boolean horizontal) {
    	final int location = horizontal ? this.mAxisPanel.getXAxisLocation()
    			: this.mAxisPanel.getYAxisLocation();
        List<SGIPropertyDialogObserver> list = this.mPropertyDialogObserverList;
        final int num = list.size();
        final boolean[] dateModeFlagArray = new boolean[num];
        for (int ii = 0; ii < num; ii++) {
        	SGIXYFigureDialogObserver l = (SGIXYFigureDialogObserver) list.get(ii);
//            dateModeFlagArray[ii] = l.getGridDateMode(horizontal);
        	dateModeFlagArray[ii] = l.getAxisDateMode(location);
        }
        Boolean dateModeFlag = SGUtility.checkEquality(dateModeFlagArray);
        final boolean ret = (dateModeFlag != null) ? dateModeFlag : false;
        return ret;
    }
    
    private boolean setGridProperty() {
        List<SGIPropertyDialogObserver> list = this.mPropertyDialogObserverList;
        final int num = list.size();

        // select axis panel
        selectAxisPanel(this, this.mAxisPanel, list);

        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, list);

        final boolean[] gridVisibleArray = new boolean[num];
        final boolean[] autoRangeArray = new boolean[num];
        final SGAxisValue[] baselineValueXArray = new SGAxisValue[num];
        final SGAxisStepValue[] stepValueXArray = new SGAxisStepValue[num];
        final SGAxisValue[] baselineValueYArray = new SGAxisValue[num];
        final SGAxisStepValue[] stepValueYArray = new SGAxisStepValue[num];
        final float[] lineWidthArray = new float[num];
        final int[] lineTypeArray = new int[num];
        final Color[] lineColorArray = new Color[num];
        for (int ii = 0; ii < num; ii++) {
        	SGIXYFigureDialogObserver l = (SGIXYFigureDialogObserver) list.get(ii);
            gridVisibleArray[ii] = l.isGridVisible();
            autoRangeArray[ii] = l.isAutoCalculateRange();
            baselineValueXArray[ii] = l.getGridBaselineValueX();
            stepValueXArray[ii] = l.getGridStepValueX();
            baselineValueYArray[ii] = l.getGridBaselineValueY();
            stepValueYArray[ii] = l.getGridStepValueY();
            lineWidthArray[ii] = l.getGridLineWidth(LINE_WIDTH_UNIT);
            lineTypeArray[ii] = l.getGridLineType();
            lineColorArray[ii] = l.getGridLineColor();
        }

        // checks the equality
        Boolean gridVisible = SGUtility.checkEquality(gridVisibleArray);
        Boolean autoRangeFlag = SGUtility.checkEquality(autoRangeArray);
        Object baselineValueX = SGUtility.checkEquality(baselineValueXArray);
        Object stepValueX = SGUtility.checkEquality(stepValueXArray);
        Object baselineValueY = SGUtility.checkEquality(baselineValueYArray);
        Object stepValueY = SGUtility.checkEquality(stepValueYArray);
        Float lineWidth = SGUtility.checkEquality(lineWidthArray);
        Integer lineType = SGUtility.checkEquality(lineTypeArray);
        Color lineColor = SGUtility.checkEquality(lineColorArray);

        // sets parameters to the components
        final boolean dateModeX = this.getDateMode(true);
        final boolean dateModeY = this.getDateMode(false);
        this.setAutoFlag(autoRangeFlag);
        this.setGridVisible(gridVisible);
        this.setStepXValue(stepValueX, dateModeX);
        this.setStepYValue(stepValueY, dateModeY);
        this.setBaseXValue(baselineValueX, dateModeX);
        this.setBaseYValue(baselineValueY, dateModeY);
        this.setGridLineWidth(lineWidth);
        this.setGridLineType(lineType);
        this.setGridLineColor(lineColor);

        return true;
    }

    /**
     * 
     */
    public boolean setPropertiesToObserver(SGIPropertyDialogObserver l) {

        SGIXYFigureDialogObserver figure = (SGIXYFigureDialogObserver) l;

        // x
        final Number x = this.getFigureX();
        if (x != null) {
            figure.setFigureX(x.floatValue(), cm);
        }

        // y
        final Number y = this.getFigureY();
        if (y != null) {
            figure.setFigureY(y.floatValue(), cm);
        }

        // width
        final Number width = this.getFigureWidth();
        if (width != null) {
            figure.setFigureWidth(width.floatValue(), cm);
        }

        // height
        final Number height = this.getFigureHeight();
        if (height != null) {
            figure.setFigureHeight(height.floatValue(), cm);
        }

        final Boolean frameVisible = this.isFrameLinesVisible();
        if (frameVisible != null) {
        	figure.setFrameVisible(frameVisible.booleanValue());
        }

        final Number frameLineWidth = this.getFrameLineWidth();
        if (frameLineWidth != null) {
        	figure.setFrameLineWidth(frameLineWidth.floatValue(), pt);
        }

        final Color frameLineColor = this.getFrameLineColor();
        if (frameLineColor != null) {
        	figure.setFrameLineColor(frameLineColor);
        }

        // transparent
        final Boolean transparent = this.isBackgroundTransparent();
        if (transparent != null) {
            figure.setTransparent(transparent.booleanValue());
        }

        // background color
        final Color bgColor = this.getBackgroundColor();
        if (bgColor != null) {
            figure.setBackgroundColor(bgColor);
        }

        // legend visible
        final Boolean legendVisible = this.getFigureLegendVisible();
        if (legendVisible != null) {
            figure.setLegendVisible(legendVisible.booleanValue());
        }

        // color bar visible
        if (this.mColorBarVisibleCheckBox.isEnabled()) {
            final Boolean colorBarVisible = this.mColorBarVisibleCheckBox.getSelected();
            if (colorBarVisible != null) {
                figure.setColorBarVisible(colorBarVisible.booleanValue());
            }
        }
        
        // scale visible
        final Boolean scaleVisible = this.mAxisScaleVisibleCheckBox.getSelected();
        if (scaleVisible != null) {
        	figure.setAxisScaleVisible(scaleVisible.booleanValue());
        }
        
        // data anchor
        if (this.mDataAnchorCheckBox.isEnabled()) {
        	final Boolean dataAnchored = this.mDataAnchorCheckBox.getSelected();
        	if (dataAnchored != null) {
        		figure.setDataAnchored(dataAnchored);
        	}
        }

        // grid properties
        if (this.isGridTabEnable()) {
            if (this.setPropertiesToGridListeners(figure) == false) {
                return false;
            }
        }

        return true;
    }

    private static final String MSG_STEP_ERROR = "Zero value is set to the step value";

    private boolean setPropertiesToGridListeners(SGIXYFigureDialogObserver l) {

        SGIXYFigureDialogObserver grid = l;

        final int xLocation = this.mAxisPanel.getXAxisLocation();
        final int yLocation = this.mAxisPanel.getYAxisLocation();
        Boolean visible = this.getGridVisible();
        Boolean auto = this.getAutoFlag();
        Number lineWidth = this.getGridLineWidth();
        final int type = this.getGridLineType();
        final Color cl = this.getGridLineColor();

        // checks input values
        boolean validAxisValue = true;
        SGAxisValue baseX = null;
        try {
			baseX = this.getBaseXValue();
		} catch (ParseException e) {
            if (auto != null && !auto) {
    			this.addInputErrorDescription(
    					this.mBaselineXTextField.getDescription());
    			validAxisValue = false;
            }
		}
        SGAxisStepValue stepX = null;
        try {
			stepX = this.getStepXValue();
		} catch (ParseException e) {
            if (auto != null && !auto) {
    			this.addInputErrorDescription(
    					this.mStepXTextField.getDescription());
    			validAxisValue = false;
            }
		}
        SGAxisValue baseY = null;
        try {
			baseY = this.getBaseYValue();
		} catch (ParseException e) {
            if (auto != null && !auto) {
    			this.addInputErrorDescription(
    					this.mBaselineYTextField.getDescription());
    			validAxisValue = false;
            }
		}
        SGAxisStepValue stepY = null;
        try {
			stepY = this.getStepYValue();
		} catch (ParseException e) {
            if (auto != null && !auto) {
    			this.addInputErrorDescription(
    					this.mStepYTextField.getDescription());
    			validAxisValue = false;
            }
		}
        if (!validAxisValue) {
        	return false;
        }

        boolean valid = true;
        String msg = MSG_STEP_ERROR + ": ";
        if (l.hasValidStepXValue(stepX) == false) {
            valid = false;
            msg += "X";
        }
        if (l.hasValidStepYValue(stepY) == false) {
            if (!valid) {
                msg += "and ";
            }
            valid = false;
            msg += "Y";
        }
        if (!valid) {
            this.setInputErrorMessage(msg);
            return false;
        }

        // set the related axes
        if (xLocation != -1) {
            grid.setXAxisLocation(xLocation);
        }

        if (yLocation != -1) {
            grid.setYAxisLocation(yLocation);
        }

        if (visible != null) {
            if (grid.setGridVisible(visible.booleanValue()) == false) {
                return false;
            }
        }

        if (auto != null) {
            if (grid.setAutoCalculateRange(auto.booleanValue()) == false) {
                return false;
            }
        }

        if (baseX != null) {
            if (grid.setGridBaselineValueX(baseX) == false) {
                return false;
            }
        }

        if (baseY != null) {
            if (grid.setGridBaselineValueY(baseY) == false) {
                return false;
            }
        }

        if (stepX != null) {
            if (grid.setGridStepValueX(stepX) == false) {
                return false;
            }
        }

        if (stepY != null) {
            if (grid.setGridStepValueY(stepY) == false) {
                return false;
            }
        }

        if (lineWidth != null) {
            if (grid.setGridLineWidth(lineWidth.floatValue(), pt) == false) {
                return false;
            }
        }

        if (type != -1) {
            if (grid.setGridLineType(type) == false) {
                return false;
            }
        }

        if (cl != null) {
            if (grid.setGridLineColor(cl) == false) {
                return false;
            }
        }

        return true;
    }

    /**
     * Overrode this method to check the input values.
     * 
     * @return true if all input values are valid
     */
    protected boolean hasValidInputValues() {
        boolean valid = true;
        if (super.hasValidInputValues() == false) {
            valid = false;
        }
        if (this.hasValidNumber(this.mBaselineXTextField, false) == false) {
            if (this.hasValidDate(this.mBaselineXTextField, true) == false) {
            	valid = false;
            }
        }
        if (this.hasValidNumber(this.mStepXTextField, false) == false) {
            if (this.hasValidPeriod(this.mStepXTextField, true) == false) {
            	valid = false;
            }
        }
        if (this.hasValidNumber(this.mBaselineYTextField, false) == false) {
            if (this.hasValidDate(this.mBaselineYTextField, true) == false) {
            	valid = false;
            }
        }
        if (this.hasValidNumber(this.mStepYTextField, false) == false) {
            if (this.hasValidPeriod(this.mStepYTextField, true) == false) {
            	valid = false;
            }
        }
        return valid;
    }

    /**
     * Returns the OK button.
     * @return
     *        the OK button
     */
    protected JButton getOKButton() {
        return this.mOKButton;
    }
    
    /**
     * Returns the cancel button.
     * @return
     *        the cancel button
     */
    protected JButton getCancelButton() {
        return this.mCancelButton;
    }
    
    /**
     * Returns the preview button.
     * @return
     *        the preview button
     */
    protected JButton getPreviewButton() {
        return this.mPreviewButton;
    }

    /**
     * 
     */
    public void stateChanged(ChangeEvent e) {
        super.stateChanged(e);
        Object source = e.getSource();

        if (source.equals(this.mTabbedPane)) {
            int index = this.mTabbedPane.getSelectedIndex();
            this.setColorButtonProperty(index);
        }
    }

    /**
     * 
     */
    protected boolean setColorButtonProperty(int tabIndex) {

        int figureIndex = this.mTabbedPane.indexOfComponent(this.mFigurePanel);
        int gridIndex = this.mTabbedPane.indexOfComponent(this.mGridPanel);

        SGColorSelectionButton btn = null;
        if (tabIndex == figureIndex) {
            if (this.mBackgroundTransparentCheckBox.isSelected() == false) {
                btn = this.mBackgroundColorButton;
            }
        } else if (tabIndex == gridIndex) {
            if (this.mGridVisibleCheckBox.isSelected()) {
                btn = this.mGridLineColorButton;
            }
        }

        if (btn == null) {
            return false;
        }

        return true;
    }

	@Override
	public void onXAxisDateSelected(boolean selected) {
		this.mDateXComponentGroup.setEnabled(selected);
		
        // convert values
        SGDateUtility.convertDateValue(this.mBaselineXTextField, selected);
        SGDateUtility.convertPeriodValue(this.mStepXTextField, selected);
	}

	@Override
	public void onYAxisDateSelected(boolean selected) {
		this.mDateYComponentGroup.setEnabled(selected);
		
        // convert values
        SGDateUtility.convertDateValue(this.mBaselineYTextField, selected);
        SGDateUtility.convertPeriodValue(this.mStepYTextField, selected);
	}

	@Override
	public void onAxisSelectionStateChanged(SGAxisSelectionPanel axisPanel) {
        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, 
        		this.mPropertyDialogObserverList);
	}
}
