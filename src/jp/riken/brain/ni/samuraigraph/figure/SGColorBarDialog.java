package jp.riken.brain.ni.samuraigraph.figure;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;
import javax.swing.SpinnerNumberModel;

import jp.riken.brain.ni.samuraigraph.base.SGAxisSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGColorMap;
import jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroup;
import jp.riken.brain.ni.samuraigraph.base.SGComponentGroupElement;
import jp.riken.brain.ni.samuraigraph.base.SGIFigureConstants;
import jp.riken.brain.ni.samuraigraph.base.SGIPropertyDialogObserver;
import jp.riken.brain.ni.samuraigraph.base.SGITwoAxesDialog;
import jp.riken.brain.ni.samuraigraph.base.SGSpinner;
import jp.riken.brain.ni.samuraigraph.base.SGTextField;
import jp.riken.brain.ni.samuraigraph.base.SGTwoAxesSelectionPanel;
import jp.riken.brain.ni.samuraigraph.base.SGUtility;

/**
 * Property dialog for the color bar.
 * 
 */
public class SGColorBarDialog extends SGAxisDialog
    implements SGIColorBarConstants, SGIFigureConstants, 
    SGIAxisConstants, ItemListener, SGITwoAxesDialog {

    /**
     * Serial version UID.
     */
    private static final long serialVersionUID = -5966935892328455296L;
    
    /**
     * The title of this dialog.
     */
    public static final String TITLE = "Color Bar Properties";
    
    /** Creates new form SGColorMapDialog */
    public SGColorBarDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.initProperty();
        this.pack();
    }
    
    @Override
    protected void setupTab() {
    	this.mTabbedPane.addTab("Style", this.mStyleTabPanel);
    	this.mTabbedPane.addTab("Layout", this.mLayoutTabPanel);
    	this.mTabbedPane.addTab("Frame Line", this.mAxisLineTabPanel);
    	this.mTabbedPane.addTab("Title", this.mTitleTabPanel);
//    	this.mTabbedPane.addTab("Scale", this.mScaleTabPanel);
    	this.mTabbedPane.addTab("Number", this.mNumberTabPanel);
    	this.mTabbedPane.addTab("Tick Mark", this.mTickMarkTabPanel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mStyleTabPanel = new javax.swing.JPanel();
        mStyleSubPanel = new javax.swing.JPanel();
        mColorBarStyleLabel = new javax.swing.JLabel();
        mColorBarStyleComboBox = new jp.riken.brain.ni.samuraigraph.base.SGComboBox();
        mColorBarRenderParentPanel = new javax.swing.JPanel();
        mReversedOrderCheckBox = new jp.riken.brain.ni.samuraigraph.base.SGCheckBox();
        mGradientColorPanel = new javax.swing.JPanel();
        mColor2Label = new javax.swing.JLabel();
        mColor1Label = new javax.swing.JLabel();
        mColor2Button = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mColor1Button = new jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton();
        mLayoutTabPanel = new javax.swing.JPanel();
        mLayoutSubPanel = new javax.swing.JPanel();
        mXLabel = new javax.swing.JLabel();
        mYLabel = new javax.swing.JLabel();
        mBarWidthLabel = new javax.swing.JLabel();
        mBarWidthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mBarLengthLabel = new javax.swing.JLabel();
        mBarLengthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mDirectionLabel = new javax.swing.JLabel();
        mDirectionPanel = new javax.swing.JPanel();
        mHorizontalUpperRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mVerticalLeftRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mHorizontalLowerRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mVerticalRightRadioButton = new jp.riken.brain.ni.samuraigraph.base.SGRadioButton();
        mStartXPanel = new javax.swing.JPanel();
        mXValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mXDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mEndXPanel = new javax.swing.JPanel();
        mYValueTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mYDateButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();

        mStyleTabPanel.setLayout(new java.awt.GridBagLayout());

        mStyleSubPanel.setLayout(new java.awt.GridBagLayout());

        mColorBarStyleLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mColorBarStyleLabel.setText("Style");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mStyleSubPanel.add(mColorBarStyleLabel, gridBagConstraints);

        mColorBarStyleComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        mStyleSubPanel.add(mColorBarStyleComboBox, gridBagConstraints);

        mColorBarRenderParentPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mColorBarRenderParentPanel.setPreferredSize(new java.awt.Dimension(200, 20));
        mColorBarRenderParentPanel.setLayout(new javax.swing.BoxLayout(mColorBarRenderParentPanel, javax.swing.BoxLayout.LINE_AXIS));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mStyleSubPanel.add(mColorBarRenderParentPanel, gridBagConstraints);

        mReversedOrderCheckBox.setText("Reversed Order");
        mReversedOrderCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        mStyleSubPanel.add(mReversedOrderCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        mStyleTabPanel.add(mStyleSubPanel, gridBagConstraints);

        mGradientColorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Colors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mGradientColorPanel.setLayout(new java.awt.GridBagLayout());

        mColor2Label.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mColor2Label.setText("Color2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 2, 5);
        mGradientColorPanel.add(mColor2Label, gridBagConstraints);

        mColor1Label.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mColor1Label.setText("Color1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 2, 5);
        mGradientColorPanel.add(mColor1Label, gridBagConstraints);

        mColor2Button.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        mColor2Button.setMinimumSize(new java.awt.Dimension(65, 20));
        mColor2Button.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 10);
        mGradientColorPanel.add(mColor2Button, gridBagConstraints);

        mColor1Button.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        mColor1Button.setMinimumSize(new java.awt.Dimension(65, 20));
        mColor1Button.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 10);
        mGradientColorPanel.add(mColor1Button, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        mStyleTabPanel.add(mGradientColorPanel, gridBagConstraints);

        mLayoutTabPanel.setLayout(new java.awt.GridBagLayout());

        mLayoutSubPanel.setLayout(new java.awt.GridBagLayout());

        mXLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mXLabel.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mLayoutSubPanel.add(mXLabel, gridBagConstraints);

        mYLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYLabel.setText("Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mLayoutSubPanel.add(mYLabel, gridBagConstraints);

        mBarWidthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBarWidthLabel.setText("Width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mLayoutSubPanel.add(mBarWidthLabel, gridBagConstraints);

        mBarWidthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBarWidthSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLayoutSubPanel.add(mBarWidthSpinner, gridBagConstraints);

        mBarLengthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBarLengthLabel.setText("Length");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 16, 0, 0);
        mLayoutSubPanel.add(mBarLengthLabel, gridBagConstraints);

        mBarLengthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mBarLengthSpinner.setPreferredSize(new java.awt.Dimension(75, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLayoutSubPanel.add(mBarLengthSpinner, gridBagConstraints);

        mDirectionLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mDirectionLabel.setText("Direction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mLayoutSubPanel.add(mDirectionLabel, gridBagConstraints);

        mDirectionPanel.setLayout(new java.awt.GridBagLayout());

        mHorizontalUpperRadioButton.setText("Horizontal Upper");
        mHorizontalUpperRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mDirectionPanel.add(mHorizontalUpperRadioButton, gridBagConstraints);

        mVerticalLeftRadioButton.setText("Vertical Left");
        mVerticalLeftRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mDirectionPanel.add(mVerticalLeftRadioButton, gridBagConstraints);

        mHorizontalLowerRadioButton.setText("Horizontal Lower");
        mHorizontalLowerRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mDirectionPanel.add(mHorizontalLowerRadioButton, gridBagConstraints);

        mVerticalRightRadioButton.setText("Vertical Right");
        mVerticalRightRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mDirectionPanel.add(mVerticalRightRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        mLayoutSubPanel.add(mDirectionPanel, gridBagConstraints);

        mStartXPanel.setLayout(new java.awt.GridBagLayout());

        mXValueTextField.setColumns(6);
        mXValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mStartXPanel.add(mXValueTextField, gridBagConstraints);

        mXDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mStartXPanel.add(mXDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLayoutSubPanel.add(mStartXPanel, gridBagConstraints);

        mEndXPanel.setLayout(new java.awt.GridBagLayout());

        mYValueTextField.setColumns(6);
        mYValueTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mEndXPanel.add(mYValueTextField, gridBagConstraints);

        mYDateButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mEndXPanel.add(mYDateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mLayoutSubPanel.add(mEndXPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        mLayoutTabPanel.add(mLayoutSubPanel, gridBagConstraints);

        getContentPane().setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel mBarLengthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mBarLengthSpinner;
    private javax.swing.JLabel mBarWidthLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGSpinner mBarWidthSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mColor1Button;
    private javax.swing.JLabel mColor1Label;
    private jp.riken.brain.ni.samuraigraph.base.SGColorSelectionButton mColor2Button;
    private javax.swing.JLabel mColor2Label;
    private javax.swing.JPanel mColorBarRenderParentPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGComboBox mColorBarStyleComboBox;
    private javax.swing.JLabel mColorBarStyleLabel;
    private javax.swing.JLabel mDirectionLabel;
    private javax.swing.JPanel mDirectionPanel;
    private javax.swing.JPanel mEndXPanel;
    private javax.swing.JPanel mGradientColorPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mHorizontalLowerRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mHorizontalUpperRadioButton;
    private javax.swing.JPanel mLayoutSubPanel;
    private javax.swing.JPanel mLayoutTabPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGCheckBox mReversedOrderCheckBox;
    private javax.swing.JPanel mStartXPanel;
    private javax.swing.JPanel mStyleSubPanel;
    private javax.swing.JPanel mStyleTabPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mVerticalLeftRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGRadioButton mVerticalRightRadioButton;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mXDateButton;
    private javax.swing.JLabel mXLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mXValueTextField;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mYDateButton;
    private javax.swing.JLabel mYLabel;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mYValueTextField;
    // End of variables declaration//GEN-END:variables

    private SGTwoAxesSelectionPanel mAxisPanel = new SGTwoAxesSelectionPanel();

    private JRadioButton mColorBarDirectionNoSelectedRadioButton = new JRadioButton();
    
    private SGColorMapRendererPanel mColorBarRenderPanel = null;

    private Map<String, Color[]> mColorArrayMap = new HashMap<String, Color[]>();
    
    private Map<String, Boolean> mReversedOrderMap = new HashMap<String, Boolean>();
    
    protected SGComponentGroup mDateXComponentGroup = new SGComponentGroup();

    protected SGComponentGroup mDateYComponentGroup = new SGComponentGroup();

    // initialize this dialog
    private void initProperty() {
        
        this.mPropertyHeaderPanel.add(this.mAxisPanel);
    	this.mAxisPanel.addAxisSelectionListener(this);

        // set the title
        this.setTitle(TITLE);
        
        // color bar style
        String[] colorMapNameArray = SGColorBarColorMapManager.DEFAULT_COLOR_MAP_NAMES;
        for (int ii = 0; ii < colorMapNameArray.length; ii++) {
            this.mColorBarStyleComboBox.addItem(colorMapNameArray[ii]);
        }
        
        //
        // create button groups
        //
        
        // direction
        ButtonGroup directionGroup = new ButtonGroup();
        directionGroup.add(this.mHorizontalLowerRadioButton);
        directionGroup.add(this.mHorizontalUpperRadioButton);
        directionGroup.add(this.mVerticalLeftRadioButton);
        directionGroup.add(this.mVerticalRightRadioButton);
        directionGroup.add(this.mColorBarDirectionNoSelectedRadioButton);
        
        //
        // set the spinner model
        //

        // width
        this.mBarWidthSpinner.initProperties(new SpinnerNumberModel(10.0,
                COLOR_BAR_WIDTH_MIN, COLOR_BAR_WIDTH_MAX, COLOR_BAR_WIDTH_STEP),
                COLOR_BAR_SIZE_UNIT, COLOR_BAR_SIZE_FRAC_DIFIT_MIN, 
                COLOR_BAR_SIZE_FRAC_DIFIT_MAX);

        // length
        this.mBarLengthSpinner.initProperties(new SpinnerNumberModel(10.0,
                COLOR_BAR_LENGTH_MIN, COLOR_BAR_LENGTH_MAX, COLOR_BAR_LENGTH_STEP),
                COLOR_BAR_SIZE_UNIT, COLOR_BAR_SIZE_FRAC_DIFIT_MIN,
                COLOR_BAR_SIZE_FRAC_DIFIT_MAX);
        
        // add an action listener
        this.mHorizontalUpperRadioButton.addActionListener(this);
        this.mHorizontalLowerRadioButton.addActionListener(this);
        this.mVerticalLeftRadioButton.addActionListener(this);
        this.mVerticalRightRadioButton.addActionListener(this);
        this.mReversedOrderCheckBox.addActionListener(this);
        this.mAxisPanel.addActionListener(this);
        this.mXDateButton.addActionListener(this);
        this.mYDateButton.addActionListener(this);

        // set the name
        this.mXValueTextField.setDescription("Layout-> X");
        this.mYValueTextField.setDescription("Layout-> Y");
        this.mBarWidthSpinner.setDescription("Layout-> Width");
        this.mBarLengthSpinner.setDescription("Layout-> Length");

        // add action listener
        this.mColorBarStyleComboBox.addItemListener(this);
        
        // sets the rendering panel
        this.mColorBarRenderPanel = new SGColorMapRendererPanel(new SGColorBarColorMapManager());
        this.mColorBarRenderParentPanel.add(this.mColorBarRenderPanel);
        
        this.setEnabledColorSelectionComponents(false);
        
        // hide the shift components
        this.setShiftComponentsVisible(false);

        // hide the components for date mode
        this.setDateComponentsVisible(false);
        
        // set up the component group for date mode
        this.mDateXComponentGroup.addElement(
        		new SGComponentGroupElement(this.mXDateButton));
        this.mDateYComponentGroup.addElement(
        		new SGComponentGroupElement(this.mYDateButton));
        
        // sets the calendar icon
        this.setCalendarIcon(this.mXDateButton);
        this.setCalendarIcon(this.mYDateButton);
    }

    /**
     * Returns a list of text fields components for number input.
     * 
     * @return a list of text field components for number input
     */
    @Override
    public List<SGTextField> getAxisNumberTextFieldList() {
        final List<SGTextField> list = super.getAxisNumberTextFieldList();
        list.add(this.mXValueTextField);
        list.add(this.mYValueTextField);
        return list;
    }

    /**
     * Returns a list of spinner components.
     * 
     * @return a list of spinner components
     */
	@Override
	public List<SGSpinner> getSpinnerList() {
		List<SGSpinner> list = super.getSpinnerList();
        list.add(this.mBarWidthSpinner);
        list.add(this.mBarLengthSpinner);
        return list;
    }
    
    public Number getXValue() {
        return this.getNumber(this.mXValueTextField);
    }
    
    public Number getYValue() {
        return this.getNumber(this.mYValueTextField);
    }

    public Number getBarWidth() {
        return this.mBarWidthSpinner.getNumber();
    }

    public Number getBarLength() {
        return this.mBarLengthSpinner.getNumber();
    }
    
    public String getColorBarDirection() {
        String direction = null;
        if (this.mHorizontalLowerRadioButton.isSelected()) {
            direction = SGIColorBarConstants.DIRECTION_HORIZONTAL_LOWER;
        } else if (this.mHorizontalUpperRadioButton.isSelected()) {
            direction = SGIColorBarConstants.DIRECTION_HORIZONTAL_UPPER;
        } else if (this.mVerticalLeftRadioButton.isSelected()) {
            direction = SGIColorBarConstants.DIRECTION_VERTICAL_LEFT;
        } else if (this.mVerticalRightRadioButton.isSelected()) {
            direction = SGIColorBarConstants.DIRECTION_VERTICAL_RIGHT;
        }
        return direction;
    }
    
    public Boolean isReversedOrder() {
        return this.mReversedOrderCheckBox.getSelected();
    }
    
    public String getColorBarStyle() {
    	return this.getSelectedColorMapName();
    }
    
    public boolean setXValue(final Object obj) {
        return this.setValue(this.mXValueTextField, obj);
    }

    public boolean setYValue(final Object obj) {
        return this.setValue(this.mYValueTextField, obj);
    }

    public boolean setBarWidth(final Object value) {
        return this.setValue(this.mBarWidthSpinner, value);
    }

    public boolean setBarLength(final Object value) {
        return this.setValue(this.mBarLengthSpinner, value);
    }
    
    public boolean setColorBarDirection(final String direction) {
        if (direction == null) {
            this.mColorBarDirectionNoSelectedRadioButton.setSelected(true);
        } else {
            if (direction.equals(SGIColorBarConstants.DIRECTION_HORIZONTAL_LOWER)) {
                this.mHorizontalLowerRadioButton.setSelected(true);
            } else if (direction.equals(SGIColorBarConstants.DIRECTION_HORIZONTAL_UPPER)) {
                this.mHorizontalUpperRadioButton.setSelected(true);
            } else if (direction.equals(SGIColorBarConstants.DIRECTION_VERTICAL_LEFT)) {
                this.mVerticalLeftRadioButton.setSelected(true);
            } else if (direction.equals(SGIColorBarConstants.DIRECTION_VERTICAL_RIGHT)) {
                this.mVerticalRightRadioButton.setSelected(true);
            }
        }
        return true;
    }
    
    @Override
    public boolean setDialogProperty() {
    	
    	if (!super.setDialogProperty()) {
    		return false;
    	}
        
        List<SGIPropertyDialogObserver> list = this.mPropertyDialogObserverList;
        final int num = list.size();

        // select axis panel
        selectAxisPanel(this, this.mAxisPanel, list);

        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, list);
        
        double[] xValueArray = new double[num];
        double[] yValueArray = new double[num];
        float[] barWidthArray = new float[num];
        float[] barLengthArray = new float[num];
        String[] directionArray = new String[num];
        String[] styleArray = new String[num];
        for (int ii = 0; ii < num; ii++) {
        	SGIColorBarDialogObserver l = (SGIColorBarDialogObserver) list.get(ii);
        	xValueArray[ii] = l.getXValue();
        	yValueArray[ii] = l.getYValue();
        	barWidthArray[ii] = l.getBarWidth(COLOR_BAR_SIZE_UNIT);
        	barLengthArray[ii] = l.getBarLength(COLOR_BAR_SIZE_UNIT);
        	directionArray[ii] = l.getDirection();
        	styleArray[ii] = l.getColorBarStyle();
        }

        //
        // Checks the equality.
        //
        
        Double xValue = SGUtility.checkEquality(xValueArray);
        Double yValue = SGUtility.checkEquality(yValueArray);
        Float barWidth = SGUtility.checkEquality(barWidthArray);
        Float barLength = SGUtility.checkEquality(barLengthArray);
        String direction = SGUtility.checkEquality(directionArray);
        String style = SGUtility.checkEquality(styleArray);

        //
        // Sets the values.
        //
        
        // layout
        this.setXValue(xValue);
        this.setYValue(yValue);
        this.setBarWidth(barWidth);
        this.setBarLength(barLength);
        this.setColorBarDirection(direction);

        // style
        this.mColorBarStyleComboBox.setSelectedItem(style);

        // sets color map properties
        String[] colorMapNames = SGColorBarColorMapManager.DEFAULT_COLOR_MAP_NAMES;
        for (String colorMapName : colorMapNames) {
        	final Color[] colors;
        	final Boolean reversed;
            if (this.mPropertyDialogObserverList.size() == 1) {
            	SGIColorBarDialogObserver obs = (SGIColorBarDialogObserver) this.mPropertyDialogObserverList.get(0);
            	SGColorMap colorMap = obs.getColorMap(colorMapName);
            	colors = colorMap.getColors();
            	reversed = colorMap.isReversedOrder();
            } else {
            	Color[][] colorsArray = new Color[num][];
            	boolean[] reversedArray = new boolean[num];
                for (int ii = 0; ii < num; ii++) {
                	SGIColorBarDialogObserver obs = (SGIColorBarDialogObserver) list.get(ii);
                	SGColorMap colorMap = obs.getColorMap(colorMapName);
                	colorsArray[ii] = colorMap.getColors();
                	reversedArray[ii] = colorMap.isReversedOrder();
                }
                colors = SGUtility.checkEquality(colorsArray);
                reversed = SGUtility.checkEquality(reversedArray);
            }
        	this.mColorArrayMap.put(colorMapName, colors);
        	this.mReversedOrderMap.put(colorMapName, reversed);
        }
        this.updateStyleComponents(style);
        
        return true;
    }
    
    // Sets up the title.
    @Override
    protected void setupTitle() {
    	this.setTitle(TITLE);
    }
    
    // Updates the style components.
    private void updateStyleComponents(final String name) {
    	// sets enabled / disabled the color components
		final boolean colorAssignable = SGColorBarColorMapManager.isColorAssignableType(name);
		this.setEnabledColorSelectionComponents(colorAssignable);
		
		// sets the name of color map
    	this.mColorBarRenderPanel.setColorMapName(name);
    	
        if (name != null) {
        	// gets colors
			Color[] colors = this.mColorArrayMap.get(name);
        	Color color1 = null;
        	Color color2 = null;
    		if (colorAssignable) {
    			if (colors != null) {
    				color1 = colors[0];
    				color2 = colors[1];
    			}
    		}
    		
    		// sets colors to buttons
        	this.mColor1Button.setColor(color1);
        	this.mColor2Button.setColor(color2);
        	
        	// setup reversed order check box
        	Boolean reversed = this.mReversedOrderMap.get(name);
        	this.mReversedOrderCheckBox.setEnabled(true);
        	this.mReversedOrderCheckBox.setSelected(reversed);
        	
        	// setup color bar render panel
        	this.mColorBarRenderPanel.setColors(colors);
    		if (colorAssignable) {
            	this.mColorBarRenderPanel.setAvailable(reversed != null && colors != null);
    		} else {
            	this.mColorBarRenderPanel.setAvailable(reversed != null);
    		}
        	this.mColorBarRenderPanel.setReversedOrder(reversed);
        } else {
        	this.mColor1Button.setColor(null);
        	this.mColor2Button.setColor(null);
        	this.mReversedOrderCheckBox.setEnabled(false);
        	this.mReversedOrderCheckBox.setSelected(null);
        	this.mColorBarRenderPanel.setAvailable(false);
        }
        this.repaint();
    }

    public boolean setPropertiesToObserver(SGIPropertyDialogObserver obs) {
    	
    	if (!super.setPropertiesToObserver(obs)) {
    		return false;
    	}
        
        SGIColorBarDialogObserver l = (SGIColorBarDialogObserver) obs;

        // get values
        final int xLocation = this.mAxisPanel.getXAxisLocation();
        final int yLocation = this.mAxisPanel.getYAxisLocation();
        final Number xValue = this.getXValue();
        final Number yValue = this.getYValue();
        final Number barWidth = this.getBarWidth();
        final Number barLength = this.getBarLength();
        final String direction = this.getColorBarDirection();
        final Number tickMarkWidth = this.getTickMarkWidth();
        final Number tickMarkLength = this.getTickMarkLength();
        final String style = this.getColorBarStyle();
        
        // check values
        ArrayList list = new ArrayList();
        if (l.hasValidXAxisValue(xLocation, xValue) == false) {
            list.add("X");
        }
        if (l.hasValidYAxisValue(yLocation, yValue) == false) {
            list.add("Y");
        }
        if (list.size() != 0) {
            StringBuffer sb = new StringBuffer();
            sb.append(ERRMSG_AXIS_VALUE_INVALID);
            sb.append(":\n");
            for (int ii = 0; ii < list.size(); ii++) {
                String str = (String) list.get(ii);
                sb.append('-');
                sb.append(str);
                sb.append('\n');
            }
            this.setInputErrorMessage(sb.toString());
            return false;
        }

        // set the related axes
        if (xLocation != -1) {
            l.setXAxisLocation(xLocation);
        }

        if (yLocation != -1) {
            l.setYAxisLocation(yLocation);
        }

        // x value
        if (xValue != null) {
            l.setXValue(xValue.doubleValue());
        }

        // y value
        if (yValue != null) {
            l.setYValue(yValue.doubleValue());
        }
        
        // bar width
        if (barWidth != null) {
            l.setBarWidth(barWidth.floatValue(), COLOR_BAR_SIZE_UNIT);
        }
        
        // bar length
        if (barLength != null) {
            l.setBarLength(barLength.floatValue(), COLOR_BAR_SIZE_UNIT);
        }
        
        // direction
        if (direction != null) {
            l.setDirection(direction);
        }
        
        // tick mark width
        if (tickMarkWidth != null) {
            l.setTickMarkWidth(tickMarkWidth.floatValue(), LINE_WIDTH_UNIT);
        }
        
        // tick mark length
        if (tickMarkLength != null) {
            l.setMajorTickMarkLength(tickMarkLength.floatValue(), TICK_MARK_LENGTH_UNIT);
        }

        // style
        if (style != null) {
        	l.setColorBarStyle(style);
        }

        String[] names = SGColorBarColorMapManager.DEFAULT_COLOR_MAP_NAMES;
        for (String name : names) {
        	// colors
        	Color[] colors = this.mColorArrayMap.get(name);
        	if (colors != null) {
            	l.setColors(name, colors);
        	}
        	
        	// reversed order
        	Boolean reversed = this.mReversedOrderMap.get(name);
        	if (reversed != null) {
            	l.setReversedOrder(name, reversed);
        	}
        }
        
        return true;
    }
    
    /**
     * Called when an item event is invoked.
     */
    public void itemStateChanged(ItemEvent e) {
        Object source = e.getSource();
        if (source.equals(this.mColorBarStyleComboBox)) {
        	String name = this.getSelectedColorMapName();
        	if (name != null) {
        		this.updateStyleComponents(name);
        	}
        }
    }
    
	private void setEnabledColorSelectionComponents(final boolean b) {
		this.mColor1Label.setEnabled(b);
		this.mColor1Button.setEnabled(b);
		this.mColor2Label.setEnabled(b);
		this.mColor2Button.setEnabled(b);
	}

    /**
     * Called when an action event is invoked.
     */
    public void actionPerformed(ActionEvent e) {
        super.actionPerformed(e);
        Object source = e.getSource();
        if (source.equals(this.mReversedOrderCheckBox)) {
        	Boolean selected = this.mReversedOrderCheckBox.getSelected();
        	if (selected == null) {
        		selected = true;
        	}
    		String style = this.getSelectedColorMapName();
    		if (style != null) {
    			this.mReversedOrderMap.put(style.toString(), selected);
    		}
    		this.updateStyleComponents(style);
            this.repaint();
        } else if (source.equals(this.mXDateButton)) {
    		this.onDateButtonPressed(this.mXValueTextField);
    	} else if (source.equals(this.mYDateButton)) {
    		this.onDateButtonPressed(this.mYValueTextField);
        }
    }

    /**
     * Returns a list of color selection buttons.
     * 
     * @return a list of color selection buttons
     */
	@Override
	public List<SGColorSelectionButton> getColorSelectionButtonsList() {
		List<SGColorSelectionButton> list = super.getColorSelectionButtonsList();
		list.add(this.mColor1Button);
		list.add(this.mColor2Button);
		return list;
	}

    /**
     * Invoked when the color of a color selection button is changed.
     * 
     * @param b
     *          a button
     */
	@Override
    protected void buttonColorAssigned(SGColorSelectionButton b) {
		super.buttonColorAssigned(b);
		if (this.mColor1Button.equals(b) || this.mColor2Button.equals(b)) {
        	// updates the colors
			Color color1 = this.mColor1Button.getColor();
			Color color2 = this.mColor2Button.getColor();
			String name = this.getSelectedColorMapName();
			final boolean available = (color1 != null && color2 != null && name != null);
			this.mColorBarRenderPanel.setAvailable(available);
			if (available) {
				Color[] colors = { color1, color2 };
				this.mColorBarRenderPanel.setColors(colors);
				this.mColorArrayMap.put(name, colors);
				this.updateStyleComponents(name);
			}
        	this.repaint();
		}
    }
	
	private String getSelectedColorMapName() {
		Object item = this.mColorBarStyleComboBox.getSelectedItem();
		if (item == null) {
			return null;
		}
		return item.toString();
	}

	@Override
    public Boolean getDateMode() {
		// always returns false
		return false;
    }
    
	@Override
    public boolean setDateMode(final Boolean b) {
    	// do nothing
    	return true;
    }

	@Override
	public void onXAxisDateSelected(boolean selected) {
		this.mDateXComponentGroup.setEnabled(selected);
	}

	@Override
	public void onYAxisDateSelected(boolean selected) {
		this.mDateYComponentGroup.setEnabled(selected);
	}

	@Override
	public void onAxisSelectionStateChanged(SGAxisSelectionPanel axisPanel) {
        // set properties to the date components
        setDateComponentProperties(this, this.mAxisPanel, 
        		this.mPropertyDialogObserverList);
	}
}
