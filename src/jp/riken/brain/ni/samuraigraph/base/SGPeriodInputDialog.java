
package jp.riken.brain.ni.samuraigraph.base;

import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import org.joda.time.Period;


/**
 * A dialog to input the period.
 * 
 */
public class SGPeriodInputDialog extends SGAbstractDateInputDialog {

	private static final long serialVersionUID = 7556264187876856502L;
	
	public static final String TITLE = "Input Period";
	
    public SGPeriodInputDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.init();
    }

    public SGPeriodInputDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mButtonPanel = new javax.swing.JPanel();
        mOKButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mCancelButton = new jp.riken.brain.ni.samuraigraph.base.SGButton();
        mMainPanel = new javax.swing.JPanel();
        mTextField = new jp.riken.brain.ni.samuraigraph.base.SGTextField();
        mDatePanel = new javax.swing.JPanel();
        mYearSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mYearLabel = new javax.swing.JLabel();
        mMonthLabel = new javax.swing.JLabel();
        mDayLabel = new javax.swing.JLabel();
        mDaySpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mMonthSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mTimePanel = new javax.swing.JPanel();
        mMinuteLabel = new javax.swing.JLabel();
        mMillisecondLabel = new javax.swing.JLabel();
        mMillisecondSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mHourLabel = new javax.swing.JLabel();
        mSecondLabel = new javax.swing.JLabel();
        mSecondSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mMinuteSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();
        mHourSpinner = new jp.riken.brain.ni.samuraigraph.base.SGSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mOKButton.setText("OK");
        mOKButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mOKButton);

        mCancelButton.setText("Cancel");
        mCancelButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mButtonPanel.add(mCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(mButtonPanel, gridBagConstraints);

        mMainPanel.setLayout(new java.awt.GridBagLayout());

        mTextField.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mMainPanel.add(mTextField, gridBagConstraints);

        mDatePanel.setLayout(new java.awt.GridBagLayout());

        mYearSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYearSpinner.setPreferredSize(new java.awt.Dimension(80, 24));
        mYearSpinner.setValue(new Integer(0));
        mYearSpinner.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mDatePanel.add(mYearSpinner, gridBagConstraints);

        mYearLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mYearLabel.setText("Year");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mDatePanel.add(mYearLabel, gridBagConstraints);

        mMonthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMonthLabel.setText("Month");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mDatePanel.add(mMonthLabel, gridBagConstraints);

        mDayLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mDayLabel.setText("Day");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mDatePanel.add(mDayLabel, gridBagConstraints);

        mDaySpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mDaySpinner.setPreferredSize(new java.awt.Dimension(80, 24));
        mDaySpinner.setValue(new Integer(0));
        mDaySpinner.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mDatePanel.add(mDaySpinner, gridBagConstraints);

        mMonthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMonthSpinner.setPreferredSize(new java.awt.Dimension(80, 24));
        mMonthSpinner.setValue(new Integer(0));
        mMonthSpinner.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mDatePanel.add(mMonthSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mMainPanel.add(mDatePanel, gridBagConstraints);

        mTimePanel.setLayout(new java.awt.GridBagLayout());

        mMinuteLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMinuteLabel.setText("Minute");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mMinuteLabel, gridBagConstraints);

        mMillisecondLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMillisecondLabel.setText("Millisecond");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mMillisecondLabel, gridBagConstraints);

        mMillisecondSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMillisecondSpinner.setPreferredSize(new java.awt.Dimension(80, 24));
        mMillisecondSpinner.setValue(new Integer(0));
        mMillisecondSpinner.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mMillisecondSpinner, gridBagConstraints);

        mHourLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mHourLabel.setText("Hour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mTimePanel.add(mHourLabel, gridBagConstraints);

        mSecondLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSecondLabel.setText("Second");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mSecondLabel, gridBagConstraints);

        mSecondSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mSecondSpinner.setPreferredSize(new java.awt.Dimension(80, 24));
        mSecondSpinner.setValue(new Integer(0));
        mSecondSpinner.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mSecondSpinner, gridBagConstraints);

        mMinuteSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mMinuteSpinner.setPreferredSize(new java.awt.Dimension(80, 24));
        mMinuteSpinner.setValue(new Integer(0));
        mMinuteSpinner.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        mTimePanel.add(mMinuteSpinner, gridBagConstraints);

        mHourSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mHourSpinner.setPreferredSize(new java.awt.Dimension(80, 24));
        mHourSpinner.setValue(new Integer(0));
        mHourSpinner.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        mTimePanel.add(mHourSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mMainPanel.add(mTimePanel, gridBagConstraints);

        getContentPane().add(mMainPanel, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mButtonPanel;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mCancelButton;
    private javax.swing.JPanel mDatePanel;
    private javax.swing.JLabel mDayLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mDaySpinner;
    private javax.swing.JLabel mHourLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mHourSpinner;
    private javax.swing.JPanel mMainPanel;
    private javax.swing.JLabel mMillisecondLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mMillisecondSpinner;
    private javax.swing.JLabel mMinuteLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mMinuteSpinner;
    private javax.swing.JLabel mMonthLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mMonthSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGButton mOKButton;
    private javax.swing.JLabel mSecondLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mSecondSpinner;
    private jp.riken.brain.ni.samuraigraph.base.SGTextField mTextField;
    private javax.swing.JPanel mTimePanel;
    private javax.swing.JLabel mYearLabel;
    jp.riken.brain.ni.samuraigraph.base.SGSpinner mYearSpinner;
    // End of variables declaration//GEN-END:variables
    
    protected static final int RANGE_MIN = -9999;

    protected static final int RANGE_MAX = 9999;

    private void init() {
    	
    	this.setTitle(TITLE);
    	
    	// sets up the components
		this.initSpinner(this.mYearSpinner);
		this.initSpinner(this.mMonthSpinner);
		this.initSpinner(this.mDaySpinner);
		this.initSpinner(this.mHourSpinner);
		this.initSpinner(this.mMinuteSpinner);
		this.initSpinner(this.mSecondSpinner);
		this.initSpinner(this.mMillisecondSpinner, 0, RANGE_MAX);
		
		this.mTextField.getDocument().addDocumentListener(this);
		this.mTextField.addFocusListener(this);
		
		this.mOKButton.addActionListener(this);
		this.mCancelButton.addActionListener(this);
		
		this.mTextField.requestFocus();
		this.mTextFieldFocused = true;
    }
    
    private void initSpinner(SGSpinner sp) {
		this.initSpinner(sp, RANGE_MIN, RANGE_MAX);
    }
    
    private void initSpinner(SGSpinner sp, final int min, final int max) {
		sp.initProperties(new SpinnerNumberModel(0.0, min, max, 1),
				null, 0, 0);
		sp.addChangeListener(this);
		sp.getFormattedTextField().getDocument().addDocumentListener(this);
		sp.getFormattedTextField().addFocusListener(this);
    }

    @Override
	protected SGTextField getTextField() {
		return this.mTextField;
	}
    
	@Override
	protected SGButton getOKButton() {
		return this.mOKButton;
	}

	@Override
	protected SGButton getCancelButton() {
		return this.mCancelButton;
	}

	@Override
	protected void onTextUpdated(DocumentEvent e) {
		Document doc = e.getDocument();
		String text = null;
		try {
			text = doc.getText(0, doc.getLength());
		} catch (BadLocationException e1) {
			return;
		}
		boolean valid = false;
		Period p = SGUtilityText.getPeriod(text);
		if (p != null) {
			int years = 0;
			int months = 0;
			int days = 0;
			int hours = 0;
			int minutes = 0;
			int seconds = 0;
			int millis = 0;
			final int weeks = p.getWeeks();
			if (weeks != 0) {
				days = 7 * weeks;
			} else {
				years = p.getYears();
				months = p.getMonths();
				days = p.getDays();
				hours = p.getHours();
				minutes = p.getMinutes();
				seconds = p.getSeconds();
				millis = p.getMillis();
			}
			this.mYearSpinner.setValue(years);
			this.mMonthSpinner.setValue(months);
			this.mDaySpinner.setValue(days);
			this.mHourSpinner.setValue(hours);
			this.mMinuteSpinner.setValue(minutes);
			this.mSecondSpinner.setValue(seconds);
			this.mMillisecondSpinner.setValue(millis);
			valid = true;
		}
		this.getOKButton().setEnabled(valid);
	}

	@Override
	protected String createString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append('P');
		
		// year
		Integer nYear = this.getNumber(this.mYearSpinner);
		if (nYear == null) {
			return "";
		}
		if (nYear != 0) {
			String sYear = String.format("%d", nYear);
			sb.append(sYear);
			sb.append('Y');
		}

		// month
		Integer nMonth = this.getNumber(this.mMonthSpinner);
		if (nMonth == null) {
			return "";
		}
		if (nMonth != 0) {
			String sMonth = String.format("%d", nMonth);
			sb.append(sMonth);
			sb.append('M');
		}

		// day
		Integer nDay = this.getNumber(this.mDaySpinner);
		if (nDay == null) {
			return "";
		}
		if (nDay != 0) {
			String sDay = String.format("%d", nDay);
			sb.append(sDay);
			sb.append('D');
		}

		// hour
		Integer nHour = this.getNumber(this.mHourSpinner);
		if (nHour == null) {
			return "";
		}

		// minute
		Integer nMinute = this.getNumber(this.mMinuteSpinner);
		if (nMinute == null) {
			return "";
		}
		
		// second
		Integer nSecond = this.getNumber(this.mSecondSpinner);
		if (nSecond == null) {
			return "";
		}

		// millisecond
		Integer nMillis = this.getNumber(this.mMillisecondSpinner);
		if (nMillis == null) {
			return "";
		}

		if (nHour != 0 || nMinute != 0 || nSecond != 0 || nMillis != 0) {
			sb.append('T');
		}
		if (nHour != 0) {
			sb.append(nHour);
			sb.append('H');
		}
		if (nMinute != 0) {
			sb.append(nMinute);
			sb.append('M');
		}
		
		String sMillis = null;
		if (nMillis != 0) {
			sMillis = String.format("%03d", nMillis);
		}
		if (nSecond != 0) {
			sb.append(nSecond);
			if (sMillis != null) {
				sb.append('.');
				sb.append(sMillis);
			}
			sb.append('S');
		} else {
			if (sMillis != null) {
				sb.append("0.");
				sb.append(sMillis);
				sb.append('S');
			}
		}

		return sb.toString();
	}
	
	private Integer getNumber(SGSpinner sp) {
		String text = sp.getText();
		if (text == null || "".equals(text)) {
			return null;
		}
		Integer num = SGUtilityText.getInteger(text);
		if (num == null) {
			return null;
		}
		if (num < RANGE_MIN || RANGE_MAX < num) {
			return null;
		}
		return num;
	}

	public void setPeriod(Period p) {
		this.setPeriod(p.toString());
	}
	
	public void setPeriod(final double value) {
		Period p = SGDateUtility.toPeriodOfDays(value);
		this.setPeriod(p.toString());
	}
	
	private void setPeriod(String str) {
		SGTextField tf = getTextField();
		tf.requestFocus();
		tf.setText(str);
	}

	public Period getPeriod() {
		String text = this.getTextField().getText();
		Period p = SGUtilityText.getPeriod(text);
		return p;
	}

	@Override
	protected void updateTextSub(String str) {
		Period p = SGUtilityText.getPeriod(str);
		this.getOKButton().setEnabled(p != null);
	}

}
